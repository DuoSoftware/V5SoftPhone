//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuoSoftware.DuoSoftPhone.RefDuoMainConfigService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkClass", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum TrunkClass : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SIP = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SS7 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PSTN = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XMPP = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkType", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum TrunkType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inbound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Outbound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Both = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkCategory", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum TrunkCategory : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Local = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        International = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Both = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegistrationDirection", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum RegistrationDirection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegisterIn = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegisterOut = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkDetails", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class TrunkDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuditTrailRefIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection RegDirField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrunkCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrunkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrunkNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool defaultConfEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string domainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ipUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int noOfIncomingCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int noOfOutgoingCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string opStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int recStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string transactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuditTrailRefID {
            get {
                return this.AuditTrailRefIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditTrailRefIDField, value) != true)) {
                    this.AuditTrailRefIDField = value;
                    this.RaisePropertyChanged("AuditTrailRefID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Profile {
            get {
                return this.ProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfileField, value) != true)) {
                    this.ProfileField = value;
                    this.RaisePropertyChanged("Profile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection RegDir {
            get {
                return this.RegDirField;
            }
            set {
                if ((this.RegDirField.Equals(value) != true)) {
                    this.RegDirField = value;
                    this.RaisePropertyChanged("RegDir");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tenant {
            get {
                return this.TenantField;
            }
            set {
                if ((this.TenantField.Equals(value) != true)) {
                    this.TenantField = value;
                    this.RaisePropertyChanged("Tenant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrGuid {
            get {
                return this.TrGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.TrGuidField, value) != true)) {
                    this.TrGuidField = value;
                    this.RaisePropertyChanged("TrGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrunkCode {
            get {
                return this.TrunkCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TrunkCodeField, value) != true)) {
                    this.TrunkCodeField = value;
                    this.RaisePropertyChanged("TrunkCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrunkID {
            get {
                return this.TrunkIDField;
            }
            set {
                if ((this.TrunkIDField.Equals(value) != true)) {
                    this.TrunkIDField = value;
                    this.RaisePropertyChanged("TrunkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrunkName {
            get {
                return this.TrunkNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TrunkNameField, value) != true)) {
                    this.TrunkNameField = value;
                    this.RaisePropertyChanged("TrunkName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool defaultConfEnabled {
            get {
                return this.defaultConfEnabledField;
            }
            set {
                if ((this.defaultConfEnabledField.Equals(value) != true)) {
                    this.defaultConfEnabledField = value;
                    this.RaisePropertyChanged("defaultConfEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string domain {
            get {
                return this.domainField;
            }
            set {
                if ((object.ReferenceEquals(this.domainField, value) != true)) {
                    this.domainField = value;
                    this.RaisePropertyChanged("domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ipUrl {
            get {
                return this.ipUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ipUrlField, value) != true)) {
                    this.ipUrlField = value;
                    this.RaisePropertyChanged("ipUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int noOfIncomingCalls {
            get {
                return this.noOfIncomingCallsField;
            }
            set {
                if ((this.noOfIncomingCallsField.Equals(value) != true)) {
                    this.noOfIncomingCallsField = value;
                    this.RaisePropertyChanged("noOfIncomingCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int noOfOutgoingCalls {
            get {
                return this.noOfOutgoingCallsField;
            }
            set {
                if ((this.noOfOutgoingCallsField.Equals(value) != true)) {
                    this.noOfOutgoingCallsField = value;
                    this.RaisePropertyChanged("noOfOutgoingCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string opStatus {
            get {
                return this.opStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.opStatusField, value) != true)) {
                    this.opStatusField = value;
                    this.RaisePropertyChanged("opStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int recStatus {
            get {
                return this.recStatusField;
            }
            set {
                if ((this.recStatusField.Equals(value) != true)) {
                    this.recStatusField = value;
                    this.RaisePropertyChanged("recStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string transactionID {
            get {
                return this.transactionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.transactionIDField, value) != true)) {
                    this.transactionIDField = value;
                    this.RaisePropertyChanged("transactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat {
            get {
                return this.trunkCatField;
            }
            set {
                if ((this.trunkCatField.Equals(value) != true)) {
                    this.trunkCatField = value;
                    this.RaisePropertyChanged("trunkCat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass {
            get {
                return this.trunkClassField;
            }
            set {
                if ((this.trunkClassField.Equals(value) != true)) {
                    this.trunkClassField = value;
                    this.RaisePropertyChanged("trunkClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType {
            get {
                return this.trunkTypeField;
            }
            set {
                if ((this.trunkTypeField.Equals(value) != true)) {
                    this.trunkTypeField = value;
                    this.RaisePropertyChanged("trunkType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkConnection", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum TrunkConnection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cloud = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Private = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfoForTrunk", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class ServerInfoForTrunk : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZoneOrCSIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZoneOrCSID {
            get {
                return this.ZoneOrCSIDField;
            }
            set {
                if ((this.ZoneOrCSIDField.Equals(value) != true)) {
                    this.ZoneOrCSIDField = value;
                    this.RaisePropertyChanged("ZoneOrCSID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrunkPhoneNumbers", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class TrunkPhoneNumbers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallType CallTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfConcCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrunkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrunkNumberUuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallType CallType {
            get {
                return this.CallTypeField;
            }
            set {
                if ((this.CallTypeField.Equals(value) != true)) {
                    this.CallTypeField = value;
                    this.RaisePropertyChanged("CallType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfConcCalls {
            get {
                return this.NoOfConcCallsField;
            }
            set {
                if ((this.NoOfConcCallsField.Equals(value) != true)) {
                    this.NoOfConcCallsField = value;
                    this.RaisePropertyChanged("NoOfConcCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduleId {
            get {
                return this.ScheduleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleIdField, value) != true)) {
                    this.ScheduleIdField = value;
                    this.RaisePropertyChanged("ScheduleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrunkID {
            get {
                return this.TrunkIDField;
            }
            set {
                if ((this.TrunkIDField.Equals(value) != true)) {
                    this.TrunkIDField = value;
                    this.RaisePropertyChanged("TrunkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrunkNumberUuid {
            get {
                return this.TrunkNumberUuidField;
            }
            set {
                if ((object.ReferenceEquals(this.TrunkNumberUuidField, value) != true)) {
                    this.TrunkNumberUuidField = value;
                    this.RaisePropertyChanged("TrunkNumberUuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallType", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum CallType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Incoming = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Outgoing = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Both = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fax = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AutoGeneratedAccDetails", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class AutoGeneratedAccDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultConfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrunkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DefaultConf {
            get {
                return this.DefaultConfField;
            }
            set {
                if ((this.DefaultConfField.Equals(value) != true)) {
                    this.DefaultConfField = value;
                    this.RaisePropertyChanged("DefaultConf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpUrl {
            get {
                return this.IpUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.IpUrlField, value) != true)) {
                    this.IpUrlField = value;
                    this.RaisePropertyChanged("IpUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrGuid {
            get {
                return this.TrGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.TrGuidField, value) != true)) {
                    this.TrGuidField = value;
                    this.RaisePropertyChanged("TrGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrunkID {
            get {
                return this.TrunkIDField;
            }
            set {
                if ((this.TrunkIDField.Equals(value) != true)) {
                    this.TrunkIDField = value;
                    this.RaisePropertyChanged("TrunkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallServerList", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallServerList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuditTrailRefIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallServerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RecordStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmppClientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuditTrailRefID {
            get {
                return this.AuditTrailRefIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditTrailRefIDField, value) != true)) {
                    this.AuditTrailRefIDField = value;
                    this.RaisePropertyChanged("AuditTrailRefID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerCode {
            get {
                return this.CallServerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerCodeField, value) != true)) {
                    this.CallServerCodeField = value;
                    this.RaisePropertyChanged("CallServerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerGuid {
            get {
                return this.CallServerGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerGuidField, value) != true)) {
                    this.CallServerGuidField = value;
                    this.RaisePropertyChanged("CallServerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallServerID {
            get {
                return this.CallServerIDField;
            }
            set {
                if ((this.CallServerIDField.Equals(value) != true)) {
                    this.CallServerIDField = value;
                    this.RaisePropertyChanged("CallServerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerName {
            get {
                return this.CallServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerNameField, value) != true)) {
                    this.CallServerNameField = value;
                    this.RaisePropertyChanged("CallServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerType {
            get {
                return this.CallServerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerTypeField, value) != true)) {
                    this.CallServerTypeField = value;
                    this.RaisePropertyChanged("CallServerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerVersion {
            get {
                return this.CallServerVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerVersionField, value) != true)) {
                    this.CallServerVersionField = value;
                    this.RaisePropertyChanged("CallServerVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalStatus {
            get {
                return this.OperationalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalStatusField, value) != true)) {
                    this.OperationalStatusField = value;
                    this.RaisePropertyChanged("OperationalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecordStatus {
            get {
                return this.RecordStatusField;
            }
            set {
                if ((this.RecordStatusField.Equals(value) != true)) {
                    this.RecordStatusField = value;
                    this.RaisePropertyChanged("RecordStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tenant {
            get {
                return this.TenantField;
            }
            set {
                if ((this.TenantField.Equals(value) != true)) {
                    this.TenantField = value;
                    this.RaisePropertyChanged("Tenant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionID {
            get {
                return this.TransactionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIDField, value) != true)) {
                    this.TransactionIDField = value;
                    this.RaisePropertyChanged("TransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmppClientName {
            get {
                return this.XmppClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.XmppClientNameField, value) != true)) {
                    this.XmppClientNameField = value;
                    this.RaisePropertyChanged("XmppClientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallServerLoginData", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallServerLoginData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallServerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMPPUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallServerID {
            get {
                return this.CallServerIDField;
            }
            set {
                if ((this.CallServerIDField.Equals(value) != true)) {
                    this.CallServerIDField = value;
                    this.RaisePropertyChanged("CallServerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMPPUsername {
            get {
                return this.XMPPUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.XMPPUsernameField, value) != true)) {
                    this.XMPPUsernameField = value;
                    this.RaisePropertyChanged("XMPPUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallServerTypes", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallServerTypes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallServerVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerType {
            get {
                return this.CallServerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerTypeField, value) != true)) {
                    this.CallServerTypeField = value;
                    this.RaisePropertyChanged("CallServerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallServerVersion {
            get {
                return this.CallServerVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CallServerVersionField, value) != true)) {
                    this.CallServerVersionField = value;
                    this.RaisePropertyChanged("CallServerVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Zones", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class Zones : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SipServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZoneIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SipServer {
            get {
                return this.SipServerField;
            }
            set {
                if ((object.ReferenceEquals(this.SipServerField, value) != true)) {
                    this.SipServerField = value;
                    this.RaisePropertyChanged("SipServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneDescription {
            get {
                return this.ZoneDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneDescriptionField, value) != true)) {
                    this.ZoneDescriptionField = value;
                    this.RaisePropertyChanged("ZoneDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZoneID {
            get {
                return this.ZoneIDField;
            }
            set {
                if ((this.ZoneIDField.Equals(value) != true)) {
                    this.ZoneIDField = value;
                    this.RaisePropertyChanged("ZoneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName {
            get {
                return this.ZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneNameField, value) != true)) {
                    this.ZoneNameField = value;
                    this.RaisePropertyChanged("ZoneName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Channels", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class Channels : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PipeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Protocol ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VoiceIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelID {
            get {
                return this.ChannelIDField;
            }
            set {
                if ((this.ChannelIDField.Equals(value) != true)) {
                    this.ChannelIDField = value;
                    this.RaisePropertyChanged("ChannelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PipeID {
            get {
                return this.PipeIDField;
            }
            set {
                if ((this.PipeIDField.Equals(value) != true)) {
                    this.PipeIDField = value;
                    this.RaisePropertyChanged("PipeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Protocol Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((this.ProtocolField.Equals(value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VoiceID {
            get {
                return this.VoiceIDField;
            }
            set {
                if ((this.VoiceIDField.Equals(value) != true)) {
                    this.VoiceIDField = value;
                    this.RaisePropertyChanged("VoiceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Direction", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum Direction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        In = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Out = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Protocol", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum Protocol : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SIP = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SS7 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DM3 = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceConfigureStatus", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum DeviceConfigureStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Devices", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class Devices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus ConfigureStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VoiceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus ConfigureStatus {
            get {
                return this.ConfigureStatusField;
            }
            set {
                if ((this.ConfigureStatusField.Equals(value) != true)) {
                    this.ConfigureStatusField = value;
                    this.RaisePropertyChanged("ConfigureStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Voice {
            get {
                return this.VoiceField;
            }
            set {
                if ((object.ReferenceEquals(this.VoiceField, value) != true)) {
                    this.VoiceField = value;
                    this.RaisePropertyChanged("Voice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Network", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class Network : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdapterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxCallConnectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxSipConnectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterName {
            get {
                return this.AdapterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterNameField, value) != true)) {
                    this.AdapterNameField = value;
                    this.RaisePropertyChanged("AdapterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxCallConnect {
            get {
                return this.MaxCallConnectField;
            }
            set {
                if ((this.MaxCallConnectField.Equals(value) != true)) {
                    this.MaxCallConnectField = value;
                    this.RaisePropertyChanged("MaxCallConnect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSipConnect {
            get {
                return this.MaxSipConnectField;
            }
            set {
                if ((this.MaxSipConnectField.Equals(value) != true)) {
                    this.MaxSipConnectField = value;
                    this.RaisePropertyChanged("MaxSipConnect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConcurrentVoicePortLimits", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class ConcurrentVoicePortLimits : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int confPortsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int csIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string csNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int faxPortsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int incomingPortsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int outgoingPortsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int videoPortsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int confPorts {
            get {
                return this.confPortsField;
            }
            set {
                if ((this.confPortsField.Equals(value) != true)) {
                    this.confPortsField = value;
                    this.RaisePropertyChanged("confPorts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int csID {
            get {
                return this.csIDField;
            }
            set {
                if ((this.csIDField.Equals(value) != true)) {
                    this.csIDField = value;
                    this.RaisePropertyChanged("csID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string csName {
            get {
                return this.csNameField;
            }
            set {
                if ((object.ReferenceEquals(this.csNameField, value) != true)) {
                    this.csNameField = value;
                    this.RaisePropertyChanged("csName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int faxPorts {
            get {
                return this.faxPortsField;
            }
            set {
                if ((this.faxPortsField.Equals(value) != true)) {
                    this.faxPortsField = value;
                    this.RaisePropertyChanged("faxPorts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int incomingPorts {
            get {
                return this.incomingPortsField;
            }
            set {
                if ((this.incomingPortsField.Equals(value) != true)) {
                    this.incomingPortsField = value;
                    this.RaisePropertyChanged("incomingPorts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int outgoingPorts {
            get {
                return this.outgoingPortsField;
            }
            set {
                if ((this.outgoingPortsField.Equals(value) != true)) {
                    this.outgoingPortsField = value;
                    this.RaisePropertyChanged("outgoingPorts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int videoPorts {
            get {
                return this.videoPortsField;
            }
            set {
                if ((this.videoPortsField.Equals(value) != true)) {
                    this.videoPortsField = value;
                    this.RaisePropertyChanged("videoPorts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallServerMainConfigurations", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallServerMainConfigurations : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VoxPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string agentGreetingPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int csIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string csNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mainIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string recordPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sipServerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tenant {
            get {
                return this.TenantField;
            }
            set {
                if ((this.TenantField.Equals(value) != true)) {
                    this.TenantField = value;
                    this.RaisePropertyChanged("Tenant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VoxPath {
            get {
                return this.VoxPathField;
            }
            set {
                if ((object.ReferenceEquals(this.VoxPathField, value) != true)) {
                    this.VoxPathField = value;
                    this.RaisePropertyChanged("VoxPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string agentGreetingPath {
            get {
                return this.agentGreetingPathField;
            }
            set {
                if ((object.ReferenceEquals(this.agentGreetingPathField, value) != true)) {
                    this.agentGreetingPathField = value;
                    this.RaisePropertyChanged("agentGreetingPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int csID {
            get {
                return this.csIDField;
            }
            set {
                if ((this.csIDField.Equals(value) != true)) {
                    this.csIDField = value;
                    this.RaisePropertyChanged("csID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string csName {
            get {
                return this.csNameField;
            }
            set {
                if ((object.ReferenceEquals(this.csNameField, value) != true)) {
                    this.csNameField = value;
                    this.RaisePropertyChanged("csName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mainIP {
            get {
                return this.mainIPField;
            }
            set {
                if ((object.ReferenceEquals(this.mainIPField, value) != true)) {
                    this.mainIPField = value;
                    this.RaisePropertyChanged("mainIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string recordPath {
            get {
                return this.recordPathField;
            }
            set {
                if ((object.ReferenceEquals(this.recordPathField, value) != true)) {
                    this.recordPathField = value;
                    this.RaisePropertyChanged("recordPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sipServer {
            get {
                return this.sipServerField;
            }
            set {
                if ((object.ReferenceEquals(this.sipServerField, value) != true)) {
                    this.sipServerField = value;
                    this.RaisePropertyChanged("sipServer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallServerAccount", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallServerAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TenantID {
            get {
                return this.TenantIDField;
            }
            set {
                if ((this.TenantIDField.Equals(value) != true)) {
                    this.TenantIDField = value;
                    this.RaisePropertyChanged("TenantID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallControllerConf", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallControllerConf : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CcCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CcIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CcNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CcObjGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClusterCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConcurrentCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TcpPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmppPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmppUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActiveStatus {
            get {
                return this.ActiveStatusField;
            }
            set {
                if ((this.ActiveStatusField.Equals(value) != true)) {
                    this.ActiveStatusField = value;
                    this.RaisePropertyChanged("ActiveStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CcCode {
            get {
                return this.CcCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CcCodeField, value) != true)) {
                    this.CcCodeField = value;
                    this.RaisePropertyChanged("CcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CcId {
            get {
                return this.CcIdField;
            }
            set {
                if ((this.CcIdField.Equals(value) != true)) {
                    this.CcIdField = value;
                    this.RaisePropertyChanged("CcId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CcName {
            get {
                return this.CcNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CcNameField, value) != true)) {
                    this.CcNameField = value;
                    this.RaisePropertyChanged("CcName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CcObjGuid {
            get {
                return this.CcObjGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.CcObjGuidField, value) != true)) {
                    this.CcObjGuidField = value;
                    this.RaisePropertyChanged("CcObjGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClusterCode {
            get {
                return this.ClusterCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClusterCodeField, value) != true)) {
                    this.ClusterCodeField = value;
                    this.RaisePropertyChanged("ClusterCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConcurrentCalls {
            get {
                return this.ConcurrentCallsField;
            }
            set {
                if ((this.ConcurrentCallsField.Equals(value) != true)) {
                    this.ConcurrentCallsField = value;
                    this.RaisePropertyChanged("ConcurrentCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endpoint {
            get {
                return this.EndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpointField, value) != true)) {
                    this.EndpointField = value;
                    this.RaisePropertyChanged("Endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceId {
            get {
                return this.ResourceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceIdField, value) != true)) {
                    this.ResourceIdField = value;
                    this.RaisePropertyChanged("ResourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TcpPort {
            get {
                return this.TcpPortField;
            }
            set {
                if ((this.TcpPortField.Equals(value) != true)) {
                    this.TcpPortField = value;
                    this.RaisePropertyChanged("TcpPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmppPassword {
            get {
                return this.XmppPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.XmppPasswordField, value) != true)) {
                    this.XmppPasswordField = value;
                    this.RaisePropertyChanged("XmppPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmppUsername {
            get {
                return this.XmppUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.XmppUsernameField, value) != true)) {
                    this.XmppUsernameField = value;
                    this.RaisePropertyChanged("XmppUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SIPAccDetails", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class SIPAccDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string domainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string extensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string context {
            get {
                return this.contextField;
            }
            set {
                if ((object.ReferenceEquals(this.contextField, value) != true)) {
                    this.contextField = value;
                    this.RaisePropertyChanged("context");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string domain {
            get {
                return this.domainField;
            }
            set {
                if ((object.ReferenceEquals(this.domainField, value) != true)) {
                    this.domainField = value;
                    this.RaisePropertyChanged("domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string extension {
            get {
                return this.extensionField;
            }
            set {
                if ((object.ReferenceEquals(this.extensionField, value) != true)) {
                    this.extensionField = value;
                    this.RaisePropertyChanged("extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                if ((this.isActiveField.Equals(value) != true)) {
                    this.isActiveField = value;
                    this.RaisePropertyChanged("isActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtType", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ExtType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IVR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Group = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PSTN = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParkAsk = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conference = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIFO = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Any = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsrExtensions", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class UsrExtensions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DidActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DidNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DodActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DodNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DidActive {
            get {
                return this.DidActiveField;
            }
            set {
                if ((this.DidActiveField.Equals(value) != true)) {
                    this.DidActiveField = value;
                    this.RaisePropertyChanged("DidActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DidNumber {
            get {
                return this.DidNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DidNumberField, value) != true)) {
                    this.DidNumberField = value;
                    this.RaisePropertyChanged("DidNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DodActive {
            get {
                return this.DodActiveField;
            }
            set {
                if ((this.DodActiveField.Equals(value) != true)) {
                    this.DodActiveField = value;
                    this.RaisePropertyChanged("DodActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DodNumber {
            get {
                return this.DodNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DodNumberField, value) != true)) {
                    this.DodNumberField = value;
                    this.RaisePropertyChanged("DodNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtCategory {
            get {
                return this.ExtCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtCategoryField, value) != true)) {
                    this.ExtCategoryField = value;
                    this.RaisePropertyChanged("ExtCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtClass {
            get {
                return this.ExtClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtClassField, value) != true)) {
                    this.ExtClassField = value;
                    this.RaisePropertyChanged("ExtClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtType {
            get {
                return this.ExtTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtTypeField, value) != true)) {
                    this.ExtTypeField = value;
                    this.RaisePropertyChanged("ExtType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraData {
            get {
                return this.ExtraDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraDataField, value) != true)) {
                    this.ExtraDataField = value;
                    this.RaisePropertyChanged("ExtraData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuUserId {
            get {
                return this.GuUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GuUserIdField, value) != true)) {
                    this.GuUserIdField = value;
                    this.RaisePropertyChanged("GuUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SaveResult", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class SaveResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, object> ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, object> Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallRuleInfoOutbound", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallRuleInfoOutbound : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AniTranslationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallType CTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNISField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScheduleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TranslationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrunkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern directDialPatternField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AniTranslationId {
            get {
                return this.AniTranslationIdField;
            }
            set {
                if ((this.AniTranslationIdField.Equals(value) != true)) {
                    this.AniTranslationIdField = value;
                    this.RaisePropertyChanged("AniTranslationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallType CType {
            get {
                return this.CTypeField;
            }
            set {
                if ((this.CTypeField.Equals(value) != true)) {
                    this.CTypeField = value;
                    this.RaisePropertyChanged("CType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DNIS {
            get {
                return this.DNISField;
            }
            set {
                if ((object.ReferenceEquals(this.DNISField, value) != true)) {
                    this.DNISField = value;
                    this.RaisePropertyChanged("DNIS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Schedule {
            get {
                return this.ScheduleField;
            }
            set {
                if ((this.ScheduleField.Equals(value) != true)) {
                    this.ScheduleField = value;
                    this.RaisePropertyChanged("Schedule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Timeout {
            get {
                return this.TimeoutField;
            }
            set {
                if ((this.TimeoutField.Equals(value) != true)) {
                    this.TimeoutField = value;
                    this.RaisePropertyChanged("Timeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TranslationId {
            get {
                return this.TranslationIdField;
            }
            set {
                if ((this.TranslationIdField.Equals(value) != true)) {
                    this.TranslationIdField = value;
                    this.RaisePropertyChanged("TranslationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrunkID {
            get {
                return this.TrunkIDField;
            }
            set {
                if ((this.TrunkIDField.Equals(value) != true)) {
                    this.TrunkIDField = value;
                    this.RaisePropertyChanged("TrunkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrunkNumber {
            get {
                return this.TrunkNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TrunkNumberField, value) != true)) {
                    this.TrunkNumberField = value;
                    this.RaisePropertyChanged("TrunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern directDialPattern {
            get {
                return this.directDialPatternField;
            }
            set {
                if ((this.directDialPatternField.Equals(value) != true)) {
                    this.directDialPatternField = value;
                    this.RaisePropertyChanged("directDialPattern");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectDialPattern", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum DirectDialPattern : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartWith = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExactMatch = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Custom = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallRuleInfoInbound", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallRuleInfoInbound : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ANIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNISField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Option RouteOptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScheduleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetScriptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrunkIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ANI {
            get {
                return this.ANIField;
            }
            set {
                if ((object.ReferenceEquals(this.ANIField, value) != true)) {
                    this.ANIField = value;
                    this.RaisePropertyChanged("ANI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DNIS {
            get {
                return this.DNISField;
            }
            set {
                if ((object.ReferenceEquals(this.DNISField, value) != true)) {
                    this.DNISField = value;
                    this.RaisePropertyChanged("DNIS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param {
            get {
                return this.ParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamField, value) != true)) {
                    this.ParamField = value;
                    this.RaisePropertyChanged("Param");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Option RouteOpt {
            get {
                return this.RouteOptField;
            }
            set {
                if ((this.RouteOptField.Equals(value) != true)) {
                    this.RouteOptField = value;
                    this.RaisePropertyChanged("RouteOpt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Schedule {
            get {
                return this.ScheduleField;
            }
            set {
                if ((this.ScheduleField.Equals(value) != true)) {
                    this.ScheduleField = value;
                    this.RaisePropertyChanged("Schedule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetScript {
            get {
                return this.TargetScriptField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetScriptField, value) != true)) {
                    this.TargetScriptField = value;
                    this.RaisePropertyChanged("TargetScript");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrunkID {
            get {
                return this.TrunkIDField;
            }
            set {
                if ((this.TrunkIDField.Equals(value) != true)) {
                    this.TrunkIDField = value;
                    this.RaisePropertyChanged("TrunkID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Option", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum Option : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IVR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InboundDev = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallRouteInfo", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallRouteInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallMaxInboundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallMaxOutboundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallMaxTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallRouteGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaxMaxInboundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaxMaxOutboundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaxMaxTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RecordStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RouteCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RouteNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> TransactionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallMaxInbound {
            get {
                return this.CallMaxInboundField;
            }
            set {
                if ((this.CallMaxInboundField.Equals(value) != true)) {
                    this.CallMaxInboundField = value;
                    this.RaisePropertyChanged("CallMaxInbound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallMaxOutbound {
            get {
                return this.CallMaxOutboundField;
            }
            set {
                if ((this.CallMaxOutboundField.Equals(value) != true)) {
                    this.CallMaxOutboundField = value;
                    this.RaisePropertyChanged("CallMaxOutbound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallMaxTotal {
            get {
                return this.CallMaxTotalField;
            }
            set {
                if ((this.CallMaxTotalField.Equals(value) != true)) {
                    this.CallMaxTotalField = value;
                    this.RaisePropertyChanged("CallMaxTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallRouteGuid {
            get {
                return this.CallRouteGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.CallRouteGuidField, value) != true)) {
                    this.CallRouteGuidField = value;
                    this.RaisePropertyChanged("CallRouteGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaxMaxInbound {
            get {
                return this.FaxMaxInboundField;
            }
            set {
                if ((this.FaxMaxInboundField.Equals(value) != true)) {
                    this.FaxMaxInboundField = value;
                    this.RaisePropertyChanged("FaxMaxInbound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaxMaxOutbound {
            get {
                return this.FaxMaxOutboundField;
            }
            set {
                if ((this.FaxMaxOutboundField.Equals(value) != true)) {
                    this.FaxMaxOutboundField = value;
                    this.RaisePropertyChanged("FaxMaxOutbound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaxMaxTotal {
            get {
                return this.FaxMaxTotalField;
            }
            set {
                if ((this.FaxMaxTotalField.Equals(value) != true)) {
                    this.FaxMaxTotalField = value;
                    this.RaisePropertyChanged("FaxMaxTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalStatus {
            get {
                return this.OperationalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalStatusField, value) != true)) {
                    this.OperationalStatusField = value;
                    this.RaisePropertyChanged("OperationalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecordStatus {
            get {
                return this.RecordStatusField;
            }
            set {
                if ((this.RecordStatusField.Equals(value) != true)) {
                    this.RecordStatusField = value;
                    this.RaisePropertyChanged("RecordStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteCode {
            get {
                return this.RouteCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteCodeField, value) != true)) {
                    this.RouteCodeField = value;
                    this.RaisePropertyChanged("RouteCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteName {
            get {
                return this.RouteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteNameField, value) != true)) {
                    this.RouteNameField = value;
                    this.RaisePropertyChanged("RouteName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> TransactionID {
            get {
                return this.TransactionIDField;
            }
            set {
                if ((this.TransactionIDField.Equals(value) != true)) {
                    this.TransactionIDField = value;
                    this.RaisePropertyChanged("TransactionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContextCat", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ContextCat : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Public = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Internal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalPbx = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Translationinfo", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class Translationinfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LRemoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RRemoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReplaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReplaceDestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReplaceOrigField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TranslationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranslationNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LAdd {
            get {
                return this.LAddField;
            }
            set {
                if ((object.ReferenceEquals(this.LAddField, value) != true)) {
                    this.LAddField = value;
                    this.RaisePropertyChanged("LAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LRemove {
            get {
                return this.LRemoveField;
            }
            set {
                if ((this.LRemoveField.Equals(value) != true)) {
                    this.LRemoveField = value;
                    this.RaisePropertyChanged("LRemove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAdd {
            get {
                return this.RAddField;
            }
            set {
                if ((object.ReferenceEquals(this.RAddField, value) != true)) {
                    this.RAddField = value;
                    this.RaisePropertyChanged("RAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RRemove {
            get {
                return this.RRemoveField;
            }
            set {
                if ((this.RRemoveField.Equals(value) != true)) {
                    this.RRemoveField = value;
                    this.RaisePropertyChanged("RRemove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Replace {
            get {
                return this.ReplaceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReplaceField, value) != true)) {
                    this.ReplaceField = value;
                    this.RaisePropertyChanged("Replace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplaceDest {
            get {
                return this.ReplaceDestField;
            }
            set {
                if ((object.ReferenceEquals(this.ReplaceDestField, value) != true)) {
                    this.ReplaceDestField = value;
                    this.RaisePropertyChanged("ReplaceDest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplaceOrig {
            get {
                return this.ReplaceOrigField;
            }
            set {
                if ((object.ReferenceEquals(this.ReplaceOrigField, value) != true)) {
                    this.ReplaceOrigField = value;
                    this.RaisePropertyChanged("ReplaceOrig");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TranslationId {
            get {
                return this.TranslationIdField;
            }
            set {
                if ((this.TranslationIdField.Equals(value) != true)) {
                    this.TranslationIdField = value;
                    this.RaisePropertyChanged("TranslationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranslationName {
            get {
                return this.TranslationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslationNameField, value) != true)) {
                    this.TranslationNameField = value;
                    this.RaisePropertyChanged("TranslationName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserGroup", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class UserGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupDescription {
            get {
                return this.GroupDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupDescriptionField, value) != true)) {
                    this.GroupDescriptionField = value;
                    this.RaisePropertyChanged("GroupDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupExtension {
            get {
                return this.GroupExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupExtensionField, value) != true)) {
                    this.GroupExtensionField = value;
                    this.RaisePropertyChanged("GroupExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupInfo", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class GroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AddUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RemoveUsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AddUsers {
            get {
                return this.AddUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.AddUsersField, value) != true)) {
                    this.AddUsersField = value;
                    this.RaisePropertyChanged("AddUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupDescription {
            get {
                return this.GroupDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupDescriptionField, value) != true)) {
                    this.GroupDescriptionField = value;
                    this.RaisePropertyChanged("GroupDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupExtension {
            get {
                return this.GroupExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupExtensionField, value) != true)) {
                    this.GroupExtensionField = value;
                    this.RaisePropertyChanged("GroupExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuUserId {
            get {
                return this.GuUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GuUserIdField, value) != true)) {
                    this.GuUserIdField = value;
                    this.RaisePropertyChanged("GuUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RemoveUsers {
            get {
                return this.RemoveUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoveUsersField, value) != true)) {
                    this.RemoveUsersField = value;
                    this.RaisePropertyChanged("RemoveUsers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallForwardingInfo", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class CallForwardingInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ForwardingAdvanced[] AdvancedListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InitEndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ForwardingAdvanced[] AdvancedList {
            get {
                return this.AdvancedListField;
            }
            set {
                if ((object.ReferenceEquals(this.AdvancedListField, value) != true)) {
                    this.AdvancedListField = value;
                    this.RaisePropertyChanged("AdvancedList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endpoint {
            get {
                return this.EndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpointField, value) != true)) {
                    this.EndpointField = value;
                    this.RaisePropertyChanged("Endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InitEndpoint {
            get {
                return this.InitEndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.InitEndpointField, value) != true)) {
                    this.InitEndpointField = value;
                    this.RaisePropertyChanged("InitEndpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resource {
            get {
                return this.ResourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceField, value) != true)) {
                    this.ResourceField = value;
                    this.RaisePropertyChanged("Resource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForwardingAdvanced", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class ForwardingAdvanced : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> NoAnswerActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UnitOfMeasure NoAnswerUOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> NoAnswerValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OtherActionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActionId {
            get {
                return this.ActionIdField;
            }
            set {
                if ((this.ActionIdField.Equals(value) != true)) {
                    this.ActionIdField = value;
                    this.RaisePropertyChanged("ActionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endpoint {
            get {
                return this.EndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpointField, value) != true)) {
                    this.EndpointField = value;
                    this.RaisePropertyChanged("Endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> NoAnswerAction {
            get {
                return this.NoAnswerActionField;
            }
            set {
                if ((this.NoAnswerActionField.Equals(value) != true)) {
                    this.NoAnswerActionField = value;
                    this.RaisePropertyChanged("NoAnswerAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UnitOfMeasure NoAnswerUOM {
            get {
                return this.NoAnswerUOMField;
            }
            set {
                if ((this.NoAnswerUOMField.Equals(value) != true)) {
                    this.NoAnswerUOMField = value;
                    this.RaisePropertyChanged("NoAnswerUOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> NoAnswerValue {
            get {
                return this.NoAnswerValueField;
            }
            set {
                if ((this.NoAnswerValueField.Equals(value) != true)) {
                    this.NoAnswerValueField = value;
                    this.RaisePropertyChanged("NoAnswerValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OtherAction {
            get {
                return this.OtherActionField;
            }
            set {
                if ((this.OtherActionField.Equals(value) != true)) {
                    this.OtherActionField = value;
                    this.RaisePropertyChanged("OtherAction");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnitOfMeasure", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum UnitOfMeasure : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seconds = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceInfo", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class ConferenceInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowAnonymousUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIdField;
        
        private string ConferenceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConferenceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PinField;
        
        private string RoomNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantIdField;
        
        private int TrunkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UUIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowAnonymousUser {
            get {
                return this.AllowAnonymousUserField;
            }
            set {
                if ((this.AllowAnonymousUserField.Equals(value) != true)) {
                    this.AllowAnonymousUserField = value;
                    this.RaisePropertyChanged("AllowAnonymousUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConferenceNumber {
            get {
                return this.ConferenceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceNumberField, value) != true)) {
                    this.ConferenceNumberField = value;
                    this.RaisePropertyChanged("ConferenceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConferenceType {
            get {
                return this.ConferenceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceTypeField, value) != true)) {
                    this.ConferenceTypeField = value;
                    this.RaisePropertyChanged("ConferenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockedStatus {
            get {
                return this.LockedStatusField;
            }
            set {
                if ((this.LockedStatusField.Equals(value) != true)) {
                    this.LockedStatusField = value;
                    this.RaisePropertyChanged("LockedStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxUsers {
            get {
                return this.MaxUsersField;
            }
            set {
                if ((this.MaxUsersField.Equals(value) != true)) {
                    this.MaxUsersField = value;
                    this.RaisePropertyChanged("MaxUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pin {
            get {
                return this.PinField;
            }
            set {
                if ((object.ReferenceEquals(this.PinField, value) != true)) {
                    this.PinField = value;
                    this.RaisePropertyChanged("Pin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RoomName {
            get {
                return this.RoomNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomNameField, value) != true)) {
                    this.RoomNameField = value;
                    this.RaisePropertyChanged("RoomName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TenantId {
            get {
                return this.TenantIdField;
            }
            set {
                if ((this.TenantIdField.Equals(value) != true)) {
                    this.TenantIdField = value;
                    this.RaisePropertyChanged("TenantId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TrunkId {
            get {
                return this.TrunkIdField;
            }
            set {
                if ((this.TrunkIdField.Equals(value) != true)) {
                    this.TrunkIdField = value;
                    this.RaisePropertyChanged("TrunkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UUId {
            get {
                return this.UUIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UUIdField, value) != true)) {
                    this.UUIdField = value;
                    this.RaisePropertyChanged("UUId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceUser", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    [System.SerializableAttribute()]
    public partial class ConferenceUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CrnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CurrentDeafFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CurrentModFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CurrentMuteFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InitDeafFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InitModFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InitMuteFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveTalkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceJoinType JoinTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceEndpointProtocol ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUserStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUserLevel UserLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Crn {
            get {
                return this.CrnField;
            }
            set {
                if ((object.ReferenceEquals(this.CrnField, value) != true)) {
                    this.CrnField = value;
                    this.RaisePropertyChanged("Crn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentDeafFlag {
            get {
                return this.CurrentDeafFlagField;
            }
            set {
                if ((this.CurrentDeafFlagField.Equals(value) != true)) {
                    this.CurrentDeafFlagField = value;
                    this.RaisePropertyChanged("CurrentDeafFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentModFlag {
            get {
                return this.CurrentModFlagField;
            }
            set {
                if ((this.CurrentModFlagField.Equals(value) != true)) {
                    this.CurrentModFlagField = value;
                    this.RaisePropertyChanged("CurrentModFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentMuteFlag {
            get {
                return this.CurrentMuteFlagField;
            }
            set {
                if ((this.CurrentMuteFlagField.Equals(value) != true)) {
                    this.CurrentMuteFlagField = value;
                    this.RaisePropertyChanged("CurrentMuteFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endpoint {
            get {
                return this.EndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpointField, value) != true)) {
                    this.EndpointField = value;
                    this.RaisePropertyChanged("Endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitDeafFlag {
            get {
                return this.InitDeafFlagField;
            }
            set {
                if ((this.InitDeafFlagField.Equals(value) != true)) {
                    this.InitDeafFlagField = value;
                    this.RaisePropertyChanged("InitDeafFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitModFlag {
            get {
                return this.InitModFlagField;
            }
            set {
                if ((this.InitModFlagField.Equals(value) != true)) {
                    this.InitModFlagField = value;
                    this.RaisePropertyChanged("InitModFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitMuteFlag {
            get {
                return this.InitMuteFlagField;
            }
            set {
                if ((this.InitMuteFlagField.Equals(value) != true)) {
                    this.InitMuteFlagField = value;
                    this.RaisePropertyChanged("InitMuteFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActiveTalker {
            get {
                return this.IsActiveTalkerField;
            }
            set {
                if ((this.IsActiveTalkerField.Equals(value) != true)) {
                    this.IsActiveTalkerField = value;
                    this.RaisePropertyChanged("IsActiveTalker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceJoinType JoinType {
            get {
                return this.JoinTypeField;
            }
            set {
                if ((this.JoinTypeField.Equals(value) != true)) {
                    this.JoinTypeField = value;
                    this.RaisePropertyChanged("JoinType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceEndpointProtocol Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((this.ProtocolField.Equals(value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoomName {
            get {
                return this.RoomNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomNameField, value) != true)) {
                    this.RoomNameField = value;
                    this.RaisePropertyChanged("RoomName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIdField, value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUserStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TenantId {
            get {
                return this.TenantIdField;
            }
            set {
                if ((this.TenantIdField.Equals(value) != true)) {
                    this.TenantIdField = value;
                    this.RaisePropertyChanged("TenantId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUserLevel UserLevel {
            get {
                return this.UserLevelField;
            }
            set {
                if ((this.UserLevelField.Equals(value) != true)) {
                    this.UserLevelField = value;
                    this.RaisePropertyChanged("UserLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPin {
            get {
                return this.UserPinField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPinField, value) != true)) {
                    this.UserPinField = value;
                    this.RaisePropertyChanged("UserPin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uuid {
            get {
                return this.UuidField;
            }
            set {
                if ((object.ReferenceEquals(this.UuidField, value) != true)) {
                    this.UuidField = value;
                    this.RaisePropertyChanged("Uuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceJoinType", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ConferenceJoinType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DialIn = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DialOut = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceEndpointProtocol", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ConferenceEndpointProtocol : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Phone = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceUserStatus", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ConferenceUserStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Validated = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Added = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Kicked = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tried = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceUserLevel", Namespace="http://schemas.datacontract.org/2004/07/DuoConfigServerDataContracts")]
    public enum ConferenceUserLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Moderator = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefDuoMainConfigService.ICallServerOp")]
    public interface ICallServerOp {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/DeleteCallRoute", ReplyAction="http://tempuri.org/ICallServerOp/DeleteCallRouteResponse")]
        bool DeleteCallRoute(string routeCode, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/DeleteCallRoute", ReplyAction="http://tempuri.org/ICallServerOp/DeleteCallRouteResponse")]
        System.IAsyncResult BeginDeleteCallRoute(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteCallRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/DeleteInbOutbRule", ReplyAction="http://tempuri.org/ICallServerOp/DeleteInbOutbRuleResponse")]
        bool DeleteInbOutbRule(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/DeleteInbOutbRule", ReplyAction="http://tempuri.org/ICallServerOp/DeleteInbOutbRuleResponse")]
        System.IAsyncResult BeginDeleteInbOutbRule(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteInbOutbRule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/saveToCallRuleOutbound", ReplyAction="http://tempuri.org/ICallServerOp/saveToCallRuleOutboundResponse")]
        bool saveToCallRuleOutbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/saveToCallRuleOutbound", ReplyAction="http://tempuri.org/ICallServerOp/saveToCallRuleOutboundResponse")]
        System.IAsyncResult BeginsaveToCallRuleOutbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndsaveToCallRuleOutbound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/saveToCallRuleInbound", ReplyAction="http://tempuri.org/ICallServerOp/saveToCallRuleInboundResponse")]
        bool saveToCallRuleInbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/saveToCallRuleInbound", ReplyAction="http://tempuri.org/ICallServerOp/saveToCallRuleInboundResponse")]
        System.IAsyncResult BeginsaveToCallRuleInbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndsaveToCallRuleInbound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/GetCallRuleOutboundList", ReplyAction="http://tempuri.org/ICallServerOp/GetCallRuleOutboundListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] GetCallRuleOutboundList(string routeCode, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/GetCallRuleOutboundList", ReplyAction="http://tempuri.org/ICallServerOp/GetCallRuleOutboundListResponse")]
        System.IAsyncResult BeginGetCallRuleOutboundList(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] EndGetCallRuleOutboundList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/GetCallRuleInboundList", ReplyAction="http://tempuri.org/ICallServerOp/GetCallRuleInboundListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] GetCallRuleInboundList(string routeCode, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/GetCallRuleInboundList", ReplyAction="http://tempuri.org/ICallServerOp/GetCallRuleInboundListResponse")]
        System.IAsyncResult BeginGetCallRuleInboundList(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] EndGetCallRuleInboundList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/saveCallRouteInfo", ReplyAction="http://tempuri.org/ICallServerOp/saveCallRouteInfoResponse")]
        bool saveCallRouteInfo(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/saveCallRouteInfo", ReplyAction="http://tempuri.org/ICallServerOp/saveCallRouteInfoResponse")]
        System.IAsyncResult BeginsaveCallRouteInfo(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndsaveCallRouteInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/getCallRouteDetails", ReplyAction="http://tempuri.org/ICallServerOp/getCallRouteDetailsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] getCallRouteDetails(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/getCallRouteDetails", ReplyAction="http://tempuri.org/ICallServerOp/getCallRouteDetailsResponse")]
        System.IAsyncResult BegingetCallRouteDetails(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] EndgetCallRouteDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/AddInternalRule", ReplyAction="http://tempuri.org/ICallServerOp/AddInternalRuleResponse")]
        bool AddInternalRule(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/AddInternalRule", ReplyAction="http://tempuri.org/ICallServerOp/AddInternalRuleResponse")]
        System.IAsyncResult BeginAddInternalRule(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndAddInternalRule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/AddContext", ReplyAction="http://tempuri.org/ICallServerOp/AddContextResponse")]
        bool AddContext(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/AddContext", ReplyAction="http://tempuri.org/ICallServerOp/AddContextResponse")]
        System.IAsyncResult BeginAddContext(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndAddContext(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/GetCsInternalContexts", ReplyAction="http://tempuri.org/ICallServerOp/GetCsInternalContextsResponse")]
        string[] GetCsInternalContexts(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/GetCsInternalContexts", ReplyAction="http://tempuri.org/ICallServerOp/GetCsInternalContextsResponse")]
        System.IAsyncResult BeginGetCsInternalContexts(string securityToken, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetCsInternalContexts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/AddTranslation", ReplyAction="http://tempuri.org/ICallServerOp/AddTranslationResponse")]
        int AddTranslation(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/AddTranslation", ReplyAction="http://tempuri.org/ICallServerOp/AddTranslationResponse")]
        System.IAsyncResult BeginAddTranslation(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken, System.AsyncCallback callback, object asyncState);
        
        int EndAddTranslation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerOp/GetTranslation", ReplyAction="http://tempuri.org/ICallServerOp/GetTranslationResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] GetTranslation(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerOp/GetTranslation", ReplyAction="http://tempuri.org/ICallServerOp/GetTranslationResponse")]
        System.IAsyncResult BeginGetTranslation(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] EndGetTranslation(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallServerOpChannel : DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerOp, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCallRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCallRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteInbOutbRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteInbOutbRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveToCallRuleOutboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveToCallRuleOutboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveToCallRuleInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveToCallRuleInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallRuleOutboundListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallRuleOutboundListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallRuleInboundListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallRuleInboundListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveCallRouteInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveCallRouteInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCallRouteDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCallRouteDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddInternalRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddInternalRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCsInternalContextsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCsInternalContextsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallServerOpClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerOp>, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerOp {
        
        private BeginOperationDelegate onBeginDeleteCallRouteDelegate;
        
        private EndOperationDelegate onEndDeleteCallRouteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCallRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteInbOutbRuleDelegate;
        
        private EndOperationDelegate onEndDeleteInbOutbRuleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteInbOutbRuleCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveToCallRuleOutboundDelegate;
        
        private EndOperationDelegate onEndsaveToCallRuleOutboundDelegate;
        
        private System.Threading.SendOrPostCallback onsaveToCallRuleOutboundCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveToCallRuleInboundDelegate;
        
        private EndOperationDelegate onEndsaveToCallRuleInboundDelegate;
        
        private System.Threading.SendOrPostCallback onsaveToCallRuleInboundCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallRuleOutboundListDelegate;
        
        private EndOperationDelegate onEndGetCallRuleOutboundListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallRuleOutboundListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallRuleInboundListDelegate;
        
        private EndOperationDelegate onEndGetCallRuleInboundListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallRuleInboundListCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveCallRouteInfoDelegate;
        
        private EndOperationDelegate onEndsaveCallRouteInfoDelegate;
        
        private System.Threading.SendOrPostCallback onsaveCallRouteInfoCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCallRouteDetailsDelegate;
        
        private EndOperationDelegate onEndgetCallRouteDetailsDelegate;
        
        private System.Threading.SendOrPostCallback ongetCallRouteDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddInternalRuleDelegate;
        
        private EndOperationDelegate onEndAddInternalRuleDelegate;
        
        private System.Threading.SendOrPostCallback onAddInternalRuleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddContextDelegate;
        
        private EndOperationDelegate onEndAddContextDelegate;
        
        private System.Threading.SendOrPostCallback onAddContextCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCsInternalContextsDelegate;
        
        private EndOperationDelegate onEndGetCsInternalContextsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCsInternalContextsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTranslationDelegate;
        
        private EndOperationDelegate onEndAddTranslationDelegate;
        
        private System.Threading.SendOrPostCallback onAddTranslationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTranslationDelegate;
        
        private EndOperationDelegate onEndGetTranslationDelegate;
        
        private System.Threading.SendOrPostCallback onGetTranslationCompletedDelegate;
        
        public CallServerOpClient() {
        }
        
        public CallServerOpClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CallServerOpClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallServerOpClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallServerOpClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DeleteCallRouteCompletedEventArgs> DeleteCallRouteCompleted;
        
        public event System.EventHandler<DeleteInbOutbRuleCompletedEventArgs> DeleteInbOutbRuleCompleted;
        
        public event System.EventHandler<saveToCallRuleOutboundCompletedEventArgs> saveToCallRuleOutboundCompleted;
        
        public event System.EventHandler<saveToCallRuleInboundCompletedEventArgs> saveToCallRuleInboundCompleted;
        
        public event System.EventHandler<GetCallRuleOutboundListCompletedEventArgs> GetCallRuleOutboundListCompleted;
        
        public event System.EventHandler<GetCallRuleInboundListCompletedEventArgs> GetCallRuleInboundListCompleted;
        
        public event System.EventHandler<saveCallRouteInfoCompletedEventArgs> saveCallRouteInfoCompleted;
        
        public event System.EventHandler<getCallRouteDetailsCompletedEventArgs> getCallRouteDetailsCompleted;
        
        public event System.EventHandler<AddInternalRuleCompletedEventArgs> AddInternalRuleCompleted;
        
        public event System.EventHandler<AddContextCompletedEventArgs> AddContextCompleted;
        
        public event System.EventHandler<GetCsInternalContextsCompletedEventArgs> GetCsInternalContextsCompleted;
        
        public event System.EventHandler<AddTranslationCompletedEventArgs> AddTranslationCompleted;
        
        public event System.EventHandler<GetTranslationCompletedEventArgs> GetTranslationCompleted;
        
        public bool DeleteCallRoute(string routeCode, string securityToken) {
            return base.Channel.DeleteCallRoute(routeCode, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCallRoute(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCallRoute(routeCode, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteCallRoute(System.IAsyncResult result) {
            return base.Channel.EndDeleteCallRoute(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCallRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeCode = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteCallRoute(routeCode, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteCallRoute(System.IAsyncResult result) {
            bool retVal = this.EndDeleteCallRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCallRouteCompleted(object state) {
            if ((this.DeleteCallRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCallRouteCompleted(this, new DeleteCallRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCallRouteAsync(string routeCode, string securityToken) {
            this.DeleteCallRouteAsync(routeCode, securityToken, null);
        }
        
        public void DeleteCallRouteAsync(string routeCode, string securityToken, object userState) {
            if ((this.onBeginDeleteCallRouteDelegate == null)) {
                this.onBeginDeleteCallRouteDelegate = new BeginOperationDelegate(this.OnBeginDeleteCallRoute);
            }
            if ((this.onEndDeleteCallRouteDelegate == null)) {
                this.onEndDeleteCallRouteDelegate = new EndOperationDelegate(this.OnEndDeleteCallRoute);
            }
            if ((this.onDeleteCallRouteCompletedDelegate == null)) {
                this.onDeleteCallRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCallRouteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCallRouteDelegate, new object[] {
                        routeCode,
                        securityToken}, this.onEndDeleteCallRouteDelegate, this.onDeleteCallRouteCompletedDelegate, userState);
        }
        
        public bool DeleteInbOutbRule(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken) {
            return base.Channel.DeleteInbOutbRule(routeCode, ruleId, direction, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteInbOutbRule(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteInbOutbRule(routeCode, ruleId, direction, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteInbOutbRule(System.IAsyncResult result) {
            return base.Channel.EndDeleteInbOutbRule(result);
        }
        
        private System.IAsyncResult OnBeginDeleteInbOutbRule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeCode = ((string)(inValues[0]));
            int ruleId = ((int)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginDeleteInbOutbRule(routeCode, ruleId, direction, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteInbOutbRule(System.IAsyncResult result) {
            bool retVal = this.EndDeleteInbOutbRule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteInbOutbRuleCompleted(object state) {
            if ((this.DeleteInbOutbRuleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteInbOutbRuleCompleted(this, new DeleteInbOutbRuleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteInbOutbRuleAsync(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken) {
            this.DeleteInbOutbRuleAsync(routeCode, ruleId, direction, securityToken, null);
        }
        
        public void DeleteInbOutbRuleAsync(string routeCode, int ruleId, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Direction direction, string securityToken, object userState) {
            if ((this.onBeginDeleteInbOutbRuleDelegate == null)) {
                this.onBeginDeleteInbOutbRuleDelegate = new BeginOperationDelegate(this.OnBeginDeleteInbOutbRule);
            }
            if ((this.onEndDeleteInbOutbRuleDelegate == null)) {
                this.onEndDeleteInbOutbRuleDelegate = new EndOperationDelegate(this.OnEndDeleteInbOutbRule);
            }
            if ((this.onDeleteInbOutbRuleCompletedDelegate == null)) {
                this.onDeleteInbOutbRuleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteInbOutbRuleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteInbOutbRuleDelegate, new object[] {
                        routeCode,
                        ruleId,
                        direction,
                        securityToken}, this.onEndDeleteInbOutbRuleDelegate, this.onDeleteInbOutbRuleCompletedDelegate, userState);
        }
        
        public bool saveToCallRuleOutbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken) {
            return base.Channel.saveToCallRuleOutbound(routCode, callRuleList, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveToCallRuleOutbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveToCallRuleOutbound(routCode, callRuleList, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndsaveToCallRuleOutbound(System.IAsyncResult result) {
            return base.Channel.EndsaveToCallRuleOutbound(result);
        }
        
        private System.IAsyncResult OnBeginsaveToCallRuleOutbound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routCode = ((string)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginsaveToCallRuleOutbound(routCode, callRuleList, securityToken, callback, asyncState);
        }
        
        private object[] OnEndsaveToCallRuleOutbound(System.IAsyncResult result) {
            bool retVal = this.EndsaveToCallRuleOutbound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveToCallRuleOutboundCompleted(object state) {
            if ((this.saveToCallRuleOutboundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveToCallRuleOutboundCompleted(this, new saveToCallRuleOutboundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveToCallRuleOutboundAsync(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken) {
            this.saveToCallRuleOutboundAsync(routCode, callRuleList, securityToken, null);
        }
        
        public void saveToCallRuleOutboundAsync(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] callRuleList, string securityToken, object userState) {
            if ((this.onBeginsaveToCallRuleOutboundDelegate == null)) {
                this.onBeginsaveToCallRuleOutboundDelegate = new BeginOperationDelegate(this.OnBeginsaveToCallRuleOutbound);
            }
            if ((this.onEndsaveToCallRuleOutboundDelegate == null)) {
                this.onEndsaveToCallRuleOutboundDelegate = new EndOperationDelegate(this.OnEndsaveToCallRuleOutbound);
            }
            if ((this.onsaveToCallRuleOutboundCompletedDelegate == null)) {
                this.onsaveToCallRuleOutboundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveToCallRuleOutboundCompleted);
            }
            base.InvokeAsync(this.onBeginsaveToCallRuleOutboundDelegate, new object[] {
                        routCode,
                        callRuleList,
                        securityToken}, this.onEndsaveToCallRuleOutboundDelegate, this.onsaveToCallRuleOutboundCompletedDelegate, userState);
        }
        
        public bool saveToCallRuleInbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken) {
            return base.Channel.saveToCallRuleInbound(routCode, callRuleList, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveToCallRuleInbound(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveToCallRuleInbound(routCode, callRuleList, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndsaveToCallRuleInbound(System.IAsyncResult result) {
            return base.Channel.EndsaveToCallRuleInbound(result);
        }
        
        private System.IAsyncResult OnBeginsaveToCallRuleInbound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routCode = ((string)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginsaveToCallRuleInbound(routCode, callRuleList, securityToken, callback, asyncState);
        }
        
        private object[] OnEndsaveToCallRuleInbound(System.IAsyncResult result) {
            bool retVal = this.EndsaveToCallRuleInbound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveToCallRuleInboundCompleted(object state) {
            if ((this.saveToCallRuleInboundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveToCallRuleInboundCompleted(this, new saveToCallRuleInboundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveToCallRuleInboundAsync(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken) {
            this.saveToCallRuleInboundAsync(routCode, callRuleList, securityToken, null);
        }
        
        public void saveToCallRuleInboundAsync(string routCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] callRuleList, string securityToken, object userState) {
            if ((this.onBeginsaveToCallRuleInboundDelegate == null)) {
                this.onBeginsaveToCallRuleInboundDelegate = new BeginOperationDelegate(this.OnBeginsaveToCallRuleInbound);
            }
            if ((this.onEndsaveToCallRuleInboundDelegate == null)) {
                this.onEndsaveToCallRuleInboundDelegate = new EndOperationDelegate(this.OnEndsaveToCallRuleInbound);
            }
            if ((this.onsaveToCallRuleInboundCompletedDelegate == null)) {
                this.onsaveToCallRuleInboundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveToCallRuleInboundCompleted);
            }
            base.InvokeAsync(this.onBeginsaveToCallRuleInboundDelegate, new object[] {
                        routCode,
                        callRuleList,
                        securityToken}, this.onEndsaveToCallRuleInboundDelegate, this.onsaveToCallRuleInboundCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] GetCallRuleOutboundList(string routeCode, string securityToken) {
            return base.Channel.GetCallRuleOutboundList(routeCode, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallRuleOutboundList(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallRuleOutboundList(routeCode, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] EndGetCallRuleOutboundList(System.IAsyncResult result) {
            return base.Channel.EndGetCallRuleOutboundList(result);
        }
        
        private System.IAsyncResult OnBeginGetCallRuleOutboundList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeCode = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCallRuleOutboundList(routeCode, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallRuleOutboundList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoOutbound[] retVal = this.EndGetCallRuleOutboundList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallRuleOutboundListCompleted(object state) {
            if ((this.GetCallRuleOutboundListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallRuleOutboundListCompleted(this, new GetCallRuleOutboundListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallRuleOutboundListAsync(string routeCode, string securityToken) {
            this.GetCallRuleOutboundListAsync(routeCode, securityToken, null);
        }
        
        public void GetCallRuleOutboundListAsync(string routeCode, string securityToken, object userState) {
            if ((this.onBeginGetCallRuleOutboundListDelegate == null)) {
                this.onBeginGetCallRuleOutboundListDelegate = new BeginOperationDelegate(this.OnBeginGetCallRuleOutboundList);
            }
            if ((this.onEndGetCallRuleOutboundListDelegate == null)) {
                this.onEndGetCallRuleOutboundListDelegate = new EndOperationDelegate(this.OnEndGetCallRuleOutboundList);
            }
            if ((this.onGetCallRuleOutboundListCompletedDelegate == null)) {
                this.onGetCallRuleOutboundListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallRuleOutboundListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallRuleOutboundListDelegate, new object[] {
                        routeCode,
                        securityToken}, this.onEndGetCallRuleOutboundListDelegate, this.onGetCallRuleOutboundListCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] GetCallRuleInboundList(string routeCode, string securityToken) {
            return base.Channel.GetCallRuleInboundList(routeCode, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallRuleInboundList(string routeCode, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallRuleInboundList(routeCode, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] EndGetCallRuleInboundList(System.IAsyncResult result) {
            return base.Channel.EndGetCallRuleInboundList(result);
        }
        
        private System.IAsyncResult OnBeginGetCallRuleInboundList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeCode = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCallRuleInboundList(routeCode, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallRuleInboundList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRuleInfoInbound[] retVal = this.EndGetCallRuleInboundList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallRuleInboundListCompleted(object state) {
            if ((this.GetCallRuleInboundListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallRuleInboundListCompleted(this, new GetCallRuleInboundListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallRuleInboundListAsync(string routeCode, string securityToken) {
            this.GetCallRuleInboundListAsync(routeCode, securityToken, null);
        }
        
        public void GetCallRuleInboundListAsync(string routeCode, string securityToken, object userState) {
            if ((this.onBeginGetCallRuleInboundListDelegate == null)) {
                this.onBeginGetCallRuleInboundListDelegate = new BeginOperationDelegate(this.OnBeginGetCallRuleInboundList);
            }
            if ((this.onEndGetCallRuleInboundListDelegate == null)) {
                this.onEndGetCallRuleInboundListDelegate = new EndOperationDelegate(this.OnEndGetCallRuleInboundList);
            }
            if ((this.onGetCallRuleInboundListCompletedDelegate == null)) {
                this.onGetCallRuleInboundListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallRuleInboundListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallRuleInboundListDelegate, new object[] {
                        routeCode,
                        securityToken}, this.onEndGetCallRuleInboundListDelegate, this.onGetCallRuleInboundListCompletedDelegate, userState);
        }
        
        public bool saveCallRouteInfo(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken) {
            return base.Channel.saveCallRouteInfo(routeCode, routeName, MaxCallInbound, MaxCallOutbound, MaxFaxInbound, MaxFaxOutbound, transID, recStatus, opStatus, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveCallRouteInfo(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveCallRouteInfo(routeCode, routeName, MaxCallInbound, MaxCallOutbound, MaxFaxInbound, MaxFaxOutbound, transID, recStatus, opStatus, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndsaveCallRouteInfo(System.IAsyncResult result) {
            return base.Channel.EndsaveCallRouteInfo(result);
        }
        
        private System.IAsyncResult OnBeginsaveCallRouteInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeCode = ((string)(inValues[0]));
            string routeName = ((string)(inValues[1]));
            int MaxCallInbound = ((int)(inValues[2]));
            int MaxCallOutbound = ((int)(inValues[3]));
            int MaxFaxInbound = ((int)(inValues[4]));
            int MaxFaxOutbound = ((int)(inValues[5]));
            decimal transID = ((decimal)(inValues[6]));
            int recStatus = ((int)(inValues[7]));
            string opStatus = ((string)(inValues[8]));
            string securityToken = ((string)(inValues[9]));
            return this.BeginsaveCallRouteInfo(routeCode, routeName, MaxCallInbound, MaxCallOutbound, MaxFaxInbound, MaxFaxOutbound, transID, recStatus, opStatus, securityToken, callback, asyncState);
        }
        
        private object[] OnEndsaveCallRouteInfo(System.IAsyncResult result) {
            bool retVal = this.EndsaveCallRouteInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveCallRouteInfoCompleted(object state) {
            if ((this.saveCallRouteInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveCallRouteInfoCompleted(this, new saveCallRouteInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveCallRouteInfoAsync(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken) {
            this.saveCallRouteInfoAsync(routeCode, routeName, MaxCallInbound, MaxCallOutbound, MaxFaxInbound, MaxFaxOutbound, transID, recStatus, opStatus, securityToken, null);
        }
        
        public void saveCallRouteInfoAsync(string routeCode, string routeName, int MaxCallInbound, int MaxCallOutbound, int MaxFaxInbound, int MaxFaxOutbound, decimal transID, int recStatus, string opStatus, string securityToken, object userState) {
            if ((this.onBeginsaveCallRouteInfoDelegate == null)) {
                this.onBeginsaveCallRouteInfoDelegate = new BeginOperationDelegate(this.OnBeginsaveCallRouteInfo);
            }
            if ((this.onEndsaveCallRouteInfoDelegate == null)) {
                this.onEndsaveCallRouteInfoDelegate = new EndOperationDelegate(this.OnEndsaveCallRouteInfo);
            }
            if ((this.onsaveCallRouteInfoCompletedDelegate == null)) {
                this.onsaveCallRouteInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveCallRouteInfoCompleted);
            }
            base.InvokeAsync(this.onBeginsaveCallRouteInfoDelegate, new object[] {
                        routeCode,
                        routeName,
                        MaxCallInbound,
                        MaxCallOutbound,
                        MaxFaxInbound,
                        MaxFaxOutbound,
                        transID,
                        recStatus,
                        opStatus,
                        securityToken}, this.onEndsaveCallRouteInfoDelegate, this.onsaveCallRouteInfoCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] getCallRouteDetails(string securityToken) {
            return base.Channel.getCallRouteDetails(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCallRouteDetails(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCallRouteDetails(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] EndgetCallRouteDetails(System.IAsyncResult result) {
            return base.Channel.EndgetCallRouteDetails(result);
        }
        
        private System.IAsyncResult OnBegingetCallRouteDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BegingetCallRouteDetails(securityToken, callback, asyncState);
        }
        
        private object[] OnEndgetCallRouteDetails(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallRouteInfo[] retVal = this.EndgetCallRouteDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCallRouteDetailsCompleted(object state) {
            if ((this.getCallRouteDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCallRouteDetailsCompleted(this, new getCallRouteDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCallRouteDetailsAsync(string securityToken) {
            this.getCallRouteDetailsAsync(securityToken, null);
        }
        
        public void getCallRouteDetailsAsync(string securityToken, object userState) {
            if ((this.onBegingetCallRouteDetailsDelegate == null)) {
                this.onBegingetCallRouteDetailsDelegate = new BeginOperationDelegate(this.OnBegingetCallRouteDetails);
            }
            if ((this.onEndgetCallRouteDetailsDelegate == null)) {
                this.onEndgetCallRouteDetailsDelegate = new EndOperationDelegate(this.OnEndgetCallRouteDetails);
            }
            if ((this.ongetCallRouteDetailsCompletedDelegate == null)) {
                this.ongetCallRouteDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCallRouteDetailsCompleted);
            }
            base.InvokeAsync(this.onBegingetCallRouteDetailsDelegate, new object[] {
                        securityToken}, this.onEndgetCallRouteDetailsDelegate, this.ongetCallRouteDetailsCompletedDelegate, userState);
        }
        
        public bool AddInternalRule(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken) {
            return base.Channel.AddInternalRule(dnis, ani, targetScript, enabledStatus, transId, aniTransId, context, schedule, priority, param, dialPattern, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddInternalRule(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddInternalRule(dnis, ani, targetScript, enabledStatus, transId, aniTransId, context, schedule, priority, param, dialPattern, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddInternalRule(System.IAsyncResult result) {
            return base.Channel.EndAddInternalRule(result);
        }
        
        private System.IAsyncResult OnBeginAddInternalRule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dnis = ((string)(inValues[0]));
            string ani = ((string)(inValues[1]));
            string targetScript = ((string)(inValues[2]));
            bool enabledStatus = ((bool)(inValues[3]));
            int transId = ((int)(inValues[4]));
            int aniTransId = ((int)(inValues[5]));
            string context = ((string)(inValues[6]));
            int schedule = ((int)(inValues[7]));
            int priority = ((int)(inValues[8]));
            string param = ((string)(inValues[9]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern)(inValues[10]));
            string securityToken = ((string)(inValues[11]));
            return this.BeginAddInternalRule(dnis, ani, targetScript, enabledStatus, transId, aniTransId, context, schedule, priority, param, dialPattern, securityToken, callback, asyncState);
        }
        
        private object[] OnEndAddInternalRule(System.IAsyncResult result) {
            bool retVal = this.EndAddInternalRule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddInternalRuleCompleted(object state) {
            if ((this.AddInternalRuleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddInternalRuleCompleted(this, new AddInternalRuleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddInternalRuleAsync(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken) {
            this.AddInternalRuleAsync(dnis, ani, targetScript, enabledStatus, transId, aniTransId, context, schedule, priority, param, dialPattern, securityToken, null);
        }
        
        public void AddInternalRuleAsync(string dnis, string ani, string targetScript, bool enabledStatus, int transId, int aniTransId, string context, int schedule, int priority, string param, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DirectDialPattern dialPattern, string securityToken, object userState) {
            if ((this.onBeginAddInternalRuleDelegate == null)) {
                this.onBeginAddInternalRuleDelegate = new BeginOperationDelegate(this.OnBeginAddInternalRule);
            }
            if ((this.onEndAddInternalRuleDelegate == null)) {
                this.onEndAddInternalRuleDelegate = new EndOperationDelegate(this.OnEndAddInternalRule);
            }
            if ((this.onAddInternalRuleCompletedDelegate == null)) {
                this.onAddInternalRuleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddInternalRuleCompleted);
            }
            base.InvokeAsync(this.onBeginAddInternalRuleDelegate, new object[] {
                        dnis,
                        ani,
                        targetScript,
                        enabledStatus,
                        transId,
                        aniTransId,
                        context,
                        schedule,
                        priority,
                        param,
                        dialPattern,
                        securityToken}, this.onEndAddInternalRuleDelegate, this.onAddInternalRuleCompletedDelegate, userState);
        }
        
        public bool AddContext(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken) {
            return base.Channel.AddContext(contextName, contextDescription, contextCat, queueEnabled, parkEnabled, bypassMedia, voicemailActive, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddContext(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddContext(contextName, contextDescription, contextCat, queueEnabled, parkEnabled, bypassMedia, voicemailActive, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddContext(System.IAsyncResult result) {
            return base.Channel.EndAddContext(result);
        }
        
        private System.IAsyncResult OnBeginAddContext(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string contextName = ((string)(inValues[0]));
            string contextDescription = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat)(inValues[2]));
            bool queueEnabled = ((bool)(inValues[3]));
            bool parkEnabled = ((bool)(inValues[4]));
            bool bypassMedia = ((bool)(inValues[5]));
            bool voicemailActive = ((bool)(inValues[6]));
            string securityToken = ((string)(inValues[7]));
            return this.BeginAddContext(contextName, contextDescription, contextCat, queueEnabled, parkEnabled, bypassMedia, voicemailActive, securityToken, callback, asyncState);
        }
        
        private object[] OnEndAddContext(System.IAsyncResult result) {
            bool retVal = this.EndAddContext(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddContextCompleted(object state) {
            if ((this.AddContextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddContextCompleted(this, new AddContextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddContextAsync(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken) {
            this.AddContextAsync(contextName, contextDescription, contextCat, queueEnabled, parkEnabled, bypassMedia, voicemailActive, securityToken, null);
        }
        
        public void AddContextAsync(string contextName, string contextDescription, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ContextCat contextCat, bool queueEnabled, bool parkEnabled, bool bypassMedia, bool voicemailActive, string securityToken, object userState) {
            if ((this.onBeginAddContextDelegate == null)) {
                this.onBeginAddContextDelegate = new BeginOperationDelegate(this.OnBeginAddContext);
            }
            if ((this.onEndAddContextDelegate == null)) {
                this.onEndAddContextDelegate = new EndOperationDelegate(this.OnEndAddContext);
            }
            if ((this.onAddContextCompletedDelegate == null)) {
                this.onAddContextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddContextCompleted);
            }
            base.InvokeAsync(this.onBeginAddContextDelegate, new object[] {
                        contextName,
                        contextDescription,
                        contextCat,
                        queueEnabled,
                        parkEnabled,
                        bypassMedia,
                        voicemailActive,
                        securityToken}, this.onEndAddContextDelegate, this.onAddContextCompletedDelegate, userState);
        }
        
        public string[] GetCsInternalContexts(string securityToken) {
            return base.Channel.GetCsInternalContexts(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCsInternalContexts(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCsInternalContexts(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetCsInternalContexts(System.IAsyncResult result) {
            return base.Channel.EndGetCsInternalContexts(result);
        }
        
        private System.IAsyncResult OnBeginGetCsInternalContexts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetCsInternalContexts(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCsInternalContexts(System.IAsyncResult result) {
            string[] retVal = this.EndGetCsInternalContexts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCsInternalContextsCompleted(object state) {
            if ((this.GetCsInternalContextsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCsInternalContextsCompleted(this, new GetCsInternalContextsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCsInternalContextsAsync(string securityToken) {
            this.GetCsInternalContextsAsync(securityToken, null);
        }
        
        public void GetCsInternalContextsAsync(string securityToken, object userState) {
            if ((this.onBeginGetCsInternalContextsDelegate == null)) {
                this.onBeginGetCsInternalContextsDelegate = new BeginOperationDelegate(this.OnBeginGetCsInternalContexts);
            }
            if ((this.onEndGetCsInternalContextsDelegate == null)) {
                this.onEndGetCsInternalContextsDelegate = new EndOperationDelegate(this.OnEndGetCsInternalContexts);
            }
            if ((this.onGetCsInternalContextsCompletedDelegate == null)) {
                this.onGetCsInternalContextsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCsInternalContextsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCsInternalContextsDelegate, new object[] {
                        securityToken}, this.onEndGetCsInternalContextsDelegate, this.onGetCsInternalContextsCompletedDelegate, userState);
        }
        
        public int AddTranslation(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken) {
            return base.Channel.AddTranslation(transName, lAdd, lRemove, rAdd, rRemove, replace, repDest, repOrig, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTranslation(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTranslation(transName, lAdd, lRemove, rAdd, rRemove, replace, repDest, repOrig, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddTranslation(System.IAsyncResult result) {
            return base.Channel.EndAddTranslation(result);
        }
        
        private System.IAsyncResult OnBeginAddTranslation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string transName = ((string)(inValues[0]));
            string lAdd = ((string)(inValues[1]));
            int lRemove = ((int)(inValues[2]));
            string rAdd = ((string)(inValues[3]));
            int rRemove = ((int)(inValues[4]));
            string replace = ((string)(inValues[5]));
            string repDest = ((string)(inValues[6]));
            string repOrig = ((string)(inValues[7]));
            string securityToken = ((string)(inValues[8]));
            return this.BeginAddTranslation(transName, lAdd, lRemove, rAdd, rRemove, replace, repDest, repOrig, securityToken, callback, asyncState);
        }
        
        private object[] OnEndAddTranslation(System.IAsyncResult result) {
            int retVal = this.EndAddTranslation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTranslationCompleted(object state) {
            if ((this.AddTranslationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTranslationCompleted(this, new AddTranslationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTranslationAsync(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken) {
            this.AddTranslationAsync(transName, lAdd, lRemove, rAdd, rRemove, replace, repDest, repOrig, securityToken, null);
        }
        
        public void AddTranslationAsync(string transName, string lAdd, int lRemove, string rAdd, int rRemove, string replace, string repDest, string repOrig, string securityToken, object userState) {
            if ((this.onBeginAddTranslationDelegate == null)) {
                this.onBeginAddTranslationDelegate = new BeginOperationDelegate(this.OnBeginAddTranslation);
            }
            if ((this.onEndAddTranslationDelegate == null)) {
                this.onEndAddTranslationDelegate = new EndOperationDelegate(this.OnEndAddTranslation);
            }
            if ((this.onAddTranslationCompletedDelegate == null)) {
                this.onAddTranslationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTranslationCompleted);
            }
            base.InvokeAsync(this.onBeginAddTranslationDelegate, new object[] {
                        transName,
                        lAdd,
                        lRemove,
                        rAdd,
                        rRemove,
                        replace,
                        repDest,
                        repOrig,
                        securityToken}, this.onEndAddTranslationDelegate, this.onAddTranslationCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] GetTranslation(string securityToken) {
            return base.Channel.GetTranslation(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTranslation(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTranslation(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] EndGetTranslation(System.IAsyncResult result) {
            return base.Channel.EndGetTranslation(result);
        }
        
        private System.IAsyncResult OnBeginGetTranslation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetTranslation(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetTranslation(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Translationinfo[] retVal = this.EndGetTranslation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTranslationCompleted(object state) {
            if ((this.GetTranslationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTranslationCompleted(this, new GetTranslationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTranslationAsync(string securityToken) {
            this.GetTranslationAsync(securityToken, null);
        }
        
        public void GetTranslationAsync(string securityToken, object userState) {
            if ((this.onBeginGetTranslationDelegate == null)) {
                this.onBeginGetTranslationDelegate = new BeginOperationDelegate(this.OnBeginGetTranslation);
            }
            if ((this.onEndGetTranslationDelegate == null)) {
                this.onEndGetTranslationDelegate = new EndOperationDelegate(this.OnEndGetTranslation);
            }
            if ((this.onGetTranslationCompletedDelegate == null)) {
                this.onGetTranslationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTranslationCompleted);
            }
            base.InvokeAsync(this.onBeginGetTranslationDelegate, new object[] {
                        securityToken}, this.onEndGetTranslationDelegate, this.onGetTranslationCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefDuoMainConfigService.ISIPRegistration")]
    public interface ISIPRegistration {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/ResetSIPPassword", ReplyAction="http://tempuri.org/ISIPRegistration/ResetSIPPasswordResponse")]
        bool ResetSIPPassword(string authenticatedUsername, string password, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/ResetSIPPassword", ReplyAction="http://tempuri.org/ISIPRegistration/ResetSIPPasswordResponse")]
        System.IAsyncResult BeginResetSIPPassword(string authenticatedUsername, string password, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndResetSIPPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/SIPAccountCreation", ReplyAction="http://tempuri.org/ISIPRegistration/SIPAccountCreationResponse")]
        bool SIPAccountCreation(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/SIPAccountCreation", ReplyAction="http://tempuri.org/ISIPRegistration/SIPAccountCreationResponse")]
        System.IAsyncResult BeginSIPAccountCreation(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSIPAccountCreation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/DeleteSIPAccount", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteSIPAccountResponse")]
        bool DeleteSIPAccount(string username, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/DeleteSIPAccount", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteSIPAccountResponse")]
        System.IAsyncResult BeginDeleteSIPAccount(string username, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteSIPAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/getSIPAccountDetails", ReplyAction="http://tempuri.org/ISIPRegistration/getSIPAccountDetailsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails getSIPAccountDetails(string username, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/getSIPAccountDetails", ReplyAction="http://tempuri.org/ISIPRegistration/getSIPAccountDetailsResponse")]
        System.IAsyncResult BegingetSIPAccountDetails(string username, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails EndgetSIPAccountDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/GetSIPDetailsForUserId", ReplyAction="http://tempuri.org/ISIPRegistration/GetSIPDetailsForUserIdResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails GetSIPDetailsForUserId(string GuUserId, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/GetSIPDetailsForUserId", ReplyAction="http://tempuri.org/ISIPRegistration/GetSIPDetailsForUserIdResponse")]
        System.IAsyncResult BeginGetSIPDetailsForUserId(string GuUserId, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails EndGetSIPDetailsForUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/ValidateExtensionUsage", ReplyAction="http://tempuri.org/ISIPRegistration/ValidateExtensionUsageResponse")]
        bool ValidateExtensionUsage(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/ValidateExtensionUsage", ReplyAction="http://tempuri.org/ISIPRegistration/ValidateExtensionUsageResponse")]
        System.IAsyncResult BeginValidateExtensionUsage(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndValidateExtensionUsage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/ValidateDomainUsage", ReplyAction="http://tempuri.org/ISIPRegistration/ValidateDomainUsageResponse")]
        bool ValidateDomainUsage(string domain, string username, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/ValidateDomainUsage", ReplyAction="http://tempuri.org/ISIPRegistration/ValidateDomainUsageResponse")]
        System.IAsyncResult BeginValidateDomainUsage(string domain, string username, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndValidateDomainUsage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/UpdateUserExtension", ReplyAction="http://tempuri.org/ISIPRegistration/UpdateUserExtensionResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult UpdateUserExtension(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/UpdateUserExtension", ReplyAction="http://tempuri.org/ISIPRegistration/UpdateUserExtensionResponse")]
        System.IAsyncResult BeginUpdateUserExtension(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult EndUpdateUserExtension(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/SetDidForExtension", ReplyAction="http://tempuri.org/ISIPRegistration/SetDidForExtensionResponse")]
        bool SetDidForExtension(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/SetDidForExtension", ReplyAction="http://tempuri.org/ISIPRegistration/SetDidForExtensionResponse")]
        System.IAsyncResult BeginSetDidForExtension(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSetDidForExtension(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/SetDodForExtension", ReplyAction="http://tempuri.org/ISIPRegistration/SetDodForExtensionResponse")]
        bool SetDodForExtension(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/SetDodForExtension", ReplyAction="http://tempuri.org/ISIPRegistration/SetDodForExtensionResponse")]
        System.IAsyncResult BeginSetDodForExtension(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSetDodForExtension(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/GetUserExtensions", ReplyAction="http://tempuri.org/ISIPRegistration/GetUserExtensionsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] GetUserExtensions(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/GetUserExtensions", ReplyAction="http://tempuri.org/ISIPRegistration/GetUserExtensionsResponse")]
        System.IAsyncResult BeginGetUserExtensions(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] EndGetUserExtensions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/GetGroupDetails", ReplyAction="http://tempuri.org/ISIPRegistration/GetGroupDetailsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] GetGroupDetails(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/GetGroupDetails", ReplyAction="http://tempuri.org/ISIPRegistration/GetGroupDetailsResponse")]
        System.IAsyncResult BeginGetGroupDetails(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] EndGetGroupDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/UpdateUserGroup", ReplyAction="http://tempuri.org/ISIPRegistration/UpdateUserGroupResponse")]
        bool UpdateUserGroup(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/UpdateUserGroup", ReplyAction="http://tempuri.org/ISIPRegistration/UpdateUserGroupResponse")]
        System.IAsyncResult BeginUpdateUserGroup(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/DeleteUserGroup", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteUserGroupResponse")]
        bool DeleteUserGroup(string groupName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/DeleteUserGroup", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteUserGroupResponse")]
        System.IAsyncResult BeginDeleteUserGroup(string groupName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/RemoveUsersFromGroup", ReplyAction="http://tempuri.org/ISIPRegistration/RemoveUsersFromGroupResponse")]
        bool RemoveUsersFromGroup(string groupName, string[] removableUsers, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/RemoveUsersFromGroup", ReplyAction="http://tempuri.org/ISIPRegistration/RemoveUsersFromGroupResponse")]
        System.IAsyncResult BeginRemoveUsersFromGroup(string groupName, string[] removableUsers, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveUsersFromGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/DeleteCallForwarding", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteCallForwardingResponse")]
        bool DeleteCallForwarding(string extension, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/DeleteCallForwarding", ReplyAction="http://tempuri.org/ISIPRegistration/DeleteCallForwardingResponse")]
        System.IAsyncResult BeginDeleteCallForwarding(string extension, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteCallForwarding(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/SaveCallForwardingInfo", ReplyAction="http://tempuri.org/ISIPRegistration/SaveCallForwardingInfoResponse")]
        bool SaveCallForwardingInfo(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/SaveCallForwardingInfo", ReplyAction="http://tempuri.org/ISIPRegistration/SaveCallForwardingInfoResponse")]
        System.IAsyncResult BeginSaveCallForwardingInfo(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveCallForwardingInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISIPRegistration/GetCallForwardingInfo", ReplyAction="http://tempuri.org/ISIPRegistration/GetCallForwardingInfoResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] GetCallForwardingInfo(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISIPRegistration/GetCallForwardingInfo", ReplyAction="http://tempuri.org/ISIPRegistration/GetCallForwardingInfoResponse")]
        System.IAsyncResult BeginGetCallForwardingInfo(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] EndGetCallForwardingInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISIPRegistrationChannel : DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ISIPRegistration, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetSIPPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetSIPPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SIPAccountCreationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SIPAccountCreationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteSIPAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSIPAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSIPAccountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSIPAccountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSIPDetailsForUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSIPDetailsForUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateExtensionUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateExtensionUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateDomainUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateDomainUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetDidForExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetDidForExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetDodForExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetDodForExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserExtensionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveUsersFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveUsersFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCallForwardingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCallForwardingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCallForwardingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCallForwardingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallForwardingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallForwardingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SIPRegistrationClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ISIPRegistration>, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ISIPRegistration {
        
        private BeginOperationDelegate onBeginResetSIPPasswordDelegate;
        
        private EndOperationDelegate onEndResetSIPPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetSIPPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSIPAccountCreationDelegate;
        
        private EndOperationDelegate onEndSIPAccountCreationDelegate;
        
        private System.Threading.SendOrPostCallback onSIPAccountCreationCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSIPAccountDelegate;
        
        private EndOperationDelegate onEndDeleteSIPAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSIPAccountCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSIPAccountDetailsDelegate;
        
        private EndOperationDelegate onEndgetSIPAccountDetailsDelegate;
        
        private System.Threading.SendOrPostCallback ongetSIPAccountDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSIPDetailsForUserIdDelegate;
        
        private EndOperationDelegate onEndGetSIPDetailsForUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetSIPDetailsForUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateExtensionUsageDelegate;
        
        private EndOperationDelegate onEndValidateExtensionUsageDelegate;
        
        private System.Threading.SendOrPostCallback onValidateExtensionUsageCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateDomainUsageDelegate;
        
        private EndOperationDelegate onEndValidateDomainUsageDelegate;
        
        private System.Threading.SendOrPostCallback onValidateDomainUsageCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserExtensionDelegate;
        
        private EndOperationDelegate onEndUpdateUserExtensionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserExtensionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetDidForExtensionDelegate;
        
        private EndOperationDelegate onEndSetDidForExtensionDelegate;
        
        private System.Threading.SendOrPostCallback onSetDidForExtensionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetDodForExtensionDelegate;
        
        private EndOperationDelegate onEndSetDodForExtensionDelegate;
        
        private System.Threading.SendOrPostCallback onSetDodForExtensionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserExtensionsDelegate;
        
        private EndOperationDelegate onEndGetUserExtensionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserExtensionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupDetailsDelegate;
        
        private EndOperationDelegate onEndGetGroupDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserGroupDelegate;
        
        private EndOperationDelegate onEndUpdateUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserGroupDelegate;
        
        private EndOperationDelegate onEndDeleteUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUsersFromGroupDelegate;
        
        private EndOperationDelegate onEndRemoveUsersFromGroupDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUsersFromGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCallForwardingDelegate;
        
        private EndOperationDelegate onEndDeleteCallForwardingDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCallForwardingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCallForwardingInfoDelegate;
        
        private EndOperationDelegate onEndSaveCallForwardingInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCallForwardingInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallForwardingInfoDelegate;
        
        private EndOperationDelegate onEndGetCallForwardingInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallForwardingInfoCompletedDelegate;
        
        public SIPRegistrationClient() {
        }
        
        public SIPRegistrationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SIPRegistrationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPRegistrationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SIPRegistrationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ResetSIPPasswordCompletedEventArgs> ResetSIPPasswordCompleted;
        
        public event System.EventHandler<SIPAccountCreationCompletedEventArgs> SIPAccountCreationCompleted;
        
        public event System.EventHandler<DeleteSIPAccountCompletedEventArgs> DeleteSIPAccountCompleted;
        
        public event System.EventHandler<getSIPAccountDetailsCompletedEventArgs> getSIPAccountDetailsCompleted;
        
        public event System.EventHandler<GetSIPDetailsForUserIdCompletedEventArgs> GetSIPDetailsForUserIdCompleted;
        
        public event System.EventHandler<ValidateExtensionUsageCompletedEventArgs> ValidateExtensionUsageCompleted;
        
        public event System.EventHandler<ValidateDomainUsageCompletedEventArgs> ValidateDomainUsageCompleted;
        
        public event System.EventHandler<UpdateUserExtensionCompletedEventArgs> UpdateUserExtensionCompleted;
        
        public event System.EventHandler<SetDidForExtensionCompletedEventArgs> SetDidForExtensionCompleted;
        
        public event System.EventHandler<SetDodForExtensionCompletedEventArgs> SetDodForExtensionCompleted;
        
        public event System.EventHandler<GetUserExtensionsCompletedEventArgs> GetUserExtensionsCompleted;
        
        public event System.EventHandler<GetGroupDetailsCompletedEventArgs> GetGroupDetailsCompleted;
        
        public event System.EventHandler<UpdateUserGroupCompletedEventArgs> UpdateUserGroupCompleted;
        
        public event System.EventHandler<DeleteUserGroupCompletedEventArgs> DeleteUserGroupCompleted;
        
        public event System.EventHandler<RemoveUsersFromGroupCompletedEventArgs> RemoveUsersFromGroupCompleted;
        
        public event System.EventHandler<DeleteCallForwardingCompletedEventArgs> DeleteCallForwardingCompleted;
        
        public event System.EventHandler<SaveCallForwardingInfoCompletedEventArgs> SaveCallForwardingInfoCompleted;
        
        public event System.EventHandler<GetCallForwardingInfoCompletedEventArgs> GetCallForwardingInfoCompleted;
        
        public bool ResetSIPPassword(string authenticatedUsername, string password, string securityToken) {
            return base.Channel.ResetSIPPassword(authenticatedUsername, password, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetSIPPassword(string authenticatedUsername, string password, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetSIPPassword(authenticatedUsername, password, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndResetSIPPassword(System.IAsyncResult result) {
            return base.Channel.EndResetSIPPassword(result);
        }
        
        private System.IAsyncResult OnBeginResetSIPPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authenticatedUsername = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginResetSIPPassword(authenticatedUsername, password, securityToken, callback, asyncState);
        }
        
        private object[] OnEndResetSIPPassword(System.IAsyncResult result) {
            bool retVal = this.EndResetSIPPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetSIPPasswordCompleted(object state) {
            if ((this.ResetSIPPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetSIPPasswordCompleted(this, new ResetSIPPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetSIPPasswordAsync(string authenticatedUsername, string password, string securityToken) {
            this.ResetSIPPasswordAsync(authenticatedUsername, password, securityToken, null);
        }
        
        public void ResetSIPPasswordAsync(string authenticatedUsername, string password, string securityToken, object userState) {
            if ((this.onBeginResetSIPPasswordDelegate == null)) {
                this.onBeginResetSIPPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetSIPPassword);
            }
            if ((this.onEndResetSIPPasswordDelegate == null)) {
                this.onEndResetSIPPasswordDelegate = new EndOperationDelegate(this.OnEndResetSIPPassword);
            }
            if ((this.onResetSIPPasswordCompletedDelegate == null)) {
                this.onResetSIPPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetSIPPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetSIPPasswordDelegate, new object[] {
                        authenticatedUsername,
                        password,
                        securityToken}, this.onEndResetSIPPasswordDelegate, this.onResetSIPPasswordCompletedDelegate, userState);
        }
        
        public bool SIPAccountCreation(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken) {
            return base.Channel.SIPAccountCreation(username, password, domain, emailAddr, extension, context, registerAllowed, guUserId, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSIPAccountCreation(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSIPAccountCreation(username, password, domain, emailAddr, extension, context, registerAllowed, guUserId, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSIPAccountCreation(System.IAsyncResult result) {
            return base.Channel.EndSIPAccountCreation(result);
        }
        
        private System.IAsyncResult OnBeginSIPAccountCreation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string domain = ((string)(inValues[2]));
            string emailAddr = ((string)(inValues[3]));
            int extension = ((int)(inValues[4]));
            string context = ((string)(inValues[5]));
            bool registerAllowed = ((bool)(inValues[6]));
            string guUserId = ((string)(inValues[7]));
            string securityToken = ((string)(inValues[8]));
            return this.BeginSIPAccountCreation(username, password, domain, emailAddr, extension, context, registerAllowed, guUserId, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSIPAccountCreation(System.IAsyncResult result) {
            bool retVal = this.EndSIPAccountCreation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSIPAccountCreationCompleted(object state) {
            if ((this.SIPAccountCreationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SIPAccountCreationCompleted(this, new SIPAccountCreationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SIPAccountCreationAsync(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken) {
            this.SIPAccountCreationAsync(username, password, domain, emailAddr, extension, context, registerAllowed, guUserId, securityToken, null);
        }
        
        public void SIPAccountCreationAsync(string username, string password, string domain, string emailAddr, int extension, string context, bool registerAllowed, string guUserId, string securityToken, object userState) {
            if ((this.onBeginSIPAccountCreationDelegate == null)) {
                this.onBeginSIPAccountCreationDelegate = new BeginOperationDelegate(this.OnBeginSIPAccountCreation);
            }
            if ((this.onEndSIPAccountCreationDelegate == null)) {
                this.onEndSIPAccountCreationDelegate = new EndOperationDelegate(this.OnEndSIPAccountCreation);
            }
            if ((this.onSIPAccountCreationCompletedDelegate == null)) {
                this.onSIPAccountCreationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSIPAccountCreationCompleted);
            }
            base.InvokeAsync(this.onBeginSIPAccountCreationDelegate, new object[] {
                        username,
                        password,
                        domain,
                        emailAddr,
                        extension,
                        context,
                        registerAllowed,
                        guUserId,
                        securityToken}, this.onEndSIPAccountCreationDelegate, this.onSIPAccountCreationCompletedDelegate, userState);
        }
        
        public bool DeleteSIPAccount(string username, string securityToken) {
            return base.Channel.DeleteSIPAccount(username, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteSIPAccount(string username, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSIPAccount(username, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteSIPAccount(System.IAsyncResult result) {
            return base.Channel.EndDeleteSIPAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSIPAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteSIPAccount(username, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteSIPAccount(System.IAsyncResult result) {
            bool retVal = this.EndDeleteSIPAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSIPAccountCompleted(object state) {
            if ((this.DeleteSIPAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSIPAccountCompleted(this, new DeleteSIPAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSIPAccountAsync(string username, string securityToken) {
            this.DeleteSIPAccountAsync(username, securityToken, null);
        }
        
        public void DeleteSIPAccountAsync(string username, string securityToken, object userState) {
            if ((this.onBeginDeleteSIPAccountDelegate == null)) {
                this.onBeginDeleteSIPAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteSIPAccount);
            }
            if ((this.onEndDeleteSIPAccountDelegate == null)) {
                this.onEndDeleteSIPAccountDelegate = new EndOperationDelegate(this.OnEndDeleteSIPAccount);
            }
            if ((this.onDeleteSIPAccountCompletedDelegate == null)) {
                this.onDeleteSIPAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSIPAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSIPAccountDelegate, new object[] {
                        username,
                        securityToken}, this.onEndDeleteSIPAccountDelegate, this.onDeleteSIPAccountCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails getSIPAccountDetails(string username, string securityToken) {
            return base.Channel.getSIPAccountDetails(username, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSIPAccountDetails(string username, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSIPAccountDetails(username, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails EndgetSIPAccountDetails(System.IAsyncResult result) {
            return base.Channel.EndgetSIPAccountDetails(result);
        }
        
        private System.IAsyncResult OnBegingetSIPAccountDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BegingetSIPAccountDetails(username, securityToken, callback, asyncState);
        }
        
        private object[] OnEndgetSIPAccountDetails(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails retVal = this.EndgetSIPAccountDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSIPAccountDetailsCompleted(object state) {
            if ((this.getSIPAccountDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSIPAccountDetailsCompleted(this, new getSIPAccountDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSIPAccountDetailsAsync(string username, string securityToken) {
            this.getSIPAccountDetailsAsync(username, securityToken, null);
        }
        
        public void getSIPAccountDetailsAsync(string username, string securityToken, object userState) {
            if ((this.onBegingetSIPAccountDetailsDelegate == null)) {
                this.onBegingetSIPAccountDetailsDelegate = new BeginOperationDelegate(this.OnBegingetSIPAccountDetails);
            }
            if ((this.onEndgetSIPAccountDetailsDelegate == null)) {
                this.onEndgetSIPAccountDetailsDelegate = new EndOperationDelegate(this.OnEndgetSIPAccountDetails);
            }
            if ((this.ongetSIPAccountDetailsCompletedDelegate == null)) {
                this.ongetSIPAccountDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSIPAccountDetailsCompleted);
            }
            base.InvokeAsync(this.onBegingetSIPAccountDetailsDelegate, new object[] {
                        username,
                        securityToken}, this.onEndgetSIPAccountDetailsDelegate, this.ongetSIPAccountDetailsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails GetSIPDetailsForUserId(string GuUserId, string securityToken) {
            return base.Channel.GetSIPDetailsForUserId(GuUserId, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSIPDetailsForUserId(string GuUserId, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSIPDetailsForUserId(GuUserId, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails EndGetSIPDetailsForUserId(System.IAsyncResult result) {
            return base.Channel.EndGetSIPDetailsForUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetSIPDetailsForUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string GuUserId = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetSIPDetailsForUserId(GuUserId, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetSIPDetailsForUserId(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SIPAccDetails retVal = this.EndGetSIPDetailsForUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSIPDetailsForUserIdCompleted(object state) {
            if ((this.GetSIPDetailsForUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSIPDetailsForUserIdCompleted(this, new GetSIPDetailsForUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSIPDetailsForUserIdAsync(string GuUserId, string securityToken) {
            this.GetSIPDetailsForUserIdAsync(GuUserId, securityToken, null);
        }
        
        public void GetSIPDetailsForUserIdAsync(string GuUserId, string securityToken, object userState) {
            if ((this.onBeginGetSIPDetailsForUserIdDelegate == null)) {
                this.onBeginGetSIPDetailsForUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetSIPDetailsForUserId);
            }
            if ((this.onEndGetSIPDetailsForUserIdDelegate == null)) {
                this.onEndGetSIPDetailsForUserIdDelegate = new EndOperationDelegate(this.OnEndGetSIPDetailsForUserId);
            }
            if ((this.onGetSIPDetailsForUserIdCompletedDelegate == null)) {
                this.onGetSIPDetailsForUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSIPDetailsForUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetSIPDetailsForUserIdDelegate, new object[] {
                        GuUserId,
                        securityToken}, this.onEndGetSIPDetailsForUserIdDelegate, this.onGetSIPDetailsForUserIdCompletedDelegate, userState);
        }
        
        public bool ValidateExtensionUsage(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken) {
            return base.Channel.ValidateExtensionUsage(extension, username, extTy, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateExtensionUsage(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateExtensionUsage(extension, username, extTy, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndValidateExtensionUsage(System.IAsyncResult result) {
            return base.Channel.EndValidateExtensionUsage(result);
        }
        
        private System.IAsyncResult OnBeginValidateExtensionUsage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string extension = ((string)(inValues[0]));
            string username = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginValidateExtensionUsage(extension, username, extTy, securityToken, callback, asyncState);
        }
        
        private object[] OnEndValidateExtensionUsage(System.IAsyncResult result) {
            bool retVal = this.EndValidateExtensionUsage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateExtensionUsageCompleted(object state) {
            if ((this.ValidateExtensionUsageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateExtensionUsageCompleted(this, new ValidateExtensionUsageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateExtensionUsageAsync(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken) {
            this.ValidateExtensionUsageAsync(extension, username, extTy, securityToken, null);
        }
        
        public void ValidateExtensionUsageAsync(string extension, string username, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extTy, string securityToken, object userState) {
            if ((this.onBeginValidateExtensionUsageDelegate == null)) {
                this.onBeginValidateExtensionUsageDelegate = new BeginOperationDelegate(this.OnBeginValidateExtensionUsage);
            }
            if ((this.onEndValidateExtensionUsageDelegate == null)) {
                this.onEndValidateExtensionUsageDelegate = new EndOperationDelegate(this.OnEndValidateExtensionUsage);
            }
            if ((this.onValidateExtensionUsageCompletedDelegate == null)) {
                this.onValidateExtensionUsageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateExtensionUsageCompleted);
            }
            base.InvokeAsync(this.onBeginValidateExtensionUsageDelegate, new object[] {
                        extension,
                        username,
                        extTy,
                        securityToken}, this.onEndValidateExtensionUsageDelegate, this.onValidateExtensionUsageCompletedDelegate, userState);
        }
        
        public bool ValidateDomainUsage(string domain, string username, string securityToken) {
            return base.Channel.ValidateDomainUsage(domain, username, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateDomainUsage(string domain, string username, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateDomainUsage(domain, username, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndValidateDomainUsage(System.IAsyncResult result) {
            return base.Channel.EndValidateDomainUsage(result);
        }
        
        private System.IAsyncResult OnBeginValidateDomainUsage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domain = ((string)(inValues[0]));
            string username = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginValidateDomainUsage(domain, username, securityToken, callback, asyncState);
        }
        
        private object[] OnEndValidateDomainUsage(System.IAsyncResult result) {
            bool retVal = this.EndValidateDomainUsage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateDomainUsageCompleted(object state) {
            if ((this.ValidateDomainUsageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateDomainUsageCompleted(this, new ValidateDomainUsageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateDomainUsageAsync(string domain, string username, string securityToken) {
            this.ValidateDomainUsageAsync(domain, username, securityToken, null);
        }
        
        public void ValidateDomainUsageAsync(string domain, string username, string securityToken, object userState) {
            if ((this.onBeginValidateDomainUsageDelegate == null)) {
                this.onBeginValidateDomainUsageDelegate = new BeginOperationDelegate(this.OnBeginValidateDomainUsage);
            }
            if ((this.onEndValidateDomainUsageDelegate == null)) {
                this.onEndValidateDomainUsageDelegate = new EndOperationDelegate(this.OnEndValidateDomainUsage);
            }
            if ((this.onValidateDomainUsageCompletedDelegate == null)) {
                this.onValidateDomainUsageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateDomainUsageCompleted);
            }
            base.InvokeAsync(this.onBeginValidateDomainUsageDelegate, new object[] {
                        domain,
                        username,
                        securityToken}, this.onEndValidateDomainUsageDelegate, this.onValidateDomainUsageCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult UpdateUserExtension(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken) {
            return base.Channel.UpdateUserExtension(extList, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserExtension(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserExtension(extList, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult EndUpdateUserExtension(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserExtension(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserExtension(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[])(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginUpdateUserExtension(extList, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserExtension(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.SaveResult retVal = this.EndUpdateUserExtension(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserExtensionCompleted(object state) {
            if ((this.UpdateUserExtensionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserExtensionCompleted(this, new UpdateUserExtensionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserExtensionAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken) {
            this.UpdateUserExtensionAsync(extList, securityToken, null);
        }
        
        public void UpdateUserExtensionAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] extList, string securityToken, object userState) {
            if ((this.onBeginUpdateUserExtensionDelegate == null)) {
                this.onBeginUpdateUserExtensionDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserExtension);
            }
            if ((this.onEndUpdateUserExtensionDelegate == null)) {
                this.onEndUpdateUserExtensionDelegate = new EndOperationDelegate(this.OnEndUpdateUserExtension);
            }
            if ((this.onUpdateUserExtensionCompletedDelegate == null)) {
                this.onUpdateUserExtensionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserExtensionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserExtensionDelegate, new object[] {
                        extList,
                        securityToken}, this.onEndUpdateUserExtensionDelegate, this.onUpdateUserExtensionCompletedDelegate, userState);
        }
        
        public bool SetDidForExtension(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken) {
            return base.Channel.SetDidForExtension(guUserDeviceId, didNumber, didEnabled, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetDidForExtension(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetDidForExtension(guUserDeviceId, didNumber, didEnabled, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetDidForExtension(System.IAsyncResult result) {
            return base.Channel.EndSetDidForExtension(result);
        }
        
        private System.IAsyncResult OnBeginSetDidForExtension(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string guUserDeviceId = ((string)(inValues[0]));
            string didNumber = ((string)(inValues[1]));
            bool didEnabled = ((bool)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginSetDidForExtension(guUserDeviceId, didNumber, didEnabled, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSetDidForExtension(System.IAsyncResult result) {
            bool retVal = this.EndSetDidForExtension(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetDidForExtensionCompleted(object state) {
            if ((this.SetDidForExtensionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetDidForExtensionCompleted(this, new SetDidForExtensionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetDidForExtensionAsync(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken) {
            this.SetDidForExtensionAsync(guUserDeviceId, didNumber, didEnabled, securityToken, null);
        }
        
        public void SetDidForExtensionAsync(string guUserDeviceId, string didNumber, bool didEnabled, string securityToken, object userState) {
            if ((this.onBeginSetDidForExtensionDelegate == null)) {
                this.onBeginSetDidForExtensionDelegate = new BeginOperationDelegate(this.OnBeginSetDidForExtension);
            }
            if ((this.onEndSetDidForExtensionDelegate == null)) {
                this.onEndSetDidForExtensionDelegate = new EndOperationDelegate(this.OnEndSetDidForExtension);
            }
            if ((this.onSetDidForExtensionCompletedDelegate == null)) {
                this.onSetDidForExtensionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetDidForExtensionCompleted);
            }
            base.InvokeAsync(this.onBeginSetDidForExtensionDelegate, new object[] {
                        guUserDeviceId,
                        didNumber,
                        didEnabled,
                        securityToken}, this.onEndSetDidForExtensionDelegate, this.onSetDidForExtensionCompletedDelegate, userState);
        }
        
        public bool SetDodForExtension(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken) {
            return base.Channel.SetDodForExtension(guUserDeviceId, dodNumber, dodEnabled, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetDodForExtension(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetDodForExtension(guUserDeviceId, dodNumber, dodEnabled, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetDodForExtension(System.IAsyncResult result) {
            return base.Channel.EndSetDodForExtension(result);
        }
        
        private System.IAsyncResult OnBeginSetDodForExtension(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string guUserDeviceId = ((string)(inValues[0]));
            string dodNumber = ((string)(inValues[1]));
            bool dodEnabled = ((bool)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginSetDodForExtension(guUserDeviceId, dodNumber, dodEnabled, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSetDodForExtension(System.IAsyncResult result) {
            bool retVal = this.EndSetDodForExtension(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetDodForExtensionCompleted(object state) {
            if ((this.SetDodForExtensionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetDodForExtensionCompleted(this, new SetDodForExtensionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetDodForExtensionAsync(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken) {
            this.SetDodForExtensionAsync(guUserDeviceId, dodNumber, dodEnabled, securityToken, null);
        }
        
        public void SetDodForExtensionAsync(string guUserDeviceId, string dodNumber, bool dodEnabled, string securityToken, object userState) {
            if ((this.onBeginSetDodForExtensionDelegate == null)) {
                this.onBeginSetDodForExtensionDelegate = new BeginOperationDelegate(this.OnBeginSetDodForExtension);
            }
            if ((this.onEndSetDodForExtensionDelegate == null)) {
                this.onEndSetDodForExtensionDelegate = new EndOperationDelegate(this.OnEndSetDodForExtension);
            }
            if ((this.onSetDodForExtensionCompletedDelegate == null)) {
                this.onSetDodForExtensionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetDodForExtensionCompleted);
            }
            base.InvokeAsync(this.onBeginSetDodForExtensionDelegate, new object[] {
                        guUserDeviceId,
                        dodNumber,
                        dodEnabled,
                        securityToken}, this.onEndSetDodForExtensionDelegate, this.onSetDodForExtensionCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] GetUserExtensions(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType) {
            return base.Channel.GetUserExtensions(securityToken, extType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserExtensions(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserExtensions(securityToken, extType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] EndGetUserExtensions(System.IAsyncResult result) {
            return base.Channel.EndGetUserExtensions(result);
        }
        
        private System.IAsyncResult OnBeginGetUserExtensions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType)(inValues[1]));
            return this.BeginGetUserExtensions(securityToken, extType, callback, asyncState);
        }
        
        private object[] OnEndGetUserExtensions(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UsrExtensions[] retVal = this.EndGetUserExtensions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserExtensionsCompleted(object state) {
            if ((this.GetUserExtensionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserExtensionsCompleted(this, new GetUserExtensionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserExtensionsAsync(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType) {
            this.GetUserExtensionsAsync(securityToken, extType, null);
        }
        
        public void GetUserExtensionsAsync(string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ExtType extType, object userState) {
            if ((this.onBeginGetUserExtensionsDelegate == null)) {
                this.onBeginGetUserExtensionsDelegate = new BeginOperationDelegate(this.OnBeginGetUserExtensions);
            }
            if ((this.onEndGetUserExtensionsDelegate == null)) {
                this.onEndGetUserExtensionsDelegate = new EndOperationDelegate(this.OnEndGetUserExtensions);
            }
            if ((this.onGetUserExtensionsCompletedDelegate == null)) {
                this.onGetUserExtensionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserExtensionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserExtensionsDelegate, new object[] {
                        securityToken,
                        extType}, this.onEndGetUserExtensionsDelegate, this.onGetUserExtensionsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] GetGroupDetails(string securityToken) {
            return base.Channel.GetGroupDetails(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupDetails(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupDetails(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] EndGetGroupDetails(System.IAsyncResult result) {
            return base.Channel.EndGetGroupDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetGroupDetails(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetGroupDetails(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.UserGroup[] retVal = this.EndGetGroupDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupDetailsCompleted(object state) {
            if ((this.GetGroupDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupDetailsCompleted(this, new GetGroupDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupDetailsAsync(string securityToken) {
            this.GetGroupDetailsAsync(securityToken, null);
        }
        
        public void GetGroupDetailsAsync(string securityToken, object userState) {
            if ((this.onBeginGetGroupDetailsDelegate == null)) {
                this.onBeginGetGroupDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetGroupDetails);
            }
            if ((this.onEndGetGroupDetailsDelegate == null)) {
                this.onEndGetGroupDetailsDelegate = new EndOperationDelegate(this.OnEndGetGroupDetails);
            }
            if ((this.onGetGroupDetailsCompletedDelegate == null)) {
                this.onGetGroupDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupDetailsDelegate, new object[] {
                        securityToken}, this.onEndGetGroupDetailsDelegate, this.onGetGroupDetailsCompletedDelegate, userState);
        }
        
        public bool UpdateUserGroup(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken) {
            return base.Channel.UpdateUserGroup(usrGrpList, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserGroup(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserGroup(usrGrpList, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserGroup(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[])(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginUpdateUserGroup(usrGrpList, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserGroup(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserGroupCompleted(object state) {
            if ((this.UpdateUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserGroupCompleted(this, new UpdateUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserGroupAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken) {
            this.UpdateUserGroupAsync(usrGrpList, securityToken, null);
        }
        
        public void UpdateUserGroupAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.GroupInfo[] usrGrpList, string securityToken, object userState) {
            if ((this.onBeginUpdateUserGroupDelegate == null)) {
                this.onBeginUpdateUserGroupDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserGroup);
            }
            if ((this.onEndUpdateUserGroupDelegate == null)) {
                this.onEndUpdateUserGroupDelegate = new EndOperationDelegate(this.OnEndUpdateUserGroup);
            }
            if ((this.onUpdateUserGroupCompletedDelegate == null)) {
                this.onUpdateUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserGroupDelegate, new object[] {
                        usrGrpList,
                        securityToken}, this.onEndUpdateUserGroupDelegate, this.onUpdateUserGroupCompletedDelegate, userState);
        }
        
        public bool DeleteUserGroup(string groupName, string securityToken) {
            return base.Channel.DeleteUserGroup(groupName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUserGroup(string groupName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUserGroup(groupName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteUserGroup(System.IAsyncResult result) {
            return base.Channel.EndDeleteUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string groupName = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteUserGroup(groupName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteUserGroup(System.IAsyncResult result) {
            bool retVal = this.EndDeleteUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserGroupCompleted(object state) {
            if ((this.DeleteUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserGroupCompleted(this, new DeleteUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserGroupAsync(string groupName, string securityToken) {
            this.DeleteUserGroupAsync(groupName, securityToken, null);
        }
        
        public void DeleteUserGroupAsync(string groupName, string securityToken, object userState) {
            if ((this.onBeginDeleteUserGroupDelegate == null)) {
                this.onBeginDeleteUserGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteUserGroup);
            }
            if ((this.onEndDeleteUserGroupDelegate == null)) {
                this.onEndDeleteUserGroupDelegate = new EndOperationDelegate(this.OnEndDeleteUserGroup);
            }
            if ((this.onDeleteUserGroupCompletedDelegate == null)) {
                this.onDeleteUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserGroupDelegate, new object[] {
                        groupName,
                        securityToken}, this.onEndDeleteUserGroupDelegate, this.onDeleteUserGroupCompletedDelegate, userState);
        }
        
        public bool RemoveUsersFromGroup(string groupName, string[] removableUsers, string securityToken) {
            return base.Channel.RemoveUsersFromGroup(groupName, removableUsers, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveUsersFromGroup(string groupName, string[] removableUsers, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUsersFromGroup(groupName, removableUsers, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRemoveUsersFromGroup(System.IAsyncResult result) {
            return base.Channel.EndRemoveUsersFromGroup(result);
        }
        
        private System.IAsyncResult OnBeginRemoveUsersFromGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string groupName = ((string)(inValues[0]));
            string[] removableUsers = ((string[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginRemoveUsersFromGroup(groupName, removableUsers, securityToken, callback, asyncState);
        }
        
        private object[] OnEndRemoveUsersFromGroup(System.IAsyncResult result) {
            bool retVal = this.EndRemoveUsersFromGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveUsersFromGroupCompleted(object state) {
            if ((this.RemoveUsersFromGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUsersFromGroupCompleted(this, new RemoveUsersFromGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUsersFromGroupAsync(string groupName, string[] removableUsers, string securityToken) {
            this.RemoveUsersFromGroupAsync(groupName, removableUsers, securityToken, null);
        }
        
        public void RemoveUsersFromGroupAsync(string groupName, string[] removableUsers, string securityToken, object userState) {
            if ((this.onBeginRemoveUsersFromGroupDelegate == null)) {
                this.onBeginRemoveUsersFromGroupDelegate = new BeginOperationDelegate(this.OnBeginRemoveUsersFromGroup);
            }
            if ((this.onEndRemoveUsersFromGroupDelegate == null)) {
                this.onEndRemoveUsersFromGroupDelegate = new EndOperationDelegate(this.OnEndRemoveUsersFromGroup);
            }
            if ((this.onRemoveUsersFromGroupCompletedDelegate == null)) {
                this.onRemoveUsersFromGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUsersFromGroupCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUsersFromGroupDelegate, new object[] {
                        groupName,
                        removableUsers,
                        securityToken}, this.onEndRemoveUsersFromGroupDelegate, this.onRemoveUsersFromGroupCompletedDelegate, userState);
        }
        
        public bool DeleteCallForwarding(string extension, string securityToken) {
            return base.Channel.DeleteCallForwarding(extension, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCallForwarding(string extension, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCallForwarding(extension, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteCallForwarding(System.IAsyncResult result) {
            return base.Channel.EndDeleteCallForwarding(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCallForwarding(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string extension = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteCallForwarding(extension, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteCallForwarding(System.IAsyncResult result) {
            bool retVal = this.EndDeleteCallForwarding(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCallForwardingCompleted(object state) {
            if ((this.DeleteCallForwardingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCallForwardingCompleted(this, new DeleteCallForwardingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCallForwardingAsync(string extension, string securityToken) {
            this.DeleteCallForwardingAsync(extension, securityToken, null);
        }
        
        public void DeleteCallForwardingAsync(string extension, string securityToken, object userState) {
            if ((this.onBeginDeleteCallForwardingDelegate == null)) {
                this.onBeginDeleteCallForwardingDelegate = new BeginOperationDelegate(this.OnBeginDeleteCallForwarding);
            }
            if ((this.onEndDeleteCallForwardingDelegate == null)) {
                this.onEndDeleteCallForwardingDelegate = new EndOperationDelegate(this.OnEndDeleteCallForwarding);
            }
            if ((this.onDeleteCallForwardingCompletedDelegate == null)) {
                this.onDeleteCallForwardingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCallForwardingCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCallForwardingDelegate, new object[] {
                        extension,
                        securityToken}, this.onEndDeleteCallForwardingDelegate, this.onDeleteCallForwardingCompletedDelegate, userState);
        }
        
        public bool SaveCallForwardingInfo(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken) {
            return base.Channel.SaveCallForwardingInfo(callForwardingInfo, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCallForwardingInfo(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCallForwardingInfo(callForwardingInfo, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveCallForwardingInfo(System.IAsyncResult result) {
            return base.Channel.EndSaveCallForwardingInfo(result);
        }
        
        private System.IAsyncResult OnBeginSaveCallForwardingInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[])(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginSaveCallForwardingInfo(callForwardingInfo, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveCallForwardingInfo(System.IAsyncResult result) {
            bool retVal = this.EndSaveCallForwardingInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCallForwardingInfoCompleted(object state) {
            if ((this.SaveCallForwardingInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCallForwardingInfoCompleted(this, new SaveCallForwardingInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCallForwardingInfoAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken) {
            this.SaveCallForwardingInfoAsync(callForwardingInfo, securityToken, null);
        }
        
        public void SaveCallForwardingInfoAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] callForwardingInfo, string securityToken, object userState) {
            if ((this.onBeginSaveCallForwardingInfoDelegate == null)) {
                this.onBeginSaveCallForwardingInfoDelegate = new BeginOperationDelegate(this.OnBeginSaveCallForwardingInfo);
            }
            if ((this.onEndSaveCallForwardingInfoDelegate == null)) {
                this.onEndSaveCallForwardingInfoDelegate = new EndOperationDelegate(this.OnEndSaveCallForwardingInfo);
            }
            if ((this.onSaveCallForwardingInfoCompletedDelegate == null)) {
                this.onSaveCallForwardingInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCallForwardingInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCallForwardingInfoDelegate, new object[] {
                        callForwardingInfo,
                        securityToken}, this.onEndSaveCallForwardingInfoDelegate, this.onSaveCallForwardingInfoCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] GetCallForwardingInfo(string securityToken) {
            return base.Channel.GetCallForwardingInfo(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallForwardingInfo(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallForwardingInfo(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] EndGetCallForwardingInfo(System.IAsyncResult result) {
            return base.Channel.EndGetCallForwardingInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetCallForwardingInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetCallForwardingInfo(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallForwardingInfo(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallForwardingInfo[] retVal = this.EndGetCallForwardingInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallForwardingInfoCompleted(object state) {
            if ((this.GetCallForwardingInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallForwardingInfoCompleted(this, new GetCallForwardingInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallForwardingInfoAsync(string securityToken) {
            this.GetCallForwardingInfoAsync(securityToken, null);
        }
        
        public void GetCallForwardingInfoAsync(string securityToken, object userState) {
            if ((this.onBeginGetCallForwardingInfoDelegate == null)) {
                this.onBeginGetCallForwardingInfoDelegate = new BeginOperationDelegate(this.OnBeginGetCallForwardingInfo);
            }
            if ((this.onEndGetCallForwardingInfoDelegate == null)) {
                this.onEndGetCallForwardingInfoDelegate = new EndOperationDelegate(this.OnEndGetCallForwardingInfo);
            }
            if ((this.onGetCallForwardingInfoCompletedDelegate == null)) {
                this.onGetCallForwardingInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallForwardingInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallForwardingInfoDelegate, new object[] {
                        securityToken}, this.onEndGetCallForwardingInfoDelegate, this.onGetCallForwardingInfoCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefDuoMainConfigService.ICallServerRegistration")]
    public interface ICallServerRegistration {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/RegisterMainCSDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/RegisterMainCSDetailsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList RegisterMainCSDetails(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/RegisterMainCSDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/RegisterMainCSDetailsResponse")]
        System.IAsyncResult BeginRegisterMainCSDetails(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList EndRegisterMainCSDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetXMPPUsername", ReplyAction="http://tempuri.org/ICallServerRegistration/GetXMPPUsernameResponse")]
        string GetXMPPUsername(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetXMPPUsername", ReplyAction="http://tempuri.org/ICallServerRegistration/GetXMPPUsernameResponse")]
        System.IAsyncResult BeginGetXMPPUsername(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        string EndGetXMPPUsername(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/DeleteCallServer", ReplyAction="http://tempuri.org/ICallServerRegistration/DeleteCallServerResponse")]
        bool DeleteCallServer(int csID, string csGuid, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/DeleteCallServer", ReplyAction="http://tempuri.org/ICallServerRegistration/DeleteCallServerResponse")]
        System.IAsyncResult BeginDeleteCallServer(int csID, string csGuid, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteCallServer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/CallServerActivated", ReplyAction="http://tempuri.org/ICallServerRegistration/CallServerActivatedResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData CallServerActivated(string csGuid, string csCode, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/CallServerActivated", ReplyAction="http://tempuri.org/ICallServerRegistration/CallServerActivatedResponse")]
        System.IAsyncResult BeginCallServerActivated(string csGuid, string csCode, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData EndCallServerActivated(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/UpdateMainCSDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateMainCSDetailsResponse")]
        bool UpdateMainCSDetails(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/UpdateMainCSDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateMainCSDetailsResponse")]
        System.IAsyncResult BeginUpdateMainCSDetails(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMainCSDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallServerList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] GetCallServerList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallServerList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerListResponse")]
        System.IAsyncResult BeginGetCallServerList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] EndGetCallServerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallServerTypesList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerTypesListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] GetCallServerTypesList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallServerTypesList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerTypesListResponse")]
        System.IAsyncResult BeginGetCallServerTypesList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] EndGetCallServerTypesList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetZonesList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetZonesListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] GetZonesList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetZonesList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetZonesListResponse")]
        System.IAsyncResult BeginGetZonesList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] EndGetZonesList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/SaveCallServerChannels", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallServerChannelsResponse")]
        bool SaveCallServerChannels(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/SaveCallServerChannels", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallServerChannelsResponse")]
        System.IAsyncResult BeginSaveCallServerChannels(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveCallServerChannels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallServerChannels", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerChannelsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] GetCallServerChannels(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallServerChannels", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerChannelsResponse")]
        System.IAsyncResult BeginGetCallServerChannels(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] EndGetCallServerChannels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/SaveCallServerClipPaths", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallServerClipPathsResponse")]
        bool SaveCallServerClipPaths(int csID, string[] clipPaths, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/SaveCallServerClipPaths", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallServerClipPathsResponse")]
        System.IAsyncResult BeginSaveCallServerClipPaths(int csID, string[] clipPaths, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveCallServerClipPaths(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallServerClipPaths", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerClipPathsResponse")]
        string[] GetCallServerClipPaths(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallServerClipPaths", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerClipPathsResponse")]
        System.IAsyncResult BeginGetCallServerClipPaths(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetCallServerClipPaths(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/SaveDevices", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveDevicesResponse")]
        bool SaveDevices(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/SaveDevices", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveDevicesResponse")]
        System.IAsyncResult BeginSaveDevices(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetDevices", ReplyAction="http://tempuri.org/ICallServerRegistration/GetDevicesResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices GetDevices(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetDevices", ReplyAction="http://tempuri.org/ICallServerRegistration/GetDevicesResponse")]
        System.IAsyncResult BeginGetDevices(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices EndGetDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/SaveNetworkConfig", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveNetworkConfigResponse")]
        bool SaveNetworkConfig(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/SaveNetworkConfig", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveNetworkConfigResponse")]
        System.IAsyncResult BeginSaveNetworkConfig(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveNetworkConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetNetworkConfig", ReplyAction="http://tempuri.org/ICallServerRegistration/GetNetworkConfigResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] GetNetworkConfig(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetNetworkConfig", ReplyAction="http://tempuri.org/ICallServerRegistration/GetNetworkConfigResponse")]
        System.IAsyncResult BeginGetNetworkConfig(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] EndGetNetworkConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/EditConcurrentVoicePortCounts", ReplyAction="http://tempuri.org/ICallServerRegistration/EditConcurrentVoicePortCountsResponse")]
        bool EditConcurrentVoicePortCounts(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/EditConcurrentVoicePortCounts", ReplyAction="http://tempuri.org/ICallServerRegistration/EditConcurrentVoicePortCountsResponse")]
        System.IAsyncResult BeginEditConcurrentVoicePortCounts(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndEditConcurrentVoicePortCounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetConcurrentVoicePortLimits", ReplyAction="http://tempuri.org/ICallServerRegistration/GetConcurrentVoicePortLimitsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits GetConcurrentVoicePortLimits(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetConcurrentVoicePortLimits", ReplyAction="http://tempuri.org/ICallServerRegistration/GetConcurrentVoicePortLimitsResponse")]
        System.IAsyncResult BeginGetConcurrentVoicePortLimits(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits EndGetConcurrentVoicePortLimits(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/UpdateCSConfiguration", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateCSConfigurationResponse")]
        bool UpdateCSConfiguration(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/UpdateCSConfiguration", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateCSConfigurationResponse")]
        System.IAsyncResult BeginUpdateCSConfiguration(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateCSConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCSConfiguration", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCSConfigurationResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations GetCSConfiguration(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCSConfiguration", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCSConfigurationResponse")]
        System.IAsyncResult BeginGetCSConfiguration(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations EndGetCSConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetValidCallserverIPs", ReplyAction="http://tempuri.org/ICallServerRegistration/GetValidCallserverIPsResponse")]
        System.Collections.Generic.Dictionary<int, string> GetValidCallserverIPs(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetValidCallserverIPs", ReplyAction="http://tempuri.org/ICallServerRegistration/GetValidCallserverIPsResponse")]
        System.IAsyncResult BeginGetValidCallserverIPs(string securityToken, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetValidCallserverIPs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallServerAccount", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerAccountResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount GetCallServerAccount(int csID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallServerAccount", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallServerAccountResponse")]
        System.IAsyncResult BeginGetCallServerAccount(int csID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount EndGetCallServerAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/GetCallControllerList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallControllerListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] GetCallControllerList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/GetCallControllerList", ReplyAction="http://tempuri.org/ICallServerRegistration/GetCallControllerListResponse")]
        System.IAsyncResult BeginGetCallControllerList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] EndGetCallControllerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/UpdateCallControllerDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateCallControllerDetailsResponse")]
        bool UpdateCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/UpdateCallControllerDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/UpdateCallControllerDetailsResponse")]
        System.IAsyncResult BeginUpdateCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateCallControllerDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallServerRegistration/SaveCallControllerDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallControllerDetailsResponse")]
        string SaveCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallServerRegistration/SaveCallControllerDetails", ReplyAction="http://tempuri.org/ICallServerRegistration/SaveCallControllerDetailsResponse")]
        System.IAsyncResult BeginSaveCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, System.AsyncCallback callback, object asyncState);
        
        string EndSaveCallControllerDetails(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallServerRegistrationChannel : DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerRegistration, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterMainCSDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterMainCSDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXMPPUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXMPPUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCallServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCallServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallServerActivatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CallServerActivatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMainCSDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMainCSDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallServerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallServerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallServerTypesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallServerTypesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetZonesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetZonesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCallServerChannelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCallServerChannelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallServerChannelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallServerChannelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCallServerClipPathsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCallServerClipPathsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallServerClipPathsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallServerClipPathsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveNetworkConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveNetworkConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNetworkConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNetworkConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditConcurrentVoicePortCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditConcurrentVoicePortCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConcurrentVoicePortLimitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConcurrentVoicePortLimitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCSConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCSConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCSConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCSConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetValidCallserverIPsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetValidCallserverIPsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallServerAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallServerAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCallControllerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCallControllerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCallControllerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCallControllerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCallControllerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCallControllerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallServerRegistrationClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerRegistration>, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ICallServerRegistration {
        
        private BeginOperationDelegate onBeginRegisterMainCSDetailsDelegate;
        
        private EndOperationDelegate onEndRegisterMainCSDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterMainCSDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXMPPUsernameDelegate;
        
        private EndOperationDelegate onEndGetXMPPUsernameDelegate;
        
        private System.Threading.SendOrPostCallback onGetXMPPUsernameCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCallServerDelegate;
        
        private EndOperationDelegate onEndDeleteCallServerDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCallServerCompletedDelegate;
        
        private BeginOperationDelegate onBeginCallServerActivatedDelegate;
        
        private EndOperationDelegate onEndCallServerActivatedDelegate;
        
        private System.Threading.SendOrPostCallback onCallServerActivatedCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMainCSDetailsDelegate;
        
        private EndOperationDelegate onEndUpdateMainCSDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMainCSDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallServerListDelegate;
        
        private EndOperationDelegate onEndGetCallServerListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallServerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallServerTypesListDelegate;
        
        private EndOperationDelegate onEndGetCallServerTypesListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallServerTypesListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetZonesListDelegate;
        
        private EndOperationDelegate onEndGetZonesListDelegate;
        
        private System.Threading.SendOrPostCallback onGetZonesListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCallServerChannelsDelegate;
        
        private EndOperationDelegate onEndSaveCallServerChannelsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCallServerChannelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallServerChannelsDelegate;
        
        private EndOperationDelegate onEndGetCallServerChannelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallServerChannelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCallServerClipPathsDelegate;
        
        private EndOperationDelegate onEndSaveCallServerClipPathsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCallServerClipPathsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallServerClipPathsDelegate;
        
        private EndOperationDelegate onEndGetCallServerClipPathsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallServerClipPathsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDevicesDelegate;
        
        private EndOperationDelegate onEndSaveDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onSaveDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDevicesDelegate;
        
        private EndOperationDelegate onEndGetDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveNetworkConfigDelegate;
        
        private EndOperationDelegate onEndSaveNetworkConfigDelegate;
        
        private System.Threading.SendOrPostCallback onSaveNetworkConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNetworkConfigDelegate;
        
        private EndOperationDelegate onEndGetNetworkConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetNetworkConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditConcurrentVoicePortCountsDelegate;
        
        private EndOperationDelegate onEndEditConcurrentVoicePortCountsDelegate;
        
        private System.Threading.SendOrPostCallback onEditConcurrentVoicePortCountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConcurrentVoicePortLimitsDelegate;
        
        private EndOperationDelegate onEndGetConcurrentVoicePortLimitsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConcurrentVoicePortLimitsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCSConfigurationDelegate;
        
        private EndOperationDelegate onEndUpdateCSConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCSConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCSConfigurationDelegate;
        
        private EndOperationDelegate onEndGetCSConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetCSConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetValidCallserverIPsDelegate;
        
        private EndOperationDelegate onEndGetValidCallserverIPsDelegate;
        
        private System.Threading.SendOrPostCallback onGetValidCallserverIPsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallServerAccountDelegate;
        
        private EndOperationDelegate onEndGetCallServerAccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallServerAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCallControllerListDelegate;
        
        private EndOperationDelegate onEndGetCallControllerListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCallControllerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCallControllerDetailsDelegate;
        
        private EndOperationDelegate onEndUpdateCallControllerDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCallControllerDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCallControllerDetailsDelegate;
        
        private EndOperationDelegate onEndSaveCallControllerDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCallControllerDetailsCompletedDelegate;
        
        public CallServerRegistrationClient() {
        }
        
        public CallServerRegistrationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CallServerRegistrationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallServerRegistrationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallServerRegistrationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<RegisterMainCSDetailsCompletedEventArgs> RegisterMainCSDetailsCompleted;
        
        public event System.EventHandler<GetXMPPUsernameCompletedEventArgs> GetXMPPUsernameCompleted;
        
        public event System.EventHandler<DeleteCallServerCompletedEventArgs> DeleteCallServerCompleted;
        
        public event System.EventHandler<CallServerActivatedCompletedEventArgs> CallServerActivatedCompleted;
        
        public event System.EventHandler<UpdateMainCSDetailsCompletedEventArgs> UpdateMainCSDetailsCompleted;
        
        public event System.EventHandler<GetCallServerListCompletedEventArgs> GetCallServerListCompleted;
        
        public event System.EventHandler<GetCallServerTypesListCompletedEventArgs> GetCallServerTypesListCompleted;
        
        public event System.EventHandler<GetZonesListCompletedEventArgs> GetZonesListCompleted;
        
        public event System.EventHandler<SaveCallServerChannelsCompletedEventArgs> SaveCallServerChannelsCompleted;
        
        public event System.EventHandler<GetCallServerChannelsCompletedEventArgs> GetCallServerChannelsCompleted;
        
        public event System.EventHandler<SaveCallServerClipPathsCompletedEventArgs> SaveCallServerClipPathsCompleted;
        
        public event System.EventHandler<GetCallServerClipPathsCompletedEventArgs> GetCallServerClipPathsCompleted;
        
        public event System.EventHandler<SaveDevicesCompletedEventArgs> SaveDevicesCompleted;
        
        public event System.EventHandler<GetDevicesCompletedEventArgs> GetDevicesCompleted;
        
        public event System.EventHandler<SaveNetworkConfigCompletedEventArgs> SaveNetworkConfigCompleted;
        
        public event System.EventHandler<GetNetworkConfigCompletedEventArgs> GetNetworkConfigCompleted;
        
        public event System.EventHandler<EditConcurrentVoicePortCountsCompletedEventArgs> EditConcurrentVoicePortCountsCompleted;
        
        public event System.EventHandler<GetConcurrentVoicePortLimitsCompletedEventArgs> GetConcurrentVoicePortLimitsCompleted;
        
        public event System.EventHandler<UpdateCSConfigurationCompletedEventArgs> UpdateCSConfigurationCompleted;
        
        public event System.EventHandler<GetCSConfigurationCompletedEventArgs> GetCSConfigurationCompleted;
        
        public event System.EventHandler<GetValidCallserverIPsCompletedEventArgs> GetValidCallserverIPsCompleted;
        
        public event System.EventHandler<GetCallServerAccountCompletedEventArgs> GetCallServerAccountCompleted;
        
        public event System.EventHandler<GetCallControllerListCompletedEventArgs> GetCallControllerListCompleted;
        
        public event System.EventHandler<UpdateCallControllerDetailsCompletedEventArgs> UpdateCallControllerDetailsCompleted;
        
        public event System.EventHandler<SaveCallControllerDetailsCompletedEventArgs> SaveCallControllerDetailsCompleted;
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList RegisterMainCSDetails(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId) {
            return base.Channel.RegisterMainCSDetails(csCode, csName, csType, csVersion, regKey, zone, transactionID, recStatus, opStatus, securityToken, xmppUsername, resourceId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegisterMainCSDetails(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterMainCSDetails(csCode, csName, csType, csVersion, regKey, zone, transactionID, recStatus, opStatus, securityToken, xmppUsername, resourceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList EndRegisterMainCSDetails(System.IAsyncResult result) {
            return base.Channel.EndRegisterMainCSDetails(result);
        }
        
        private System.IAsyncResult OnBeginRegisterMainCSDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string csCode = ((string)(inValues[0]));
            string csName = ((string)(inValues[1]));
            string csType = ((string)(inValues[2]));
            string csVersion = ((string)(inValues[3]));
            string regKey = ((string)(inValues[4]));
            int zone = ((int)(inValues[5]));
            string transactionID = ((string)(inValues[6]));
            int recStatus = ((int)(inValues[7]));
            string opStatus = ((string)(inValues[8]));
            string securityToken = ((string)(inValues[9]));
            string xmppUsername = ((string)(inValues[10]));
            string resourceId = ((string)(inValues[11]));
            return this.BeginRegisterMainCSDetails(csCode, csName, csType, csVersion, regKey, zone, transactionID, recStatus, opStatus, securityToken, xmppUsername, resourceId, callback, asyncState);
        }
        
        private object[] OnEndRegisterMainCSDetails(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList retVal = this.EndRegisterMainCSDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterMainCSDetailsCompleted(object state) {
            if ((this.RegisterMainCSDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterMainCSDetailsCompleted(this, new RegisterMainCSDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterMainCSDetailsAsync(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId) {
            this.RegisterMainCSDetailsAsync(csCode, csName, csType, csVersion, regKey, zone, transactionID, recStatus, opStatus, securityToken, xmppUsername, resourceId, null);
        }
        
        public void RegisterMainCSDetailsAsync(string csCode, string csName, string csType, string csVersion, string regKey, int zone, string transactionID, int recStatus, string opStatus, string securityToken, string xmppUsername, string resourceId, object userState) {
            if ((this.onBeginRegisterMainCSDetailsDelegate == null)) {
                this.onBeginRegisterMainCSDetailsDelegate = new BeginOperationDelegate(this.OnBeginRegisterMainCSDetails);
            }
            if ((this.onEndRegisterMainCSDetailsDelegate == null)) {
                this.onEndRegisterMainCSDetailsDelegate = new EndOperationDelegate(this.OnEndRegisterMainCSDetails);
            }
            if ((this.onRegisterMainCSDetailsCompletedDelegate == null)) {
                this.onRegisterMainCSDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterMainCSDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterMainCSDetailsDelegate, new object[] {
                        csCode,
                        csName,
                        csType,
                        csVersion,
                        regKey,
                        zone,
                        transactionID,
                        recStatus,
                        opStatus,
                        securityToken,
                        xmppUsername,
                        resourceId}, this.onEndRegisterMainCSDetailsDelegate, this.onRegisterMainCSDetailsCompletedDelegate, userState);
        }
        
        public string GetXMPPUsername(int csID, string securityToken) {
            return base.Channel.GetXMPPUsername(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXMPPUsername(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXMPPUsername(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetXMPPUsername(System.IAsyncResult result) {
            return base.Channel.EndGetXMPPUsername(result);
        }
        
        private System.IAsyncResult OnBeginGetXMPPUsername(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetXMPPUsername(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetXMPPUsername(System.IAsyncResult result) {
            string retVal = this.EndGetXMPPUsername(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXMPPUsernameCompleted(object state) {
            if ((this.GetXMPPUsernameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXMPPUsernameCompleted(this, new GetXMPPUsernameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXMPPUsernameAsync(int csID, string securityToken) {
            this.GetXMPPUsernameAsync(csID, securityToken, null);
        }
        
        public void GetXMPPUsernameAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetXMPPUsernameDelegate == null)) {
                this.onBeginGetXMPPUsernameDelegate = new BeginOperationDelegate(this.OnBeginGetXMPPUsername);
            }
            if ((this.onEndGetXMPPUsernameDelegate == null)) {
                this.onEndGetXMPPUsernameDelegate = new EndOperationDelegate(this.OnEndGetXMPPUsername);
            }
            if ((this.onGetXMPPUsernameCompletedDelegate == null)) {
                this.onGetXMPPUsernameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXMPPUsernameCompleted);
            }
            base.InvokeAsync(this.onBeginGetXMPPUsernameDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetXMPPUsernameDelegate, this.onGetXMPPUsernameCompletedDelegate, userState);
        }
        
        public bool DeleteCallServer(int csID, string csGuid, string securityToken) {
            return base.Channel.DeleteCallServer(csID, csGuid, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCallServer(int csID, string csGuid, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCallServer(csID, csGuid, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteCallServer(System.IAsyncResult result) {
            return base.Channel.EndDeleteCallServer(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCallServer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string csGuid = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginDeleteCallServer(csID, csGuid, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteCallServer(System.IAsyncResult result) {
            bool retVal = this.EndDeleteCallServer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCallServerCompleted(object state) {
            if ((this.DeleteCallServerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCallServerCompleted(this, new DeleteCallServerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCallServerAsync(int csID, string csGuid, string securityToken) {
            this.DeleteCallServerAsync(csID, csGuid, securityToken, null);
        }
        
        public void DeleteCallServerAsync(int csID, string csGuid, string securityToken, object userState) {
            if ((this.onBeginDeleteCallServerDelegate == null)) {
                this.onBeginDeleteCallServerDelegate = new BeginOperationDelegate(this.OnBeginDeleteCallServer);
            }
            if ((this.onEndDeleteCallServerDelegate == null)) {
                this.onEndDeleteCallServerDelegate = new EndOperationDelegate(this.OnEndDeleteCallServer);
            }
            if ((this.onDeleteCallServerCompletedDelegate == null)) {
                this.onDeleteCallServerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCallServerCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCallServerDelegate, new object[] {
                        csID,
                        csGuid,
                        securityToken}, this.onEndDeleteCallServerDelegate, this.onDeleteCallServerCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData CallServerActivated(string csGuid, string csCode, string securityToken) {
            return base.Channel.CallServerActivated(csGuid, csCode, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCallServerActivated(string csGuid, string csCode, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCallServerActivated(csGuid, csCode, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData EndCallServerActivated(System.IAsyncResult result) {
            return base.Channel.EndCallServerActivated(result);
        }
        
        private System.IAsyncResult OnBeginCallServerActivated(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string csGuid = ((string)(inValues[0]));
            string csCode = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginCallServerActivated(csGuid, csCode, securityToken, callback, asyncState);
        }
        
        private object[] OnEndCallServerActivated(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerLoginData retVal = this.EndCallServerActivated(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCallServerActivatedCompleted(object state) {
            if ((this.CallServerActivatedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CallServerActivatedCompleted(this, new CallServerActivatedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CallServerActivatedAsync(string csGuid, string csCode, string securityToken) {
            this.CallServerActivatedAsync(csGuid, csCode, securityToken, null);
        }
        
        public void CallServerActivatedAsync(string csGuid, string csCode, string securityToken, object userState) {
            if ((this.onBeginCallServerActivatedDelegate == null)) {
                this.onBeginCallServerActivatedDelegate = new BeginOperationDelegate(this.OnBeginCallServerActivated);
            }
            if ((this.onEndCallServerActivatedDelegate == null)) {
                this.onEndCallServerActivatedDelegate = new EndOperationDelegate(this.OnEndCallServerActivated);
            }
            if ((this.onCallServerActivatedCompletedDelegate == null)) {
                this.onCallServerActivatedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCallServerActivatedCompleted);
            }
            base.InvokeAsync(this.onBeginCallServerActivatedDelegate, new object[] {
                        csGuid,
                        csCode,
                        securityToken}, this.onEndCallServerActivatedDelegate, this.onCallServerActivatedCompletedDelegate, userState);
        }
        
        public bool UpdateMainCSDetails(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken) {
            return base.Channel.UpdateMainCSDetails(csGuid, csID, csName, csType, csVersion, opStatus, zone, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMainCSDetails(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMainCSDetails(csGuid, csID, csName, csType, csVersion, opStatus, zone, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateMainCSDetails(System.IAsyncResult result) {
            return base.Channel.EndUpdateMainCSDetails(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMainCSDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string csGuid = ((string)(inValues[0]));
            int csID = ((int)(inValues[1]));
            string csName = ((string)(inValues[2]));
            string csType = ((string)(inValues[3]));
            string csVersion = ((string)(inValues[4]));
            string opStatus = ((string)(inValues[5]));
            int zone = ((int)(inValues[6]));
            string securityToken = ((string)(inValues[7]));
            return this.BeginUpdateMainCSDetails(csGuid, csID, csName, csType, csVersion, opStatus, zone, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateMainCSDetails(System.IAsyncResult result) {
            bool retVal = this.EndUpdateMainCSDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMainCSDetailsCompleted(object state) {
            if ((this.UpdateMainCSDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMainCSDetailsCompleted(this, new UpdateMainCSDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMainCSDetailsAsync(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken) {
            this.UpdateMainCSDetailsAsync(csGuid, csID, csName, csType, csVersion, opStatus, zone, securityToken, null);
        }
        
        public void UpdateMainCSDetailsAsync(string csGuid, int csID, string csName, string csType, string csVersion, string opStatus, int zone, string securityToken, object userState) {
            if ((this.onBeginUpdateMainCSDetailsDelegate == null)) {
                this.onBeginUpdateMainCSDetailsDelegate = new BeginOperationDelegate(this.OnBeginUpdateMainCSDetails);
            }
            if ((this.onEndUpdateMainCSDetailsDelegate == null)) {
                this.onEndUpdateMainCSDetailsDelegate = new EndOperationDelegate(this.OnEndUpdateMainCSDetails);
            }
            if ((this.onUpdateMainCSDetailsCompletedDelegate == null)) {
                this.onUpdateMainCSDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMainCSDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMainCSDetailsDelegate, new object[] {
                        csGuid,
                        csID,
                        csName,
                        csType,
                        csVersion,
                        opStatus,
                        zone,
                        securityToken}, this.onEndUpdateMainCSDetailsDelegate, this.onUpdateMainCSDetailsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] GetCallServerList(string securityToken) {
            return base.Channel.GetCallServerList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallServerList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallServerList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] EndGetCallServerList(System.IAsyncResult result) {
            return base.Channel.EndGetCallServerList(result);
        }
        
        private System.IAsyncResult OnBeginGetCallServerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetCallServerList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallServerList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerList[] retVal = this.EndGetCallServerList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallServerListCompleted(object state) {
            if ((this.GetCallServerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallServerListCompleted(this, new GetCallServerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallServerListAsync(string securityToken) {
            this.GetCallServerListAsync(securityToken, null);
        }
        
        public void GetCallServerListAsync(string securityToken, object userState) {
            if ((this.onBeginGetCallServerListDelegate == null)) {
                this.onBeginGetCallServerListDelegate = new BeginOperationDelegate(this.OnBeginGetCallServerList);
            }
            if ((this.onEndGetCallServerListDelegate == null)) {
                this.onEndGetCallServerListDelegate = new EndOperationDelegate(this.OnEndGetCallServerList);
            }
            if ((this.onGetCallServerListCompletedDelegate == null)) {
                this.onGetCallServerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallServerListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallServerListDelegate, new object[] {
                        securityToken}, this.onEndGetCallServerListDelegate, this.onGetCallServerListCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] GetCallServerTypesList(string securityToken) {
            return base.Channel.GetCallServerTypesList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallServerTypesList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallServerTypesList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] EndGetCallServerTypesList(System.IAsyncResult result) {
            return base.Channel.EndGetCallServerTypesList(result);
        }
        
        private System.IAsyncResult OnBeginGetCallServerTypesList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetCallServerTypesList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallServerTypesList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerTypes[] retVal = this.EndGetCallServerTypesList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallServerTypesListCompleted(object state) {
            if ((this.GetCallServerTypesListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallServerTypesListCompleted(this, new GetCallServerTypesListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallServerTypesListAsync(string securityToken) {
            this.GetCallServerTypesListAsync(securityToken, null);
        }
        
        public void GetCallServerTypesListAsync(string securityToken, object userState) {
            if ((this.onBeginGetCallServerTypesListDelegate == null)) {
                this.onBeginGetCallServerTypesListDelegate = new BeginOperationDelegate(this.OnBeginGetCallServerTypesList);
            }
            if ((this.onEndGetCallServerTypesListDelegate == null)) {
                this.onEndGetCallServerTypesListDelegate = new EndOperationDelegate(this.OnEndGetCallServerTypesList);
            }
            if ((this.onGetCallServerTypesListCompletedDelegate == null)) {
                this.onGetCallServerTypesListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallServerTypesListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallServerTypesListDelegate, new object[] {
                        securityToken}, this.onEndGetCallServerTypesListDelegate, this.onGetCallServerTypesListCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] GetZonesList(string securityToken) {
            return base.Channel.GetZonesList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetZonesList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetZonesList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] EndGetZonesList(System.IAsyncResult result) {
            return base.Channel.EndGetZonesList(result);
        }
        
        private System.IAsyncResult OnBeginGetZonesList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetZonesList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetZonesList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Zones[] retVal = this.EndGetZonesList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetZonesListCompleted(object state) {
            if ((this.GetZonesListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetZonesListCompleted(this, new GetZonesListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetZonesListAsync(string securityToken) {
            this.GetZonesListAsync(securityToken, null);
        }
        
        public void GetZonesListAsync(string securityToken, object userState) {
            if ((this.onBeginGetZonesListDelegate == null)) {
                this.onBeginGetZonesListDelegate = new BeginOperationDelegate(this.OnBeginGetZonesList);
            }
            if ((this.onEndGetZonesListDelegate == null)) {
                this.onEndGetZonesListDelegate = new EndOperationDelegate(this.OnEndGetZonesList);
            }
            if ((this.onGetZonesListCompletedDelegate == null)) {
                this.onGetZonesListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetZonesListCompleted);
            }
            base.InvokeAsync(this.onBeginGetZonesListDelegate, new object[] {
                        securityToken}, this.onEndGetZonesListDelegate, this.onGetZonesListCompletedDelegate, userState);
        }
        
        public bool SaveCallServerChannels(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken) {
            return base.Channel.SaveCallServerChannels(csID, csChannels, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCallServerChannels(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCallServerChannels(csID, csChannels, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveCallServerChannels(System.IAsyncResult result) {
            return base.Channel.EndSaveCallServerChannels(result);
        }
        
        private System.IAsyncResult OnBeginSaveCallServerChannels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSaveCallServerChannels(csID, csChannels, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveCallServerChannels(System.IAsyncResult result) {
            bool retVal = this.EndSaveCallServerChannels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCallServerChannelsCompleted(object state) {
            if ((this.SaveCallServerChannelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCallServerChannelsCompleted(this, new SaveCallServerChannelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCallServerChannelsAsync(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken) {
            this.SaveCallServerChannelsAsync(csID, csChannels, securityToken, null);
        }
        
        public void SaveCallServerChannelsAsync(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] csChannels, string securityToken, object userState) {
            if ((this.onBeginSaveCallServerChannelsDelegate == null)) {
                this.onBeginSaveCallServerChannelsDelegate = new BeginOperationDelegate(this.OnBeginSaveCallServerChannels);
            }
            if ((this.onEndSaveCallServerChannelsDelegate == null)) {
                this.onEndSaveCallServerChannelsDelegate = new EndOperationDelegate(this.OnEndSaveCallServerChannels);
            }
            if ((this.onSaveCallServerChannelsCompletedDelegate == null)) {
                this.onSaveCallServerChannelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCallServerChannelsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCallServerChannelsDelegate, new object[] {
                        csID,
                        csChannels,
                        securityToken}, this.onEndSaveCallServerChannelsDelegate, this.onSaveCallServerChannelsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] GetCallServerChannels(int csID, string securityToken) {
            return base.Channel.GetCallServerChannels(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallServerChannels(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallServerChannels(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] EndGetCallServerChannels(System.IAsyncResult result) {
            return base.Channel.EndGetCallServerChannels(result);
        }
        
        private System.IAsyncResult OnBeginGetCallServerChannels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCallServerChannels(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallServerChannels(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Channels[] retVal = this.EndGetCallServerChannels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallServerChannelsCompleted(object state) {
            if ((this.GetCallServerChannelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallServerChannelsCompleted(this, new GetCallServerChannelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallServerChannelsAsync(int csID, string securityToken) {
            this.GetCallServerChannelsAsync(csID, securityToken, null);
        }
        
        public void GetCallServerChannelsAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetCallServerChannelsDelegate == null)) {
                this.onBeginGetCallServerChannelsDelegate = new BeginOperationDelegate(this.OnBeginGetCallServerChannels);
            }
            if ((this.onEndGetCallServerChannelsDelegate == null)) {
                this.onEndGetCallServerChannelsDelegate = new EndOperationDelegate(this.OnEndGetCallServerChannels);
            }
            if ((this.onGetCallServerChannelsCompletedDelegate == null)) {
                this.onGetCallServerChannelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallServerChannelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallServerChannelsDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetCallServerChannelsDelegate, this.onGetCallServerChannelsCompletedDelegate, userState);
        }
        
        public bool SaveCallServerClipPaths(int csID, string[] clipPaths, string securityToken) {
            return base.Channel.SaveCallServerClipPaths(csID, clipPaths, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCallServerClipPaths(int csID, string[] clipPaths, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCallServerClipPaths(csID, clipPaths, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveCallServerClipPaths(System.IAsyncResult result) {
            return base.Channel.EndSaveCallServerClipPaths(result);
        }
        
        private System.IAsyncResult OnBeginSaveCallServerClipPaths(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string[] clipPaths = ((string[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSaveCallServerClipPaths(csID, clipPaths, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveCallServerClipPaths(System.IAsyncResult result) {
            bool retVal = this.EndSaveCallServerClipPaths(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCallServerClipPathsCompleted(object state) {
            if ((this.SaveCallServerClipPathsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCallServerClipPathsCompleted(this, new SaveCallServerClipPathsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCallServerClipPathsAsync(int csID, string[] clipPaths, string securityToken) {
            this.SaveCallServerClipPathsAsync(csID, clipPaths, securityToken, null);
        }
        
        public void SaveCallServerClipPathsAsync(int csID, string[] clipPaths, string securityToken, object userState) {
            if ((this.onBeginSaveCallServerClipPathsDelegate == null)) {
                this.onBeginSaveCallServerClipPathsDelegate = new BeginOperationDelegate(this.OnBeginSaveCallServerClipPaths);
            }
            if ((this.onEndSaveCallServerClipPathsDelegate == null)) {
                this.onEndSaveCallServerClipPathsDelegate = new EndOperationDelegate(this.OnEndSaveCallServerClipPaths);
            }
            if ((this.onSaveCallServerClipPathsCompletedDelegate == null)) {
                this.onSaveCallServerClipPathsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCallServerClipPathsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCallServerClipPathsDelegate, new object[] {
                        csID,
                        clipPaths,
                        securityToken}, this.onEndSaveCallServerClipPathsDelegate, this.onSaveCallServerClipPathsCompletedDelegate, userState);
        }
        
        public string[] GetCallServerClipPaths(int csID, string securityToken) {
            return base.Channel.GetCallServerClipPaths(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallServerClipPaths(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallServerClipPaths(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetCallServerClipPaths(System.IAsyncResult result) {
            return base.Channel.EndGetCallServerClipPaths(result);
        }
        
        private System.IAsyncResult OnBeginGetCallServerClipPaths(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCallServerClipPaths(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallServerClipPaths(System.IAsyncResult result) {
            string[] retVal = this.EndGetCallServerClipPaths(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallServerClipPathsCompleted(object state) {
            if ((this.GetCallServerClipPathsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallServerClipPathsCompleted(this, new GetCallServerClipPathsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallServerClipPathsAsync(int csID, string securityToken) {
            this.GetCallServerClipPathsAsync(csID, securityToken, null);
        }
        
        public void GetCallServerClipPathsAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetCallServerClipPathsDelegate == null)) {
                this.onBeginGetCallServerClipPathsDelegate = new BeginOperationDelegate(this.OnBeginGetCallServerClipPaths);
            }
            if ((this.onEndGetCallServerClipPathsDelegate == null)) {
                this.onEndGetCallServerClipPathsDelegate = new EndOperationDelegate(this.OnEndGetCallServerClipPaths);
            }
            if ((this.onGetCallServerClipPathsCompletedDelegate == null)) {
                this.onGetCallServerClipPathsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallServerClipPathsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallServerClipPathsDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetCallServerClipPathsDelegate, this.onGetCallServerClipPathsCompletedDelegate, userState);
        }
        
        public bool SaveDevices(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken) {
            return base.Channel.SaveDevices(configure, voice, fax, csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveDevices(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveDevices(configure, voice, fax, csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveDevices(System.IAsyncResult result) {
            return base.Channel.EndSaveDevices(result);
        }
        
        private System.IAsyncResult OnBeginSaveDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus)(inValues[0]));
            string voice = ((string)(inValues[1]));
            string fax = ((string)(inValues[2]));
            int csID = ((int)(inValues[3]));
            string securityToken = ((string)(inValues[4]));
            return this.BeginSaveDevices(configure, voice, fax, csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveDevices(System.IAsyncResult result) {
            bool retVal = this.EndSaveDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveDevicesCompleted(object state) {
            if ((this.SaveDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveDevicesCompleted(this, new SaveDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveDevicesAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken) {
            this.SaveDevicesAsync(configure, voice, fax, csID, securityToken, null);
        }
        
        public void SaveDevicesAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.DeviceConfigureStatus configure, string voice, string fax, int csID, string securityToken, object userState) {
            if ((this.onBeginSaveDevicesDelegate == null)) {
                this.onBeginSaveDevicesDelegate = new BeginOperationDelegate(this.OnBeginSaveDevices);
            }
            if ((this.onEndSaveDevicesDelegate == null)) {
                this.onEndSaveDevicesDelegate = new EndOperationDelegate(this.OnEndSaveDevices);
            }
            if ((this.onSaveDevicesCompletedDelegate == null)) {
                this.onSaveDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDevicesDelegate, new object[] {
                        configure,
                        voice,
                        fax,
                        csID,
                        securityToken}, this.onEndSaveDevicesDelegate, this.onSaveDevicesCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices GetDevices(int csID, string securityToken) {
            return base.Channel.GetDevices(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDevices(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDevices(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices EndGetDevices(System.IAsyncResult result) {
            return base.Channel.EndGetDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetDevices(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetDevices(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Devices retVal = this.EndGetDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDevicesCompleted(object state) {
            if ((this.GetDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDevicesCompleted(this, new GetDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDevicesAsync(int csID, string securityToken) {
            this.GetDevicesAsync(csID, securityToken, null);
        }
        
        public void GetDevicesAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetDevicesDelegate == null)) {
                this.onBeginGetDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetDevices);
            }
            if ((this.onEndGetDevicesDelegate == null)) {
                this.onEndGetDevicesDelegate = new EndOperationDelegate(this.OnEndGetDevices);
            }
            if ((this.onGetDevicesCompletedDelegate == null)) {
                this.onGetDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDevicesDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetDevicesDelegate, this.onGetDevicesCompletedDelegate, userState);
        }
        
        public bool SaveNetworkConfig(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken) {
            return base.Channel.SaveNetworkConfig(csID, networkConf, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveNetworkConfig(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveNetworkConfig(csID, networkConf, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveNetworkConfig(System.IAsyncResult result) {
            return base.Channel.EndSaveNetworkConfig(result);
        }
        
        private System.IAsyncResult OnBeginSaveNetworkConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSaveNetworkConfig(csID, networkConf, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveNetworkConfig(System.IAsyncResult result) {
            bool retVal = this.EndSaveNetworkConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveNetworkConfigCompleted(object state) {
            if ((this.SaveNetworkConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveNetworkConfigCompleted(this, new SaveNetworkConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveNetworkConfigAsync(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken) {
            this.SaveNetworkConfigAsync(csID, networkConf, securityToken, null);
        }
        
        public void SaveNetworkConfigAsync(int csID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] networkConf, string securityToken, object userState) {
            if ((this.onBeginSaveNetworkConfigDelegate == null)) {
                this.onBeginSaveNetworkConfigDelegate = new BeginOperationDelegate(this.OnBeginSaveNetworkConfig);
            }
            if ((this.onEndSaveNetworkConfigDelegate == null)) {
                this.onEndSaveNetworkConfigDelegate = new EndOperationDelegate(this.OnEndSaveNetworkConfig);
            }
            if ((this.onSaveNetworkConfigCompletedDelegate == null)) {
                this.onSaveNetworkConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveNetworkConfigCompleted);
            }
            base.InvokeAsync(this.onBeginSaveNetworkConfigDelegate, new object[] {
                        csID,
                        networkConf,
                        securityToken}, this.onEndSaveNetworkConfigDelegate, this.onSaveNetworkConfigCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] GetNetworkConfig(int csID, string securityToken) {
            return base.Channel.GetNetworkConfig(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNetworkConfig(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNetworkConfig(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] EndGetNetworkConfig(System.IAsyncResult result) {
            return base.Channel.EndGetNetworkConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetNetworkConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetNetworkConfig(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetNetworkConfig(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.Network[] retVal = this.EndGetNetworkConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNetworkConfigCompleted(object state) {
            if ((this.GetNetworkConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNetworkConfigCompleted(this, new GetNetworkConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNetworkConfigAsync(int csID, string securityToken) {
            this.GetNetworkConfigAsync(csID, securityToken, null);
        }
        
        public void GetNetworkConfigAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetNetworkConfigDelegate == null)) {
                this.onBeginGetNetworkConfigDelegate = new BeginOperationDelegate(this.OnBeginGetNetworkConfig);
            }
            if ((this.onEndGetNetworkConfigDelegate == null)) {
                this.onEndGetNetworkConfigDelegate = new EndOperationDelegate(this.OnEndGetNetworkConfig);
            }
            if ((this.onGetNetworkConfigCompletedDelegate == null)) {
                this.onGetNetworkConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNetworkConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetNetworkConfigDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetNetworkConfigDelegate, this.onGetNetworkConfigCompletedDelegate, userState);
        }
        
        public bool EditConcurrentVoicePortCounts(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken) {
            return base.Channel.EditConcurrentVoicePortCounts(csGuid, csID, outgoingPorts, incomingPorts, confPorts, videoPorts, faxPorts, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEditConcurrentVoicePortCounts(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditConcurrentVoicePortCounts(csGuid, csID, outgoingPorts, incomingPorts, confPorts, videoPorts, faxPorts, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEditConcurrentVoicePortCounts(System.IAsyncResult result) {
            return base.Channel.EndEditConcurrentVoicePortCounts(result);
        }
        
        private System.IAsyncResult OnBeginEditConcurrentVoicePortCounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string csGuid = ((string)(inValues[0]));
            int csID = ((int)(inValues[1]));
            int outgoingPorts = ((int)(inValues[2]));
            int incomingPorts = ((int)(inValues[3]));
            int confPorts = ((int)(inValues[4]));
            int videoPorts = ((int)(inValues[5]));
            int faxPorts = ((int)(inValues[6]));
            string securityToken = ((string)(inValues[7]));
            return this.BeginEditConcurrentVoicePortCounts(csGuid, csID, outgoingPorts, incomingPorts, confPorts, videoPorts, faxPorts, securityToken, callback, asyncState);
        }
        
        private object[] OnEndEditConcurrentVoicePortCounts(System.IAsyncResult result) {
            bool retVal = this.EndEditConcurrentVoicePortCounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditConcurrentVoicePortCountsCompleted(object state) {
            if ((this.EditConcurrentVoicePortCountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditConcurrentVoicePortCountsCompleted(this, new EditConcurrentVoicePortCountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditConcurrentVoicePortCountsAsync(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken) {
            this.EditConcurrentVoicePortCountsAsync(csGuid, csID, outgoingPorts, incomingPorts, confPorts, videoPorts, faxPorts, securityToken, null);
        }
        
        public void EditConcurrentVoicePortCountsAsync(string csGuid, int csID, int outgoingPorts, int incomingPorts, int confPorts, int videoPorts, int faxPorts, string securityToken, object userState) {
            if ((this.onBeginEditConcurrentVoicePortCountsDelegate == null)) {
                this.onBeginEditConcurrentVoicePortCountsDelegate = new BeginOperationDelegate(this.OnBeginEditConcurrentVoicePortCounts);
            }
            if ((this.onEndEditConcurrentVoicePortCountsDelegate == null)) {
                this.onEndEditConcurrentVoicePortCountsDelegate = new EndOperationDelegate(this.OnEndEditConcurrentVoicePortCounts);
            }
            if ((this.onEditConcurrentVoicePortCountsCompletedDelegate == null)) {
                this.onEditConcurrentVoicePortCountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditConcurrentVoicePortCountsCompleted);
            }
            base.InvokeAsync(this.onBeginEditConcurrentVoicePortCountsDelegate, new object[] {
                        csGuid,
                        csID,
                        outgoingPorts,
                        incomingPorts,
                        confPorts,
                        videoPorts,
                        faxPorts,
                        securityToken}, this.onEndEditConcurrentVoicePortCountsDelegate, this.onEditConcurrentVoicePortCountsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits GetConcurrentVoicePortLimits(int csID, string securityToken) {
            return base.Channel.GetConcurrentVoicePortLimits(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConcurrentVoicePortLimits(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConcurrentVoicePortLimits(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits EndGetConcurrentVoicePortLimits(System.IAsyncResult result) {
            return base.Channel.EndGetConcurrentVoicePortLimits(result);
        }
        
        private System.IAsyncResult OnBeginGetConcurrentVoicePortLimits(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetConcurrentVoicePortLimits(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetConcurrentVoicePortLimits(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConcurrentVoicePortLimits retVal = this.EndGetConcurrentVoicePortLimits(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConcurrentVoicePortLimitsCompleted(object state) {
            if ((this.GetConcurrentVoicePortLimitsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConcurrentVoicePortLimitsCompleted(this, new GetConcurrentVoicePortLimitsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConcurrentVoicePortLimitsAsync(int csID, string securityToken) {
            this.GetConcurrentVoicePortLimitsAsync(csID, securityToken, null);
        }
        
        public void GetConcurrentVoicePortLimitsAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetConcurrentVoicePortLimitsDelegate == null)) {
                this.onBeginGetConcurrentVoicePortLimitsDelegate = new BeginOperationDelegate(this.OnBeginGetConcurrentVoicePortLimits);
            }
            if ((this.onEndGetConcurrentVoicePortLimitsDelegate == null)) {
                this.onEndGetConcurrentVoicePortLimitsDelegate = new EndOperationDelegate(this.OnEndGetConcurrentVoicePortLimits);
            }
            if ((this.onGetConcurrentVoicePortLimitsCompletedDelegate == null)) {
                this.onGetConcurrentVoicePortLimitsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConcurrentVoicePortLimitsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConcurrentVoicePortLimitsDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetConcurrentVoicePortLimitsDelegate, this.onGetConcurrentVoicePortLimitsCompletedDelegate, userState);
        }
        
        public bool UpdateCSConfiguration(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken) {
            return base.Channel.UpdateCSConfiguration(csGuid, csID, mainIP, recordPath, voxPath, agentGreetingPath, sipServer, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCSConfiguration(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCSConfiguration(csGuid, csID, mainIP, recordPath, voxPath, agentGreetingPath, sipServer, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateCSConfiguration(System.IAsyncResult result) {
            return base.Channel.EndUpdateCSConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCSConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string csGuid = ((string)(inValues[0]));
            int csID = ((int)(inValues[1]));
            string mainIP = ((string)(inValues[2]));
            string recordPath = ((string)(inValues[3]));
            string voxPath = ((string)(inValues[4]));
            string agentGreetingPath = ((string)(inValues[5]));
            string sipServer = ((string)(inValues[6]));
            string securityToken = ((string)(inValues[7]));
            return this.BeginUpdateCSConfiguration(csGuid, csID, mainIP, recordPath, voxPath, agentGreetingPath, sipServer, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateCSConfiguration(System.IAsyncResult result) {
            bool retVal = this.EndUpdateCSConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCSConfigurationCompleted(object state) {
            if ((this.UpdateCSConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCSConfigurationCompleted(this, new UpdateCSConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCSConfigurationAsync(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken) {
            this.UpdateCSConfigurationAsync(csGuid, csID, mainIP, recordPath, voxPath, agentGreetingPath, sipServer, securityToken, null);
        }
        
        public void UpdateCSConfigurationAsync(string csGuid, int csID, string mainIP, string recordPath, string voxPath, string agentGreetingPath, string sipServer, string securityToken, object userState) {
            if ((this.onBeginUpdateCSConfigurationDelegate == null)) {
                this.onBeginUpdateCSConfigurationDelegate = new BeginOperationDelegate(this.OnBeginUpdateCSConfiguration);
            }
            if ((this.onEndUpdateCSConfigurationDelegate == null)) {
                this.onEndUpdateCSConfigurationDelegate = new EndOperationDelegate(this.OnEndUpdateCSConfiguration);
            }
            if ((this.onUpdateCSConfigurationCompletedDelegate == null)) {
                this.onUpdateCSConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCSConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCSConfigurationDelegate, new object[] {
                        csGuid,
                        csID,
                        mainIP,
                        recordPath,
                        voxPath,
                        agentGreetingPath,
                        sipServer,
                        securityToken}, this.onEndUpdateCSConfigurationDelegate, this.onUpdateCSConfigurationCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations GetCSConfiguration(int csID, string securityToken) {
            return base.Channel.GetCSConfiguration(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCSConfiguration(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCSConfiguration(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations EndGetCSConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetCSConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetCSConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCSConfiguration(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCSConfiguration(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerMainConfigurations retVal = this.EndGetCSConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCSConfigurationCompleted(object state) {
            if ((this.GetCSConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCSConfigurationCompleted(this, new GetCSConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCSConfigurationAsync(int csID, string securityToken) {
            this.GetCSConfigurationAsync(csID, securityToken, null);
        }
        
        public void GetCSConfigurationAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetCSConfigurationDelegate == null)) {
                this.onBeginGetCSConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetCSConfiguration);
            }
            if ((this.onEndGetCSConfigurationDelegate == null)) {
                this.onEndGetCSConfigurationDelegate = new EndOperationDelegate(this.OnEndGetCSConfiguration);
            }
            if ((this.onGetCSConfigurationCompletedDelegate == null)) {
                this.onGetCSConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCSConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetCSConfigurationDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetCSConfigurationDelegate, this.onGetCSConfigurationCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetValidCallserverIPs(string securityToken) {
            return base.Channel.GetValidCallserverIPs(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetValidCallserverIPs(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetValidCallserverIPs(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<int, string> EndGetValidCallserverIPs(System.IAsyncResult result) {
            return base.Channel.EndGetValidCallserverIPs(result);
        }
        
        private System.IAsyncResult OnBeginGetValidCallserverIPs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetValidCallserverIPs(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetValidCallserverIPs(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = this.EndGetValidCallserverIPs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetValidCallserverIPsCompleted(object state) {
            if ((this.GetValidCallserverIPsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetValidCallserverIPsCompleted(this, new GetValidCallserverIPsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetValidCallserverIPsAsync(string securityToken) {
            this.GetValidCallserverIPsAsync(securityToken, null);
        }
        
        public void GetValidCallserverIPsAsync(string securityToken, object userState) {
            if ((this.onBeginGetValidCallserverIPsDelegate == null)) {
                this.onBeginGetValidCallserverIPsDelegate = new BeginOperationDelegate(this.OnBeginGetValidCallserverIPs);
            }
            if ((this.onEndGetValidCallserverIPsDelegate == null)) {
                this.onEndGetValidCallserverIPsDelegate = new EndOperationDelegate(this.OnEndGetValidCallserverIPs);
            }
            if ((this.onGetValidCallserverIPsCompletedDelegate == null)) {
                this.onGetValidCallserverIPsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValidCallserverIPsCompleted);
            }
            base.InvokeAsync(this.onBeginGetValidCallserverIPsDelegate, new object[] {
                        securityToken}, this.onEndGetValidCallserverIPsDelegate, this.onGetValidCallserverIPsCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount GetCallServerAccount(int csID, string securityToken) {
            return base.Channel.GetCallServerAccount(csID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallServerAccount(int csID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallServerAccount(csID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount EndGetCallServerAccount(System.IAsyncResult result) {
            return base.Channel.EndGetCallServerAccount(result);
        }
        
        private System.IAsyncResult OnBeginGetCallServerAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int csID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetCallServerAccount(csID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallServerAccount(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallServerAccount retVal = this.EndGetCallServerAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallServerAccountCompleted(object state) {
            if ((this.GetCallServerAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallServerAccountCompleted(this, new GetCallServerAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallServerAccountAsync(int csID, string securityToken) {
            this.GetCallServerAccountAsync(csID, securityToken, null);
        }
        
        public void GetCallServerAccountAsync(int csID, string securityToken, object userState) {
            if ((this.onBeginGetCallServerAccountDelegate == null)) {
                this.onBeginGetCallServerAccountDelegate = new BeginOperationDelegate(this.OnBeginGetCallServerAccount);
            }
            if ((this.onEndGetCallServerAccountDelegate == null)) {
                this.onEndGetCallServerAccountDelegate = new EndOperationDelegate(this.OnEndGetCallServerAccount);
            }
            if ((this.onGetCallServerAccountCompletedDelegate == null)) {
                this.onGetCallServerAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallServerAccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallServerAccountDelegate, new object[] {
                        csID,
                        securityToken}, this.onEndGetCallServerAccountDelegate, this.onGetCallServerAccountCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] GetCallControllerList(string securityToken) {
            return base.Channel.GetCallControllerList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCallControllerList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCallControllerList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] EndGetCallControllerList(System.IAsyncResult result) {
            return base.Channel.EndGetCallControllerList(result);
        }
        
        private System.IAsyncResult OnBeginGetCallControllerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetCallControllerList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetCallControllerList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf[] retVal = this.EndGetCallControllerList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCallControllerListCompleted(object state) {
            if ((this.GetCallControllerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCallControllerListCompleted(this, new GetCallControllerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCallControllerListAsync(string securityToken) {
            this.GetCallControllerListAsync(securityToken, null);
        }
        
        public void GetCallControllerListAsync(string securityToken, object userState) {
            if ((this.onBeginGetCallControllerListDelegate == null)) {
                this.onBeginGetCallControllerListDelegate = new BeginOperationDelegate(this.OnBeginGetCallControllerList);
            }
            if ((this.onEndGetCallControllerListDelegate == null)) {
                this.onEndGetCallControllerListDelegate = new EndOperationDelegate(this.OnEndGetCallControllerList);
            }
            if ((this.onGetCallControllerListCompletedDelegate == null)) {
                this.onGetCallControllerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCallControllerListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCallControllerListDelegate, new object[] {
                        securityToken}, this.onEndGetCallControllerListDelegate, this.onGetCallControllerListCompletedDelegate, userState);
        }
        
        public bool UpdateCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken) {
            return base.Channel.UpdateCallControllerDetails(ccConf, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCallControllerDetails(ccConf, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateCallControllerDetails(System.IAsyncResult result) {
            return base.Channel.EndUpdateCallControllerDetails(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCallControllerDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginUpdateCallControllerDetails(ccConf, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateCallControllerDetails(System.IAsyncResult result) {
            bool retVal = this.EndUpdateCallControllerDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCallControllerDetailsCompleted(object state) {
            if ((this.UpdateCallControllerDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCallControllerDetailsCompleted(this, new UpdateCallControllerDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCallControllerDetailsAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken) {
            this.UpdateCallControllerDetailsAsync(ccConf, securityToken, null);
        }
        
        public void UpdateCallControllerDetailsAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, object userState) {
            if ((this.onBeginUpdateCallControllerDetailsDelegate == null)) {
                this.onBeginUpdateCallControllerDetailsDelegate = new BeginOperationDelegate(this.OnBeginUpdateCallControllerDetails);
            }
            if ((this.onEndUpdateCallControllerDetailsDelegate == null)) {
                this.onEndUpdateCallControllerDetailsDelegate = new EndOperationDelegate(this.OnEndUpdateCallControllerDetails);
            }
            if ((this.onUpdateCallControllerDetailsCompletedDelegate == null)) {
                this.onUpdateCallControllerDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCallControllerDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCallControllerDetailsDelegate, new object[] {
                        ccConf,
                        securityToken}, this.onEndUpdateCallControllerDetailsDelegate, this.onUpdateCallControllerDetailsCompletedDelegate, userState);
        }
        
        public string SaveCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken) {
            return base.Channel.SaveCallControllerDetails(ccConf, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveCallControllerDetails(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCallControllerDetails(ccConf, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSaveCallControllerDetails(System.IAsyncResult result) {
            return base.Channel.EndSaveCallControllerDetails(result);
        }
        
        private System.IAsyncResult OnBeginSaveCallControllerDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginSaveCallControllerDetails(ccConf, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveCallControllerDetails(System.IAsyncResult result) {
            string retVal = this.EndSaveCallControllerDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCallControllerDetailsCompleted(object state) {
            if ((this.SaveCallControllerDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCallControllerDetailsCompleted(this, new SaveCallControllerDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCallControllerDetailsAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken) {
            this.SaveCallControllerDetailsAsync(ccConf, securityToken, null);
        }
        
        public void SaveCallControllerDetailsAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.CallControllerConf ccConf, string securityToken, object userState) {
            if ((this.onBeginSaveCallControllerDetailsDelegate == null)) {
                this.onBeginSaveCallControllerDetailsDelegate = new BeginOperationDelegate(this.OnBeginSaveCallControllerDetails);
            }
            if ((this.onEndSaveCallControllerDetailsDelegate == null)) {
                this.onEndSaveCallControllerDetailsDelegate = new EndOperationDelegate(this.OnEndSaveCallControllerDetails);
            }
            if ((this.onSaveCallControllerDetailsCompletedDelegate == null)) {
                this.onSaveCallControllerDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCallControllerDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCallControllerDetailsDelegate, new object[] {
                        ccConf,
                        securityToken}, this.onEndSaveCallControllerDetailsDelegate, this.onSaveCallControllerDetailsCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefDuoMainConfigService.ITrunkRegistration")]
    public interface ITrunkRegistration {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/DeleteTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/DeleteTrunkResponse")]
        bool DeleteTrunk(int trunkID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/DeleteTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/DeleteTrunkResponse")]
        System.IAsyncResult BeginDeleteTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteTrunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetails", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails SaveInitialTrunkDetails(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetails", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsResponse")]
        System.IAsyncResult BeginSaveInitialTrunkDetails(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails EndSaveInitialTrunkDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/UpdateTrunkByUniqueId", ReplyAction="http://tempuri.org/ITrunkRegistration/UpdateTrunkByUniqueIdResponse")]
        bool UpdateTrunkByUniqueId(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/UpdateTrunkByUniqueId", ReplyAction="http://tempuri.org/ITrunkRegistration/UpdateTrunkByUniqueIdResponse")]
        System.IAsyncResult BeginUpdateTrunkByUniqueId(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndUpdateTrunkByUniqueId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetTrunkList", ReplyAction="http://tempuri.org/ITrunkRegistration/GetTrunkListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] GetTrunkList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetTrunkList", ReplyAction="http://tempuri.org/ITrunkRegistration/GetTrunkListResponse")]
        System.IAsyncResult BeginGetTrunkList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] EndGetTrunkList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/AssignServerToTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/AssignServerToTrunkResponse")]
        bool AssignServerToTrunk(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/AssignServerToTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/AssignServerToTrunkResponse")]
        System.IAsyncResult BeginAssignServerToTrunk(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type, System.AsyncCallback callback, object asyncState);
        
        bool EndAssignServerToTrunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk GetServerInfoForTrunk(int trunkID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkResponse")]
        System.IAsyncResult BeginGetServerInfoForTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk EndGetServerInfoForTrunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkByUuid", ReplyAction="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkByUuidResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk GetServerInfoForTrunkByUuid(string trunkUuid, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkByUuid", ReplyAction="http://tempuri.org/ITrunkRegistration/GetServerInfoForTrunkByUuidResponse")]
        System.IAsyncResult BeginGetServerInfoForTrunkByUuid(string trunkUuid, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk EndGetServerInfoForTrunkByUuid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/SavePhoneNumbersForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/SavePhoneNumbersForTrunkResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] SavePhoneNumbersForTrunk(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/SavePhoneNumbersForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/SavePhoneNumbersForTrunkResponse")]
        System.IAsyncResult BeginSavePhoneNumbersForTrunk(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndSavePhoneNumbersForTrunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetPhoneNumberListForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/GetPhoneNumberListForTrunkResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetPhoneNumberListForTrunk(int trunkID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetPhoneNumberListForTrunk", ReplyAction="http://tempuri.org/ITrunkRegistration/GetPhoneNumberListForTrunkResponse")]
        System.IAsyncResult BeginGetPhoneNumberListForTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetPhoneNumberListForTrunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetPhoneNumbersForAccount", ReplyAction="http://tempuri.org/ITrunkRegistration/GetPhoneNumbersForAccountResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetPhoneNumbersForAccount(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetPhoneNumbersForAccount", ReplyAction="http://tempuri.org/ITrunkRegistration/GetPhoneNumbersForAccountResponse")]
        System.IAsyncResult BeginGetPhoneNumbersForAccount(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetPhoneNumbersForAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkFaxNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkFaxNumbersResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkFaxNumbers(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkFaxNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkFaxNumbersResponse")]
        System.IAsyncResult BeginGetMyTrunkFaxNumbers(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkFaxNumbers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkPhoneNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkPhoneNumbersResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkPhoneNumbers(int trunkID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkPhoneNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkPhoneNumbersResponse")]
        System.IAsyncResult BeginGetMyTrunkPhoneNumbers(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkPhoneNumbers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkUnAuthPhoneNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkUnAuthPhoneNumbersResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkUnAuthPhoneNumbers(int trunkID, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/GetMyTrunkUnAuthPhoneNumbers", ReplyAction="http://tempuri.org/ITrunkRegistration/GetMyTrunkUnAuthPhoneNumbersResponse")]
        System.IAsyncResult BeginGetMyTrunkUnAuthPhoneNumbers(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkUnAuthPhoneNumbers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsRegIn", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsRegInResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails SaveInitialTrunkDetailsRegIn(string trunkCode, string trunkName, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, string transactionID, int recStatus, string opStatus, int noOfOutgoingCalls, int noOfIncomingCalls, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, string password, string profile, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsRegIn", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveInitialTrunkDetailsRegInResponse")]
        System.IAsyncResult BeginSaveInitialTrunkDetailsRegIn(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string password, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails EndSaveInitialTrunkDetailsRegIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/ChangeTrunkNumberUser", ReplyAction="http://tempuri.org/ITrunkRegistration/ChangeTrunkNumberUserResponse")]
        bool ChangeTrunkNumberUser(string trunkNumber, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/ChangeTrunkNumberUser", ReplyAction="http://tempuri.org/ITrunkRegistration/ChangeTrunkNumberUserResponse")]
        System.IAsyncResult BeginChangeTrunkNumberUser(string trunkNumber, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeTrunkNumberUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrunkRegistration/SaveTrunkNumberByCode", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveTrunkNumberByCodeResponse")]
        bool SaveTrunkNumberByCode(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrunkRegistration/SaveTrunkNumberByCode", ReplyAction="http://tempuri.org/ITrunkRegistration/SaveTrunkNumberByCodeResponse")]
        System.IAsyncResult BeginSaveTrunkNumberByCode(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveTrunkNumberByCode(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrunkRegistrationChannel : DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ITrunkRegistration, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTrunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTrunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveInitialTrunkDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveInitialTrunkDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTrunkByUniqueIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTrunkByUniqueIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrunkListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrunkListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssignServerToTrunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssignServerToTrunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerInfoForTrunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerInfoForTrunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerInfoForTrunkByUuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerInfoForTrunkByUuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SavePhoneNumbersForTrunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SavePhoneNumbersForTrunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPhoneNumberListForTrunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPhoneNumberListForTrunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPhoneNumbersForAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPhoneNumbersForAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyTrunkFaxNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyTrunkFaxNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyTrunkPhoneNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyTrunkPhoneNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyTrunkUnAuthPhoneNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyTrunkUnAuthPhoneNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveInitialTrunkDetailsRegInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveInitialTrunkDetailsRegInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTrunkNumberUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeTrunkNumberUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveTrunkNumberByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveTrunkNumberByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrunkRegistrationClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ITrunkRegistration>, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ITrunkRegistration {
        
        private BeginOperationDelegate onBeginDeleteTrunkDelegate;
        
        private EndOperationDelegate onEndDeleteTrunkDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTrunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveInitialTrunkDetailsDelegate;
        
        private EndOperationDelegate onEndSaveInitialTrunkDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveInitialTrunkDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTrunkByUniqueIdDelegate;
        
        private EndOperationDelegate onEndUpdateTrunkByUniqueIdDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTrunkByUniqueIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrunkListDelegate;
        
        private EndOperationDelegate onEndGetTrunkListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrunkListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssignServerToTrunkDelegate;
        
        private EndOperationDelegate onEndAssignServerToTrunkDelegate;
        
        private System.Threading.SendOrPostCallback onAssignServerToTrunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerInfoForTrunkDelegate;
        
        private EndOperationDelegate onEndGetServerInfoForTrunkDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerInfoForTrunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerInfoForTrunkByUuidDelegate;
        
        private EndOperationDelegate onEndGetServerInfoForTrunkByUuidDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerInfoForTrunkByUuidCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavePhoneNumbersForTrunkDelegate;
        
        private EndOperationDelegate onEndSavePhoneNumbersForTrunkDelegate;
        
        private System.Threading.SendOrPostCallback onSavePhoneNumbersForTrunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPhoneNumberListForTrunkDelegate;
        
        private EndOperationDelegate onEndGetPhoneNumberListForTrunkDelegate;
        
        private System.Threading.SendOrPostCallback onGetPhoneNumberListForTrunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPhoneNumbersForAccountDelegate;
        
        private EndOperationDelegate onEndGetPhoneNumbersForAccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetPhoneNumbersForAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyTrunkFaxNumbersDelegate;
        
        private EndOperationDelegate onEndGetMyTrunkFaxNumbersDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyTrunkFaxNumbersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyTrunkPhoneNumbersDelegate;
        
        private EndOperationDelegate onEndGetMyTrunkPhoneNumbersDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyTrunkPhoneNumbersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyTrunkUnAuthPhoneNumbersDelegate;
        
        private EndOperationDelegate onEndGetMyTrunkUnAuthPhoneNumbersDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyTrunkUnAuthPhoneNumbersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveInitialTrunkDetailsRegInDelegate;
        
        private EndOperationDelegate onEndSaveInitialTrunkDetailsRegInDelegate;
        
        private System.Threading.SendOrPostCallback onSaveInitialTrunkDetailsRegInCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeTrunkNumberUserDelegate;
        
        private EndOperationDelegate onEndChangeTrunkNumberUserDelegate;
        
        private System.Threading.SendOrPostCallback onChangeTrunkNumberUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveTrunkNumberByCodeDelegate;
        
        private EndOperationDelegate onEndSaveTrunkNumberByCodeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveTrunkNumberByCodeCompletedDelegate;
        
        public TrunkRegistrationClient() {
        }
        
        public TrunkRegistrationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrunkRegistrationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrunkRegistrationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrunkRegistrationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DeleteTrunkCompletedEventArgs> DeleteTrunkCompleted;
        
        public event System.EventHandler<SaveInitialTrunkDetailsCompletedEventArgs> SaveInitialTrunkDetailsCompleted;
        
        public event System.EventHandler<UpdateTrunkByUniqueIdCompletedEventArgs> UpdateTrunkByUniqueIdCompleted;
        
        public event System.EventHandler<GetTrunkListCompletedEventArgs> GetTrunkListCompleted;
        
        public event System.EventHandler<AssignServerToTrunkCompletedEventArgs> AssignServerToTrunkCompleted;
        
        public event System.EventHandler<GetServerInfoForTrunkCompletedEventArgs> GetServerInfoForTrunkCompleted;
        
        public event System.EventHandler<GetServerInfoForTrunkByUuidCompletedEventArgs> GetServerInfoForTrunkByUuidCompleted;
        
        public event System.EventHandler<SavePhoneNumbersForTrunkCompletedEventArgs> SavePhoneNumbersForTrunkCompleted;
        
        public event System.EventHandler<GetPhoneNumberListForTrunkCompletedEventArgs> GetPhoneNumberListForTrunkCompleted;
        
        public event System.EventHandler<GetPhoneNumbersForAccountCompletedEventArgs> GetPhoneNumbersForAccountCompleted;
        
        public event System.EventHandler<GetMyTrunkFaxNumbersCompletedEventArgs> GetMyTrunkFaxNumbersCompleted;
        
        public event System.EventHandler<GetMyTrunkPhoneNumbersCompletedEventArgs> GetMyTrunkPhoneNumbersCompleted;
        
        public event System.EventHandler<GetMyTrunkUnAuthPhoneNumbersCompletedEventArgs> GetMyTrunkUnAuthPhoneNumbersCompleted;
        
        public event System.EventHandler<SaveInitialTrunkDetailsRegInCompletedEventArgs> SaveInitialTrunkDetailsRegInCompleted;
        
        public event System.EventHandler<ChangeTrunkNumberUserCompletedEventArgs> ChangeTrunkNumberUserCompleted;
        
        public event System.EventHandler<SaveTrunkNumberByCodeCompletedEventArgs> SaveTrunkNumberByCodeCompleted;
        
        public bool DeleteTrunk(int trunkID, string securityToken) {
            return base.Channel.DeleteTrunk(trunkID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteTrunk(System.IAsyncResult result) {
            return base.Channel.EndDeleteTrunk(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrunk(System.IAsyncResult result) {
            bool retVal = this.EndDeleteTrunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTrunkCompleted(object state) {
            if ((this.DeleteTrunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTrunkCompleted(this, new DeleteTrunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTrunkAsync(int trunkID, string securityToken) {
            this.DeleteTrunkAsync(trunkID, securityToken, null);
        }
        
        public void DeleteTrunkAsync(int trunkID, string securityToken, object userState) {
            if ((this.onBeginDeleteTrunkDelegate == null)) {
                this.onBeginDeleteTrunkDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrunk);
            }
            if ((this.onEndDeleteTrunkDelegate == null)) {
                this.onEndDeleteTrunkDelegate = new EndOperationDelegate(this.OnEndDeleteTrunk);
            }
            if ((this.onDeleteTrunkCompletedDelegate == null)) {
                this.onDeleteTrunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTrunkCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTrunkDelegate, new object[] {
                        trunkID,
                        securityToken}, this.onEndDeleteTrunkDelegate, this.onDeleteTrunkCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails SaveInitialTrunkDetails(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken) {
            return base.Channel.SaveInitialTrunkDetails(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveInitialTrunkDetails(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginSaveInitialTrunkDetails(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails EndSaveInitialTrunkDetails(System.IAsyncResult result) {
            return base.Channel.EndSaveInitialTrunkDetails(result);
        }
        
        private System.IAsyncResult OnBeginSaveInitialTrunkDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkCode = ((string)(inValues[0]));
            string trunkName = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass)(inValues[2]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory)(inValues[4]));
            string transactionID = ((string)(inValues[5]));
            int recStatus = ((int)(inValues[6]));
            string opStatus = ((string)(inValues[7]));
            int noOfOutgoingCalls = ((int)(inValues[8]));
            int noOfIncomingCalls = ((int)(inValues[9]));
            string Operator = ((string)(inValues[10]));
            bool defaultConfEnabled = ((bool)(inValues[11]));
            string ipUrl = ((string)(inValues[12]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection)(inValues[13]));
            string username = ((string)(inValues[14]));
            string password = ((string)(inValues[15]));
            string domain = ((string)(inValues[16]));
            string profile = ((string)(inValues[17]));
            string securityToken = ((string)(inValues[18]));
            return this.BeginSaveInitialTrunkDetails(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveInitialTrunkDetails(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails retVal = this.EndSaveInitialTrunkDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveInitialTrunkDetailsCompleted(object state) {
            if ((this.SaveInitialTrunkDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveInitialTrunkDetailsCompleted(this, new SaveInitialTrunkDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveInitialTrunkDetailsAsync(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken) {
            this.SaveInitialTrunkDetailsAsync(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, null);
        }
        
        public void SaveInitialTrunkDetailsAsync(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    object userState) {
            if ((this.onBeginSaveInitialTrunkDetailsDelegate == null)) {
                this.onBeginSaveInitialTrunkDetailsDelegate = new BeginOperationDelegate(this.OnBeginSaveInitialTrunkDetails);
            }
            if ((this.onEndSaveInitialTrunkDetailsDelegate == null)) {
                this.onEndSaveInitialTrunkDetailsDelegate = new EndOperationDelegate(this.OnEndSaveInitialTrunkDetails);
            }
            if ((this.onSaveInitialTrunkDetailsCompletedDelegate == null)) {
                this.onSaveInitialTrunkDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveInitialTrunkDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveInitialTrunkDetailsDelegate, new object[] {
                        trunkCode,
                        trunkName,
                        trunkClass,
                        trunkType,
                        trunkCat,
                        transactionID,
                        recStatus,
                        opStatus,
                        noOfOutgoingCalls,
                        noOfIncomingCalls,
                        Operator,
                        defaultConfEnabled,
                        ipUrl,
                        regDir,
                        username,
                        password,
                        domain,
                        profile,
                        securityToken}, this.onEndSaveInitialTrunkDetailsDelegate, this.onSaveInitialTrunkDetailsCompletedDelegate, userState);
        }
        
        public bool UpdateTrunkByUniqueId(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken) {
            return base.Channel.UpdateTrunkByUniqueId(trunkUuid, trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTrunkByUniqueId(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateTrunkByUniqueId(trunkUuid, trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateTrunkByUniqueId(System.IAsyncResult result) {
            return base.Channel.EndUpdateTrunkByUniqueId(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTrunkByUniqueId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkUuid = ((string)(inValues[0]));
            string trunkCode = ((string)(inValues[1]));
            string trunkName = ((string)(inValues[2]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType)(inValues[4]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory)(inValues[5]));
            string transactionID = ((string)(inValues[6]));
            int recStatus = ((int)(inValues[7]));
            string opStatus = ((string)(inValues[8]));
            int noOfOutgoingCalls = ((int)(inValues[9]));
            int noOfIncomingCalls = ((int)(inValues[10]));
            string Operator = ((string)(inValues[11]));
            bool defaultConfEnabled = ((bool)(inValues[12]));
            string ipUrl = ((string)(inValues[13]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection)(inValues[14]));
            string username = ((string)(inValues[15]));
            string password = ((string)(inValues[16]));
            string domain = ((string)(inValues[17]));
            string profile = ((string)(inValues[18]));
            string securityToken = ((string)(inValues[19]));
            return this.BeginUpdateTrunkByUniqueId(trunkUuid, trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateTrunkByUniqueId(System.IAsyncResult result) {
            bool retVal = this.EndUpdateTrunkByUniqueId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTrunkByUniqueIdCompleted(object state) {
            if ((this.UpdateTrunkByUniqueIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTrunkByUniqueIdCompleted(this, new UpdateTrunkByUniqueIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTrunkByUniqueIdAsync(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken) {
            this.UpdateTrunkByUniqueIdAsync(trunkUuid, trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, Operator, defaultConfEnabled, ipUrl, regDir, username, password, domain, profile, securityToken, null);
        }
        
        public void UpdateTrunkByUniqueIdAsync(
                    string trunkUuid, 
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    string Operator, 
                    bool defaultConfEnabled, 
                    string ipUrl, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string username, 
                    string password, 
                    string domain, 
                    string profile, 
                    string securityToken, 
                    object userState) {
            if ((this.onBeginUpdateTrunkByUniqueIdDelegate == null)) {
                this.onBeginUpdateTrunkByUniqueIdDelegate = new BeginOperationDelegate(this.OnBeginUpdateTrunkByUniqueId);
            }
            if ((this.onEndUpdateTrunkByUniqueIdDelegate == null)) {
                this.onEndUpdateTrunkByUniqueIdDelegate = new EndOperationDelegate(this.OnEndUpdateTrunkByUniqueId);
            }
            if ((this.onUpdateTrunkByUniqueIdCompletedDelegate == null)) {
                this.onUpdateTrunkByUniqueIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTrunkByUniqueIdCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTrunkByUniqueIdDelegate, new object[] {
                        trunkUuid,
                        trunkCode,
                        trunkName,
                        trunkClass,
                        trunkType,
                        trunkCat,
                        transactionID,
                        recStatus,
                        opStatus,
                        noOfOutgoingCalls,
                        noOfIncomingCalls,
                        Operator,
                        defaultConfEnabled,
                        ipUrl,
                        regDir,
                        username,
                        password,
                        domain,
                        profile,
                        securityToken}, this.onEndUpdateTrunkByUniqueIdDelegate, this.onUpdateTrunkByUniqueIdCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] GetTrunkList(string securityToken) {
            return base.Channel.GetTrunkList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrunkList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrunkList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] EndGetTrunkList(System.IAsyncResult result) {
            return base.Channel.EndGetTrunkList(result);
        }
        
        private System.IAsyncResult OnBeginGetTrunkList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetTrunkList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetTrunkList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkDetails[] retVal = this.EndGetTrunkList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrunkListCompleted(object state) {
            if ((this.GetTrunkListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrunkListCompleted(this, new GetTrunkListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrunkListAsync(string securityToken) {
            this.GetTrunkListAsync(securityToken, null);
        }
        
        public void GetTrunkListAsync(string securityToken, object userState) {
            if ((this.onBeginGetTrunkListDelegate == null)) {
                this.onBeginGetTrunkListDelegate = new BeginOperationDelegate(this.OnBeginGetTrunkList);
            }
            if ((this.onEndGetTrunkListDelegate == null)) {
                this.onEndGetTrunkListDelegate = new EndOperationDelegate(this.OnEndGetTrunkList);
            }
            if ((this.onGetTrunkListCompletedDelegate == null)) {
                this.onGetTrunkListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrunkListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrunkListDelegate, new object[] {
                        securityToken}, this.onEndGetTrunkListDelegate, this.onGetTrunkListCompletedDelegate, userState);
        }
        
        public bool AssignServerToTrunk(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type) {
            return base.Channel.AssignServerToTrunk(trGuid, trunkID, serverOrZoneID, securityToken, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssignServerToTrunk(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssignServerToTrunk(trGuid, trunkID, serverOrZoneID, securityToken, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAssignServerToTrunk(System.IAsyncResult result) {
            return base.Channel.EndAssignServerToTrunk(result);
        }
        
        private System.IAsyncResult OnBeginAssignServerToTrunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trGuid = ((string)(inValues[0]));
            int trunkID = ((int)(inValues[1]));
            int serverOrZoneID = ((int)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection)(inValues[4]));
            return this.BeginAssignServerToTrunk(trGuid, trunkID, serverOrZoneID, securityToken, type, callback, asyncState);
        }
        
        private object[] OnEndAssignServerToTrunk(System.IAsyncResult result) {
            bool retVal = this.EndAssignServerToTrunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssignServerToTrunkCompleted(object state) {
            if ((this.AssignServerToTrunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssignServerToTrunkCompleted(this, new AssignServerToTrunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssignServerToTrunkAsync(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type) {
            this.AssignServerToTrunkAsync(trGuid, trunkID, serverOrZoneID, securityToken, type, null);
        }
        
        public void AssignServerToTrunkAsync(string trGuid, int trunkID, int serverOrZoneID, string securityToken, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkConnection type, object userState) {
            if ((this.onBeginAssignServerToTrunkDelegate == null)) {
                this.onBeginAssignServerToTrunkDelegate = new BeginOperationDelegate(this.OnBeginAssignServerToTrunk);
            }
            if ((this.onEndAssignServerToTrunkDelegate == null)) {
                this.onEndAssignServerToTrunkDelegate = new EndOperationDelegate(this.OnEndAssignServerToTrunk);
            }
            if ((this.onAssignServerToTrunkCompletedDelegate == null)) {
                this.onAssignServerToTrunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssignServerToTrunkCompleted);
            }
            base.InvokeAsync(this.onBeginAssignServerToTrunkDelegate, new object[] {
                        trGuid,
                        trunkID,
                        serverOrZoneID,
                        securityToken,
                        type}, this.onEndAssignServerToTrunkDelegate, this.onAssignServerToTrunkCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk GetServerInfoForTrunk(int trunkID, string securityToken) {
            return base.Channel.GetServerInfoForTrunk(trunkID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerInfoForTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerInfoForTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk EndGetServerInfoForTrunk(System.IAsyncResult result) {
            return base.Channel.EndGetServerInfoForTrunk(result);
        }
        
        private System.IAsyncResult OnBeginGetServerInfoForTrunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetServerInfoForTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetServerInfoForTrunk(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk retVal = this.EndGetServerInfoForTrunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerInfoForTrunkCompleted(object state) {
            if ((this.GetServerInfoForTrunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerInfoForTrunkCompleted(this, new GetServerInfoForTrunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerInfoForTrunkAsync(int trunkID, string securityToken) {
            this.GetServerInfoForTrunkAsync(trunkID, securityToken, null);
        }
        
        public void GetServerInfoForTrunkAsync(int trunkID, string securityToken, object userState) {
            if ((this.onBeginGetServerInfoForTrunkDelegate == null)) {
                this.onBeginGetServerInfoForTrunkDelegate = new BeginOperationDelegate(this.OnBeginGetServerInfoForTrunk);
            }
            if ((this.onEndGetServerInfoForTrunkDelegate == null)) {
                this.onEndGetServerInfoForTrunkDelegate = new EndOperationDelegate(this.OnEndGetServerInfoForTrunk);
            }
            if ((this.onGetServerInfoForTrunkCompletedDelegate == null)) {
                this.onGetServerInfoForTrunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerInfoForTrunkCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerInfoForTrunkDelegate, new object[] {
                        trunkID,
                        securityToken}, this.onEndGetServerInfoForTrunkDelegate, this.onGetServerInfoForTrunkCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk GetServerInfoForTrunkByUuid(string trunkUuid, string securityToken) {
            return base.Channel.GetServerInfoForTrunkByUuid(trunkUuid, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerInfoForTrunkByUuid(string trunkUuid, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerInfoForTrunkByUuid(trunkUuid, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk EndGetServerInfoForTrunkByUuid(System.IAsyncResult result) {
            return base.Channel.EndGetServerInfoForTrunkByUuid(result);
        }
        
        private System.IAsyncResult OnBeginGetServerInfoForTrunkByUuid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkUuid = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetServerInfoForTrunkByUuid(trunkUuid, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetServerInfoForTrunkByUuid(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ServerInfoForTrunk retVal = this.EndGetServerInfoForTrunkByUuid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerInfoForTrunkByUuidCompleted(object state) {
            if ((this.GetServerInfoForTrunkByUuidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerInfoForTrunkByUuidCompleted(this, new GetServerInfoForTrunkByUuidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerInfoForTrunkByUuidAsync(string trunkUuid, string securityToken) {
            this.GetServerInfoForTrunkByUuidAsync(trunkUuid, securityToken, null);
        }
        
        public void GetServerInfoForTrunkByUuidAsync(string trunkUuid, string securityToken, object userState) {
            if ((this.onBeginGetServerInfoForTrunkByUuidDelegate == null)) {
                this.onBeginGetServerInfoForTrunkByUuidDelegate = new BeginOperationDelegate(this.OnBeginGetServerInfoForTrunkByUuid);
            }
            if ((this.onEndGetServerInfoForTrunkByUuidDelegate == null)) {
                this.onEndGetServerInfoForTrunkByUuidDelegate = new EndOperationDelegate(this.OnEndGetServerInfoForTrunkByUuid);
            }
            if ((this.onGetServerInfoForTrunkByUuidCompletedDelegate == null)) {
                this.onGetServerInfoForTrunkByUuidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerInfoForTrunkByUuidCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerInfoForTrunkByUuidDelegate, new object[] {
                        trunkUuid,
                        securityToken}, this.onEndGetServerInfoForTrunkByUuidDelegate, this.onGetServerInfoForTrunkByUuidCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] SavePhoneNumbersForTrunk(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken) {
            return base.Channel.SavePhoneNumbersForTrunk(trunkID, myNumbers, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSavePhoneNumbersForTrunk(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavePhoneNumbersForTrunk(trunkID, myNumbers, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndSavePhoneNumbersForTrunk(System.IAsyncResult result) {
            return base.Channel.EndSavePhoneNumbersForTrunk(result);
        }
        
        private System.IAsyncResult OnBeginSavePhoneNumbersForTrunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[])(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSavePhoneNumbersForTrunk(trunkID, myNumbers, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSavePhoneNumbersForTrunk(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndSavePhoneNumbersForTrunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSavePhoneNumbersForTrunkCompleted(object state) {
            if ((this.SavePhoneNumbersForTrunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavePhoneNumbersForTrunkCompleted(this, new SavePhoneNumbersForTrunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavePhoneNumbersForTrunkAsync(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken) {
            this.SavePhoneNumbersForTrunkAsync(trunkID, myNumbers, securityToken, null);
        }
        
        public void SavePhoneNumbersForTrunkAsync(int trunkID, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] myNumbers, string securityToken, object userState) {
            if ((this.onBeginSavePhoneNumbersForTrunkDelegate == null)) {
                this.onBeginSavePhoneNumbersForTrunkDelegate = new BeginOperationDelegate(this.OnBeginSavePhoneNumbersForTrunk);
            }
            if ((this.onEndSavePhoneNumbersForTrunkDelegate == null)) {
                this.onEndSavePhoneNumbersForTrunkDelegate = new EndOperationDelegate(this.OnEndSavePhoneNumbersForTrunk);
            }
            if ((this.onSavePhoneNumbersForTrunkCompletedDelegate == null)) {
                this.onSavePhoneNumbersForTrunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavePhoneNumbersForTrunkCompleted);
            }
            base.InvokeAsync(this.onBeginSavePhoneNumbersForTrunkDelegate, new object[] {
                        trunkID,
                        myNumbers,
                        securityToken}, this.onEndSavePhoneNumbersForTrunkDelegate, this.onSavePhoneNumbersForTrunkCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetPhoneNumberListForTrunk(int trunkID, string securityToken) {
            return base.Channel.GetPhoneNumberListForTrunk(trunkID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPhoneNumberListForTrunk(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPhoneNumberListForTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetPhoneNumberListForTrunk(System.IAsyncResult result) {
            return base.Channel.EndGetPhoneNumberListForTrunk(result);
        }
        
        private System.IAsyncResult OnBeginGetPhoneNumberListForTrunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetPhoneNumberListForTrunk(trunkID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetPhoneNumberListForTrunk(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndGetPhoneNumberListForTrunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPhoneNumberListForTrunkCompleted(object state) {
            if ((this.GetPhoneNumberListForTrunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPhoneNumberListForTrunkCompleted(this, new GetPhoneNumberListForTrunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPhoneNumberListForTrunkAsync(int trunkID, string securityToken) {
            this.GetPhoneNumberListForTrunkAsync(trunkID, securityToken, null);
        }
        
        public void GetPhoneNumberListForTrunkAsync(int trunkID, string securityToken, object userState) {
            if ((this.onBeginGetPhoneNumberListForTrunkDelegate == null)) {
                this.onBeginGetPhoneNumberListForTrunkDelegate = new BeginOperationDelegate(this.OnBeginGetPhoneNumberListForTrunk);
            }
            if ((this.onEndGetPhoneNumberListForTrunkDelegate == null)) {
                this.onEndGetPhoneNumberListForTrunkDelegate = new EndOperationDelegate(this.OnEndGetPhoneNumberListForTrunk);
            }
            if ((this.onGetPhoneNumberListForTrunkCompletedDelegate == null)) {
                this.onGetPhoneNumberListForTrunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhoneNumberListForTrunkCompleted);
            }
            base.InvokeAsync(this.onBeginGetPhoneNumberListForTrunkDelegate, new object[] {
                        trunkID,
                        securityToken}, this.onEndGetPhoneNumberListForTrunkDelegate, this.onGetPhoneNumberListForTrunkCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetPhoneNumbersForAccount(string securityToken) {
            return base.Channel.GetPhoneNumbersForAccount(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPhoneNumbersForAccount(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPhoneNumbersForAccount(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetPhoneNumbersForAccount(System.IAsyncResult result) {
            return base.Channel.EndGetPhoneNumbersForAccount(result);
        }
        
        private System.IAsyncResult OnBeginGetPhoneNumbersForAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetPhoneNumbersForAccount(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetPhoneNumbersForAccount(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndGetPhoneNumbersForAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPhoneNumbersForAccountCompleted(object state) {
            if ((this.GetPhoneNumbersForAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPhoneNumbersForAccountCompleted(this, new GetPhoneNumbersForAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPhoneNumbersForAccountAsync(string securityToken) {
            this.GetPhoneNumbersForAccountAsync(securityToken, null);
        }
        
        public void GetPhoneNumbersForAccountAsync(string securityToken, object userState) {
            if ((this.onBeginGetPhoneNumbersForAccountDelegate == null)) {
                this.onBeginGetPhoneNumbersForAccountDelegate = new BeginOperationDelegate(this.OnBeginGetPhoneNumbersForAccount);
            }
            if ((this.onEndGetPhoneNumbersForAccountDelegate == null)) {
                this.onEndGetPhoneNumbersForAccountDelegate = new EndOperationDelegate(this.OnEndGetPhoneNumbersForAccount);
            }
            if ((this.onGetPhoneNumbersForAccountCompletedDelegate == null)) {
                this.onGetPhoneNumbersForAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhoneNumbersForAccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetPhoneNumbersForAccountDelegate, new object[] {
                        securityToken}, this.onEndGetPhoneNumbersForAccountDelegate, this.onGetPhoneNumbersForAccountCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkFaxNumbers(string securityToken) {
            return base.Channel.GetMyTrunkFaxNumbers(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyTrunkFaxNumbers(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyTrunkFaxNumbers(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkFaxNumbers(System.IAsyncResult result) {
            return base.Channel.EndGetMyTrunkFaxNumbers(result);
        }
        
        private System.IAsyncResult OnBeginGetMyTrunkFaxNumbers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetMyTrunkFaxNumbers(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetMyTrunkFaxNumbers(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndGetMyTrunkFaxNumbers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyTrunkFaxNumbersCompleted(object state) {
            if ((this.GetMyTrunkFaxNumbersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyTrunkFaxNumbersCompleted(this, new GetMyTrunkFaxNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyTrunkFaxNumbersAsync(string securityToken) {
            this.GetMyTrunkFaxNumbersAsync(securityToken, null);
        }
        
        public void GetMyTrunkFaxNumbersAsync(string securityToken, object userState) {
            if ((this.onBeginGetMyTrunkFaxNumbersDelegate == null)) {
                this.onBeginGetMyTrunkFaxNumbersDelegate = new BeginOperationDelegate(this.OnBeginGetMyTrunkFaxNumbers);
            }
            if ((this.onEndGetMyTrunkFaxNumbersDelegate == null)) {
                this.onEndGetMyTrunkFaxNumbersDelegate = new EndOperationDelegate(this.OnEndGetMyTrunkFaxNumbers);
            }
            if ((this.onGetMyTrunkFaxNumbersCompletedDelegate == null)) {
                this.onGetMyTrunkFaxNumbersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyTrunkFaxNumbersCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyTrunkFaxNumbersDelegate, new object[] {
                        securityToken}, this.onEndGetMyTrunkFaxNumbersDelegate, this.onGetMyTrunkFaxNumbersCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkPhoneNumbers(int trunkID, string securityToken) {
            return base.Channel.GetMyTrunkPhoneNumbers(trunkID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyTrunkPhoneNumbers(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyTrunkPhoneNumbers(trunkID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkPhoneNumbers(System.IAsyncResult result) {
            return base.Channel.EndGetMyTrunkPhoneNumbers(result);
        }
        
        private System.IAsyncResult OnBeginGetMyTrunkPhoneNumbers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetMyTrunkPhoneNumbers(trunkID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetMyTrunkPhoneNumbers(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndGetMyTrunkPhoneNumbers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyTrunkPhoneNumbersCompleted(object state) {
            if ((this.GetMyTrunkPhoneNumbersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyTrunkPhoneNumbersCompleted(this, new GetMyTrunkPhoneNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyTrunkPhoneNumbersAsync(int trunkID, string securityToken) {
            this.GetMyTrunkPhoneNumbersAsync(trunkID, securityToken, null);
        }
        
        public void GetMyTrunkPhoneNumbersAsync(int trunkID, string securityToken, object userState) {
            if ((this.onBeginGetMyTrunkPhoneNumbersDelegate == null)) {
                this.onBeginGetMyTrunkPhoneNumbersDelegate = new BeginOperationDelegate(this.OnBeginGetMyTrunkPhoneNumbers);
            }
            if ((this.onEndGetMyTrunkPhoneNumbersDelegate == null)) {
                this.onEndGetMyTrunkPhoneNumbersDelegate = new EndOperationDelegate(this.OnEndGetMyTrunkPhoneNumbers);
            }
            if ((this.onGetMyTrunkPhoneNumbersCompletedDelegate == null)) {
                this.onGetMyTrunkPhoneNumbersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyTrunkPhoneNumbersCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyTrunkPhoneNumbersDelegate, new object[] {
                        trunkID,
                        securityToken}, this.onEndGetMyTrunkPhoneNumbersDelegate, this.onGetMyTrunkPhoneNumbersCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] GetMyTrunkUnAuthPhoneNumbers(int trunkID, string securityToken) {
            return base.Channel.GetMyTrunkUnAuthPhoneNumbers(trunkID, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyTrunkUnAuthPhoneNumbers(int trunkID, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyTrunkUnAuthPhoneNumbers(trunkID, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] EndGetMyTrunkUnAuthPhoneNumbers(System.IAsyncResult result) {
            return base.Channel.EndGetMyTrunkUnAuthPhoneNumbers(result);
        }
        
        private System.IAsyncResult OnBeginGetMyTrunkUnAuthPhoneNumbers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trunkID = ((int)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetMyTrunkUnAuthPhoneNumbers(trunkID, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetMyTrunkUnAuthPhoneNumbers(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers[] retVal = this.EndGetMyTrunkUnAuthPhoneNumbers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyTrunkUnAuthPhoneNumbersCompleted(object state) {
            if ((this.GetMyTrunkUnAuthPhoneNumbersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyTrunkUnAuthPhoneNumbersCompleted(this, new GetMyTrunkUnAuthPhoneNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyTrunkUnAuthPhoneNumbersAsync(int trunkID, string securityToken) {
            this.GetMyTrunkUnAuthPhoneNumbersAsync(trunkID, securityToken, null);
        }
        
        public void GetMyTrunkUnAuthPhoneNumbersAsync(int trunkID, string securityToken, object userState) {
            if ((this.onBeginGetMyTrunkUnAuthPhoneNumbersDelegate == null)) {
                this.onBeginGetMyTrunkUnAuthPhoneNumbersDelegate = new BeginOperationDelegate(this.OnBeginGetMyTrunkUnAuthPhoneNumbers);
            }
            if ((this.onEndGetMyTrunkUnAuthPhoneNumbersDelegate == null)) {
                this.onEndGetMyTrunkUnAuthPhoneNumbersDelegate = new EndOperationDelegate(this.OnEndGetMyTrunkUnAuthPhoneNumbers);
            }
            if ((this.onGetMyTrunkUnAuthPhoneNumbersCompletedDelegate == null)) {
                this.onGetMyTrunkUnAuthPhoneNumbersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyTrunkUnAuthPhoneNumbersCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyTrunkUnAuthPhoneNumbersDelegate, new object[] {
                        trunkID,
                        securityToken}, this.onEndGetMyTrunkUnAuthPhoneNumbersDelegate, this.onGetMyTrunkUnAuthPhoneNumbersCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails SaveInitialTrunkDetailsRegIn(string trunkCode, string trunkName, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, string transactionID, int recStatus, string opStatus, int noOfOutgoingCalls, int noOfIncomingCalls, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, string password, string profile, string securityToken) {
            return base.Channel.SaveInitialTrunkDetailsRegIn(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, regDir, password, profile, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveInitialTrunkDetailsRegIn(
                    string trunkCode, 
                    string trunkName, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, 
                    string transactionID, 
                    int recStatus, 
                    string opStatus, 
                    int noOfOutgoingCalls, 
                    int noOfIncomingCalls, 
                    DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, 
                    string password, 
                    string profile, 
                    string securityToken, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginSaveInitialTrunkDetailsRegIn(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, regDir, password, profile, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails EndSaveInitialTrunkDetailsRegIn(System.IAsyncResult result) {
            return base.Channel.EndSaveInitialTrunkDetailsRegIn(result);
        }
        
        private System.IAsyncResult OnBeginSaveInitialTrunkDetailsRegIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkCode = ((string)(inValues[0]));
            string trunkName = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass)(inValues[2]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory)(inValues[4]));
            string transactionID = ((string)(inValues[5]));
            int recStatus = ((int)(inValues[6]));
            string opStatus = ((string)(inValues[7]));
            int noOfOutgoingCalls = ((int)(inValues[8]));
            int noOfIncomingCalls = ((int)(inValues[9]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection)(inValues[10]));
            string password = ((string)(inValues[11]));
            string profile = ((string)(inValues[12]));
            string securityToken = ((string)(inValues[13]));
            return this.BeginSaveInitialTrunkDetailsRegIn(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, regDir, password, profile, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveInitialTrunkDetailsRegIn(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.AutoGeneratedAccDetails retVal = this.EndSaveInitialTrunkDetailsRegIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveInitialTrunkDetailsRegInCompleted(object state) {
            if ((this.SaveInitialTrunkDetailsRegInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveInitialTrunkDetailsRegInCompleted(this, new SaveInitialTrunkDetailsRegInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveInitialTrunkDetailsRegInAsync(string trunkCode, string trunkName, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, string transactionID, int recStatus, string opStatus, int noOfOutgoingCalls, int noOfIncomingCalls, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, string password, string profile, string securityToken) {
            this.SaveInitialTrunkDetailsRegInAsync(trunkCode, trunkName, trunkClass, trunkType, trunkCat, transactionID, recStatus, opStatus, noOfOutgoingCalls, noOfIncomingCalls, regDir, password, profile, securityToken, null);
        }
        
        public void SaveInitialTrunkDetailsRegInAsync(string trunkCode, string trunkName, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkClass trunkClass, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkType trunkType, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkCategory trunkCat, string transactionID, int recStatus, string opStatus, int noOfOutgoingCalls, int noOfIncomingCalls, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.RegistrationDirection regDir, string password, string profile, string securityToken, object userState) {
            if ((this.onBeginSaveInitialTrunkDetailsRegInDelegate == null)) {
                this.onBeginSaveInitialTrunkDetailsRegInDelegate = new BeginOperationDelegate(this.OnBeginSaveInitialTrunkDetailsRegIn);
            }
            if ((this.onEndSaveInitialTrunkDetailsRegInDelegate == null)) {
                this.onEndSaveInitialTrunkDetailsRegInDelegate = new EndOperationDelegate(this.OnEndSaveInitialTrunkDetailsRegIn);
            }
            if ((this.onSaveInitialTrunkDetailsRegInCompletedDelegate == null)) {
                this.onSaveInitialTrunkDetailsRegInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveInitialTrunkDetailsRegInCompleted);
            }
            base.InvokeAsync(this.onBeginSaveInitialTrunkDetailsRegInDelegate, new object[] {
                        trunkCode,
                        trunkName,
                        trunkClass,
                        trunkType,
                        trunkCat,
                        transactionID,
                        recStatus,
                        opStatus,
                        noOfOutgoingCalls,
                        noOfIncomingCalls,
                        regDir,
                        password,
                        profile,
                        securityToken}, this.onEndSaveInitialTrunkDetailsRegInDelegate, this.onSaveInitialTrunkDetailsRegInCompletedDelegate, userState);
        }
        
        public bool ChangeTrunkNumberUser(string trunkNumber, string securityToken) {
            return base.Channel.ChangeTrunkNumberUser(trunkNumber, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeTrunkNumberUser(string trunkNumber, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeTrunkNumberUser(trunkNumber, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangeTrunkNumberUser(System.IAsyncResult result) {
            return base.Channel.EndChangeTrunkNumberUser(result);
        }
        
        private System.IAsyncResult OnBeginChangeTrunkNumberUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkNumber = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginChangeTrunkNumberUser(trunkNumber, securityToken, callback, asyncState);
        }
        
        private object[] OnEndChangeTrunkNumberUser(System.IAsyncResult result) {
            bool retVal = this.EndChangeTrunkNumberUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeTrunkNumberUserCompleted(object state) {
            if ((this.ChangeTrunkNumberUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeTrunkNumberUserCompleted(this, new ChangeTrunkNumberUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeTrunkNumberUserAsync(string trunkNumber, string securityToken) {
            this.ChangeTrunkNumberUserAsync(trunkNumber, securityToken, null);
        }
        
        public void ChangeTrunkNumberUserAsync(string trunkNumber, string securityToken, object userState) {
            if ((this.onBeginChangeTrunkNumberUserDelegate == null)) {
                this.onBeginChangeTrunkNumberUserDelegate = new BeginOperationDelegate(this.OnBeginChangeTrunkNumberUser);
            }
            if ((this.onEndChangeTrunkNumberUserDelegate == null)) {
                this.onEndChangeTrunkNumberUserDelegate = new EndOperationDelegate(this.OnEndChangeTrunkNumberUser);
            }
            if ((this.onChangeTrunkNumberUserCompletedDelegate == null)) {
                this.onChangeTrunkNumberUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeTrunkNumberUserCompleted);
            }
            base.InvokeAsync(this.onBeginChangeTrunkNumberUserDelegate, new object[] {
                        trunkNumber,
                        securityToken}, this.onEndChangeTrunkNumberUserDelegate, this.onChangeTrunkNumberUserCompletedDelegate, userState);
        }
        
        public bool SaveTrunkNumberByCode(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken) {
            return base.Channel.SaveTrunkNumberByCode(trunkCode, trNumberInfo, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveTrunkNumberByCode(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveTrunkNumberByCode(trunkCode, trNumberInfo, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveTrunkNumberByCode(System.IAsyncResult result) {
            return base.Channel.EndSaveTrunkNumberByCode(result);
        }
        
        private System.IAsyncResult OnBeginSaveTrunkNumberByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkCode = ((string)(inValues[0]));
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSaveTrunkNumberByCode(trunkCode, trNumberInfo, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSaveTrunkNumberByCode(System.IAsyncResult result) {
            bool retVal = this.EndSaveTrunkNumberByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveTrunkNumberByCodeCompleted(object state) {
            if ((this.SaveTrunkNumberByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveTrunkNumberByCodeCompleted(this, new SaveTrunkNumberByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveTrunkNumberByCodeAsync(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken) {
            this.SaveTrunkNumberByCodeAsync(trunkCode, trNumberInfo, securityToken, null);
        }
        
        public void SaveTrunkNumberByCodeAsync(string trunkCode, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.TrunkPhoneNumbers trNumberInfo, string securityToken, object userState) {
            if ((this.onBeginSaveTrunkNumberByCodeDelegate == null)) {
                this.onBeginSaveTrunkNumberByCodeDelegate = new BeginOperationDelegate(this.OnBeginSaveTrunkNumberByCode);
            }
            if ((this.onEndSaveTrunkNumberByCodeDelegate == null)) {
                this.onEndSaveTrunkNumberByCodeDelegate = new EndOperationDelegate(this.OnEndSaveTrunkNumberByCode);
            }
            if ((this.onSaveTrunkNumberByCodeCompletedDelegate == null)) {
                this.onSaveTrunkNumberByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveTrunkNumberByCodeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveTrunkNumberByCodeDelegate, new object[] {
                        trunkCode,
                        trNumberInfo,
                        securityToken}, this.onEndSaveTrunkNumberByCodeDelegate, this.onSaveTrunkNumberByCodeCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefDuoMainConfigService.IConference")]
    public interface IConference {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/GetConferenceList", ReplyAction="http://tempuri.org/IConference/GetConferenceListResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] GetConferenceList(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/GetConferenceList", ReplyAction="http://tempuri.org/IConference/GetConferenceListResponse")]
        System.IAsyncResult BeginGetConferenceList(string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] EndGetConferenceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/GetConferenceUsers", ReplyAction="http://tempuri.org/IConference/GetConferenceUsersResponse")]
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] GetConferenceUsers(string roomName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/GetConferenceUsers", ReplyAction="http://tempuri.org/IConference/GetConferenceUsersResponse")]
        System.IAsyncResult BeginGetConferenceUsers(string roomName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] EndGetConferenceUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/AddOrUpdateConference", ReplyAction="http://tempuri.org/IConference/AddOrUpdateConferenceResponse")]
        bool AddOrUpdateConference(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/AddOrUpdateConference", ReplyAction="http://tempuri.org/IConference/AddOrUpdateConferenceResponse")]
        System.IAsyncResult BeginAddOrUpdateConference(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndAddOrUpdateConference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/DeleteConferenceRoom", ReplyAction="http://tempuri.org/IConference/DeleteConferenceRoomResponse")]
        bool DeleteConferenceRoom(string roomName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/DeleteConferenceRoom", ReplyAction="http://tempuri.org/IConference/DeleteConferenceRoomResponse")]
        System.IAsyncResult BeginDeleteConferenceRoom(string roomName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteConferenceRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/AddOrUpdateConferenceMember", ReplyAction="http://tempuri.org/IConference/AddOrUpdateConferenceMemberResponse")]
        bool AddOrUpdateConferenceMember(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/AddOrUpdateConferenceMember", ReplyAction="http://tempuri.org/IConference/AddOrUpdateConferenceMemberResponse")]
        System.IAsyncResult BeginAddOrUpdateConferenceMember(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndAddOrUpdateConferenceMember(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/DeleteConferenceMember", ReplyAction="http://tempuri.org/IConference/DeleteConferenceMemberResponse")]
        bool DeleteConferenceMember(string userName, string roomName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/DeleteConferenceMember", ReplyAction="http://tempuri.org/IConference/DeleteConferenceMemberResponse")]
        System.IAsyncResult BeginDeleteConferenceMember(string userName, string roomName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteConferenceMember(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConferenceChannel : DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.IConference, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConferenceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConferenceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConferenceUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConferenceUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrUpdateConferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrUpdateConferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteConferenceRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteConferenceRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrUpdateConferenceMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrUpdateConferenceMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteConferenceMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteConferenceMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.IConference>, DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.IConference {
        
        private BeginOperationDelegate onBeginGetConferenceListDelegate;
        
        private EndOperationDelegate onEndGetConferenceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetConferenceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConferenceUsersDelegate;
        
        private EndOperationDelegate onEndGetConferenceUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetConferenceUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrUpdateConferenceDelegate;
        
        private EndOperationDelegate onEndAddOrUpdateConferenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrUpdateConferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteConferenceRoomDelegate;
        
        private EndOperationDelegate onEndDeleteConferenceRoomDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteConferenceRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrUpdateConferenceMemberDelegate;
        
        private EndOperationDelegate onEndAddOrUpdateConferenceMemberDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrUpdateConferenceMemberCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteConferenceMemberDelegate;
        
        private EndOperationDelegate onEndDeleteConferenceMemberDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteConferenceMemberCompletedDelegate;
        
        public ConferenceClient() {
        }
        
        public ConferenceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetConferenceListCompletedEventArgs> GetConferenceListCompleted;
        
        public event System.EventHandler<GetConferenceUsersCompletedEventArgs> GetConferenceUsersCompleted;
        
        public event System.EventHandler<AddOrUpdateConferenceCompletedEventArgs> AddOrUpdateConferenceCompleted;
        
        public event System.EventHandler<DeleteConferenceRoomCompletedEventArgs> DeleteConferenceRoomCompleted;
        
        public event System.EventHandler<AddOrUpdateConferenceMemberCompletedEventArgs> AddOrUpdateConferenceMemberCompleted;
        
        public event System.EventHandler<DeleteConferenceMemberCompletedEventArgs> DeleteConferenceMemberCompleted;
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] GetConferenceList(string securityToken) {
            return base.Channel.GetConferenceList(securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConferenceList(string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConferenceList(securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] EndGetConferenceList(System.IAsyncResult result) {
            return base.Channel.EndGetConferenceList(result);
        }
        
        private System.IAsyncResult OnBeginGetConferenceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            return this.BeginGetConferenceList(securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetConferenceList(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo[] retVal = this.EndGetConferenceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConferenceListCompleted(object state) {
            if ((this.GetConferenceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConferenceListCompleted(this, new GetConferenceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConferenceListAsync(string securityToken) {
            this.GetConferenceListAsync(securityToken, null);
        }
        
        public void GetConferenceListAsync(string securityToken, object userState) {
            if ((this.onBeginGetConferenceListDelegate == null)) {
                this.onBeginGetConferenceListDelegate = new BeginOperationDelegate(this.OnBeginGetConferenceList);
            }
            if ((this.onEndGetConferenceListDelegate == null)) {
                this.onEndGetConferenceListDelegate = new EndOperationDelegate(this.OnEndGetConferenceList);
            }
            if ((this.onGetConferenceListCompletedDelegate == null)) {
                this.onGetConferenceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConferenceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetConferenceListDelegate, new object[] {
                        securityToken}, this.onEndGetConferenceListDelegate, this.onGetConferenceListCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] GetConferenceUsers(string roomName, string securityToken) {
            return base.Channel.GetConferenceUsers(roomName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConferenceUsers(string roomName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConferenceUsers(roomName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] EndGetConferenceUsers(System.IAsyncResult result) {
            return base.Channel.EndGetConferenceUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetConferenceUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginGetConferenceUsers(roomName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndGetConferenceUsers(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser[] retVal = this.EndGetConferenceUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConferenceUsersCompleted(object state) {
            if ((this.GetConferenceUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConferenceUsersCompleted(this, new GetConferenceUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConferenceUsersAsync(string roomName, string securityToken) {
            this.GetConferenceUsersAsync(roomName, securityToken, null);
        }
        
        public void GetConferenceUsersAsync(string roomName, string securityToken, object userState) {
            if ((this.onBeginGetConferenceUsersDelegate == null)) {
                this.onBeginGetConferenceUsersDelegate = new BeginOperationDelegate(this.OnBeginGetConferenceUsers);
            }
            if ((this.onEndGetConferenceUsersDelegate == null)) {
                this.onEndGetConferenceUsersDelegate = new EndOperationDelegate(this.OnEndGetConferenceUsers);
            }
            if ((this.onGetConferenceUsersCompletedDelegate == null)) {
                this.onGetConferenceUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConferenceUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetConferenceUsersDelegate, new object[] {
                        roomName,
                        securityToken}, this.onEndGetConferenceUsersDelegate, this.onGetConferenceUsersCompletedDelegate, userState);
        }
        
        public bool AddOrUpdateConference(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken) {
            return base.Channel.AddOrUpdateConference(confInfo, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddOrUpdateConference(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrUpdateConference(confInfo, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddOrUpdateConference(System.IAsyncResult result) {
            return base.Channel.EndAddOrUpdateConference(result);
        }
        
        private System.IAsyncResult OnBeginAddOrUpdateConference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginAddOrUpdateConference(confInfo, securityToken, callback, asyncState);
        }
        
        private object[] OnEndAddOrUpdateConference(System.IAsyncResult result) {
            bool retVal = this.EndAddOrUpdateConference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrUpdateConferenceCompleted(object state) {
            if ((this.AddOrUpdateConferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrUpdateConferenceCompleted(this, new AddOrUpdateConferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrUpdateConferenceAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken) {
            this.AddOrUpdateConferenceAsync(confInfo, securityToken, null);
        }
        
        public void AddOrUpdateConferenceAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceInfo confInfo, string securityToken, object userState) {
            if ((this.onBeginAddOrUpdateConferenceDelegate == null)) {
                this.onBeginAddOrUpdateConferenceDelegate = new BeginOperationDelegate(this.OnBeginAddOrUpdateConference);
            }
            if ((this.onEndAddOrUpdateConferenceDelegate == null)) {
                this.onEndAddOrUpdateConferenceDelegate = new EndOperationDelegate(this.OnEndAddOrUpdateConference);
            }
            if ((this.onAddOrUpdateConferenceCompletedDelegate == null)) {
                this.onAddOrUpdateConferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateConferenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrUpdateConferenceDelegate, new object[] {
                        confInfo,
                        securityToken}, this.onEndAddOrUpdateConferenceDelegate, this.onAddOrUpdateConferenceCompletedDelegate, userState);
        }
        
        public bool DeleteConferenceRoom(string roomName, string securityToken) {
            return base.Channel.DeleteConferenceRoom(roomName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteConferenceRoom(string roomName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteConferenceRoom(roomName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteConferenceRoom(System.IAsyncResult result) {
            return base.Channel.EndDeleteConferenceRoom(result);
        }
        
        private System.IAsyncResult OnBeginDeleteConferenceRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDeleteConferenceRoom(roomName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteConferenceRoom(System.IAsyncResult result) {
            bool retVal = this.EndDeleteConferenceRoom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteConferenceRoomCompleted(object state) {
            if ((this.DeleteConferenceRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteConferenceRoomCompleted(this, new DeleteConferenceRoomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteConferenceRoomAsync(string roomName, string securityToken) {
            this.DeleteConferenceRoomAsync(roomName, securityToken, null);
        }
        
        public void DeleteConferenceRoomAsync(string roomName, string securityToken, object userState) {
            if ((this.onBeginDeleteConferenceRoomDelegate == null)) {
                this.onBeginDeleteConferenceRoomDelegate = new BeginOperationDelegate(this.OnBeginDeleteConferenceRoom);
            }
            if ((this.onEndDeleteConferenceRoomDelegate == null)) {
                this.onEndDeleteConferenceRoomDelegate = new EndOperationDelegate(this.OnEndDeleteConferenceRoom);
            }
            if ((this.onDeleteConferenceRoomCompletedDelegate == null)) {
                this.onDeleteConferenceRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteConferenceRoomCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteConferenceRoomDelegate, new object[] {
                        roomName,
                        securityToken}, this.onEndDeleteConferenceRoomDelegate, this.onDeleteConferenceRoomCompletedDelegate, userState);
        }
        
        public bool AddOrUpdateConferenceMember(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken) {
            return base.Channel.AddOrUpdateConferenceMember(confUserInfo, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddOrUpdateConferenceMember(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrUpdateConferenceMember(confUserInfo, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddOrUpdateConferenceMember(System.IAsyncResult result) {
            return base.Channel.EndAddOrUpdateConferenceMember(result);
        }
        
        private System.IAsyncResult OnBeginAddOrUpdateConferenceMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo = ((DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginAddOrUpdateConferenceMember(confUserInfo, securityToken, callback, asyncState);
        }
        
        private object[] OnEndAddOrUpdateConferenceMember(System.IAsyncResult result) {
            bool retVal = this.EndAddOrUpdateConferenceMember(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrUpdateConferenceMemberCompleted(object state) {
            if ((this.AddOrUpdateConferenceMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrUpdateConferenceMemberCompleted(this, new AddOrUpdateConferenceMemberCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrUpdateConferenceMemberAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken) {
            this.AddOrUpdateConferenceMemberAsync(confUserInfo, securityToken, null);
        }
        
        public void AddOrUpdateConferenceMemberAsync(DuoSoftware.DuoSoftPhone.RefDuoMainConfigService.ConferenceUser confUserInfo, string securityToken, object userState) {
            if ((this.onBeginAddOrUpdateConferenceMemberDelegate == null)) {
                this.onBeginAddOrUpdateConferenceMemberDelegate = new BeginOperationDelegate(this.OnBeginAddOrUpdateConferenceMember);
            }
            if ((this.onEndAddOrUpdateConferenceMemberDelegate == null)) {
                this.onEndAddOrUpdateConferenceMemberDelegate = new EndOperationDelegate(this.OnEndAddOrUpdateConferenceMember);
            }
            if ((this.onAddOrUpdateConferenceMemberCompletedDelegate == null)) {
                this.onAddOrUpdateConferenceMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateConferenceMemberCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrUpdateConferenceMemberDelegate, new object[] {
                        confUserInfo,
                        securityToken}, this.onEndAddOrUpdateConferenceMemberDelegate, this.onAddOrUpdateConferenceMemberCompletedDelegate, userState);
        }
        
        public bool DeleteConferenceMember(string userName, string roomName, string securityToken) {
            return base.Channel.DeleteConferenceMember(userName, roomName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteConferenceMember(string userName, string roomName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteConferenceMember(userName, roomName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteConferenceMember(System.IAsyncResult result) {
            return base.Channel.EndDeleteConferenceMember(result);
        }
        
        private System.IAsyncResult OnBeginDeleteConferenceMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string roomName = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginDeleteConferenceMember(userName, roomName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDeleteConferenceMember(System.IAsyncResult result) {
            bool retVal = this.EndDeleteConferenceMember(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteConferenceMemberCompleted(object state) {
            if ((this.DeleteConferenceMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteConferenceMemberCompleted(this, new DeleteConferenceMemberCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteConferenceMemberAsync(string userName, string roomName, string securityToken) {
            this.DeleteConferenceMemberAsync(userName, roomName, securityToken, null);
        }
        
        public void DeleteConferenceMemberAsync(string userName, string roomName, string securityToken, object userState) {
            if ((this.onBeginDeleteConferenceMemberDelegate == null)) {
                this.onBeginDeleteConferenceMemberDelegate = new BeginOperationDelegate(this.OnBeginDeleteConferenceMember);
            }
            if ((this.onEndDeleteConferenceMemberDelegate == null)) {
                this.onEndDeleteConferenceMemberDelegate = new EndOperationDelegate(this.OnEndDeleteConferenceMember);
            }
            if ((this.onDeleteConferenceMemberCompletedDelegate == null)) {
                this.onDeleteConferenceMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteConferenceMemberCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteConferenceMemberDelegate, new object[] {
                        userName,
                        roomName,
                        securityToken}, this.onEndDeleteConferenceMemberDelegate, this.onDeleteConferenceMemberCompletedDelegate, userState);
        }
    }
}
