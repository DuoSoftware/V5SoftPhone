//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuoSoftware.DuoSoftPhone.RefResourceProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommunicationModes", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew.Enums")]
    public enum CommunicationModes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XMPP = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Socket = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebService = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HttpPooling = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceProxyReplyData.ResourceProxyReply", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew")]
    [System.SerializableAttribute()]
    public partial struct ResourceProxyReplyDataResourceProxyReply : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefResourceProxy.WorkflowResultCode CommandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes CommunicationModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMPPUserField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.WorkflowResultCode Command {
            get {
                return this.CommandField;
            }
            set {
                if ((this.CommandField.Equals(value) != true)) {
                    this.CommandField = value;
                    this.RaisePropertyChanged("Command");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes CommunicationMode {
            get {
                return this.CommunicationModeField;
            }
            set {
                if ((this.CommunicationModeField.Equals(value) != true)) {
                    this.CommunicationModeField = value;
                    this.RaisePropertyChanged("CommunicationMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraData {
            get {
                return this.ExtraDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraDataField, value) != true)) {
                    this.ExtraDataField = value;
                    this.RaisePropertyChanged("ExtraData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Port {
            get {
                return this.PortField;
            }
            set {
                if ((object.ReferenceEquals(this.PortField, value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultString {
            get {
                return this.ResultStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultStringField, value) != true)) {
                    this.ResultStringField = value;
                    this.RaisePropertyChanged("ResultString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SequenceNumber {
            get {
                return this.SequenceNumberField;
            }
            set {
                if ((this.SequenceNumberField.Equals(value) != true)) {
                    this.SequenceNumberField = value;
                    this.RaisePropertyChanged("SequenceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMPPUser {
            get {
                return this.XMPPUserField;
            }
            set {
                if ((object.ReferenceEquals(this.XMPPUserField, value) != true)) {
                    this.XMPPUserField = value;
                    this.RaisePropertyChanged("XMPPUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowResultCode", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew.Enums")]
    public enum WorkflowResultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS101 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE101 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE102 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS201 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS202 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE201 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS301 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS302 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE301 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE302 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE303 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS401 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS402 = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS403 = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4031 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4032 = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4033 = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS404 = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE401 = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE402 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE403 = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE404 = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS405 = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS501 = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS502 = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE501 = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE502 = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS601 = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE601 = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE603 = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS701 = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE701 = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE702 = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS801 = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE801 = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE802 = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS901 = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE901 = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE902 = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS1001 = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE1001 = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE1002 = 42,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefResourceProxy.IResourceProxyServices")]
    public interface IResourceProxyServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceRegistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceRegistrationResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceRegistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceRegistrationResponse")]
        System.IAsyncResult BeginResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceRegistration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceUnregistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceUnregistrationResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceUnregistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceUnregistrationResponse")]
        System.IAsyncResult BeginResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceUnregistration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceForceLogoff", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceForceLogoffResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceForceLogoff", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceForceLogoffResponse")]
        System.IAsyncResult BeginResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceForceLogoff(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequestResponse" +
            "")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequestResponse" +
            "")]
        System.IAsyncResult BeginCancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelResourceUnregisterRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendACWFreezRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/SendACWFreezRequestResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendACWFreezRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/SendACWFreezRequestResponse")]
        System.IAsyncResult BeginSendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendACWFreezRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequestResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequestResponse")]
        System.IAsyncResult BeginCancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelModeChangeRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequestResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequestResponse")]
        System.IAsyncResult BeginCancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelStatusChangeRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInboundResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInboundResponse")]
        System.IAsyncResult BeginSendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestInbound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutboundResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutboundResponse")]
        System.IAsyncResult BeginSendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestOutbound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOffline", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOfflineResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOffline", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOfflineResponse")]
        System.IAsyncResult BeginSendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestOffline(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdel", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdelResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdel", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdelResponse")]
        System.IAsyncResult BeginSendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestIdel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreakResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreakResponse")]
        System.IAsyncResult BeginSendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestBreak(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceModeChange", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceModeChangeResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceModeChange", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceModeChangeResponse")]
        System.IAsyncResult BeginResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceModeChange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreakResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreakResponse")]
        System.IAsyncResult BeginResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeBreak(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACW", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACWResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACW", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACWResponse")]
        System.IAsyncResult BeginResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeACW(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusy", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusyResponse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusy", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusyResponse")]
        System.IAsyncResult BeginResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeBusy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturb", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturbResp" +
            "onse")]
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturb", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturbResp" +
            "onse")]
        System.IAsyncResult BeginSendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestDoNotDisturb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/AddResourceToSuspendList", ReplyAction="http://tempuri.org/IResourceProxyServices/AddResourceToSuspendListResponse")]
        bool AddResourceToSuspendList(string securityToken, string guUserID, int company);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/AddResourceToSuspendList", ReplyAction="http://tempuri.org/IResourceProxyServices/AddResourceToSuspendListResponse")]
        System.IAsyncResult BeginAddResourceToSuspendList(string securityToken, string guUserID, int company, System.AsyncCallback callback, object asyncState);
        
        bool EndAddResourceToSuspendList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/RemoveResourceFromSuspendList", ReplyAction="http://tempuri.org/IResourceProxyServices/RemoveResourceFromSuspendListResponse")]
        bool RemoveResourceFromSuspendList(string securityToken, string guUserID, int company);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IResourceProxyServices/RemoveResourceFromSuspendList", ReplyAction="http://tempuri.org/IResourceProxyServices/RemoveResourceFromSuspendListResponse")]
        System.IAsyncResult BeginRemoveResourceFromSuspendList(string securityToken, string guUserID, int company, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveResourceFromSuspendList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceProxyServicesChannel : DuoSoftware.DuoSoftPhone.RefResourceProxy.IResourceProxyServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceUnregistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceUnregistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceForceLogoffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceForceLogoffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelResourceUnregisterRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelResourceUnregisterRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendACWFreezRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendACWFreezRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelModeChangeRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelModeChangeRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelStatusChangeRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelStatusChangeRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendModeChangeRequestInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendModeChangeRequestInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendModeChangeRequestOutboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendModeChangeRequestOutboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendModeChangeRequestOfflineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendModeChangeRequestOfflineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendStatusChangeRequestIdelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendStatusChangeRequestIdelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendStatusChangeRequestBreakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendStatusChangeRequestBreakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceModeChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceModeChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceStatusChangeBreakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceStatusChangeBreakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceStatusChangeACWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceStatusChangeACWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceStatusChangeBusyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResourceStatusChangeBusyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendStatusChangeRequestDoNotDisturbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendStatusChangeRequestDoNotDisturbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddResourceToSuspendListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddResourceToSuspendListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveResourceFromSuspendListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveResourceFromSuspendListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceProxyServicesClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefResourceProxy.IResourceProxyServices>, DuoSoftware.DuoSoftPhone.RefResourceProxy.IResourceProxyServices {
        
        private BeginOperationDelegate onBeginResourceRegistrationDelegate;
        
        private EndOperationDelegate onEndResourceRegistrationDelegate;
        
        private System.Threading.SendOrPostCallback onResourceRegistrationCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceUnregistrationDelegate;
        
        private EndOperationDelegate onEndResourceUnregistrationDelegate;
        
        private System.Threading.SendOrPostCallback onResourceUnregistrationCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceForceLogoffDelegate;
        
        private EndOperationDelegate onEndResourceForceLogoffDelegate;
        
        private System.Threading.SendOrPostCallback onResourceForceLogoffCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelResourceUnregisterRequestDelegate;
        
        private EndOperationDelegate onEndCancelResourceUnregisterRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCancelResourceUnregisterRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendACWFreezRequestDelegate;
        
        private EndOperationDelegate onEndSendACWFreezRequestDelegate;
        
        private System.Threading.SendOrPostCallback onSendACWFreezRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelModeChangeRequestDelegate;
        
        private EndOperationDelegate onEndCancelModeChangeRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCancelModeChangeRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelStatusChangeRequestDelegate;
        
        private EndOperationDelegate onEndCancelStatusChangeRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCancelStatusChangeRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendModeChangeRequestInboundDelegate;
        
        private EndOperationDelegate onEndSendModeChangeRequestInboundDelegate;
        
        private System.Threading.SendOrPostCallback onSendModeChangeRequestInboundCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendModeChangeRequestOutboundDelegate;
        
        private EndOperationDelegate onEndSendModeChangeRequestOutboundDelegate;
        
        private System.Threading.SendOrPostCallback onSendModeChangeRequestOutboundCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendModeChangeRequestOfflineDelegate;
        
        private EndOperationDelegate onEndSendModeChangeRequestOfflineDelegate;
        
        private System.Threading.SendOrPostCallback onSendModeChangeRequestOfflineCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendStatusChangeRequestIdelDelegate;
        
        private EndOperationDelegate onEndSendStatusChangeRequestIdelDelegate;
        
        private System.Threading.SendOrPostCallback onSendStatusChangeRequestIdelCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendStatusChangeRequestBreakDelegate;
        
        private EndOperationDelegate onEndSendStatusChangeRequestBreakDelegate;
        
        private System.Threading.SendOrPostCallback onSendStatusChangeRequestBreakCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceModeChangeDelegate;
        
        private EndOperationDelegate onEndResourceModeChangeDelegate;
        
        private System.Threading.SendOrPostCallback onResourceModeChangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceStatusChangeBreakDelegate;
        
        private EndOperationDelegate onEndResourceStatusChangeBreakDelegate;
        
        private System.Threading.SendOrPostCallback onResourceStatusChangeBreakCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceStatusChangeACWDelegate;
        
        private EndOperationDelegate onEndResourceStatusChangeACWDelegate;
        
        private System.Threading.SendOrPostCallback onResourceStatusChangeACWCompletedDelegate;
        
        private BeginOperationDelegate onBeginResourceStatusChangeBusyDelegate;
        
        private EndOperationDelegate onEndResourceStatusChangeBusyDelegate;
        
        private System.Threading.SendOrPostCallback onResourceStatusChangeBusyCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendStatusChangeRequestDoNotDisturbDelegate;
        
        private EndOperationDelegate onEndSendStatusChangeRequestDoNotDisturbDelegate;
        
        private System.Threading.SendOrPostCallback onSendStatusChangeRequestDoNotDisturbCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddResourceToSuspendListDelegate;
        
        private EndOperationDelegate onEndAddResourceToSuspendListDelegate;
        
        private System.Threading.SendOrPostCallback onAddResourceToSuspendListCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveResourceFromSuspendListDelegate;
        
        private EndOperationDelegate onEndRemoveResourceFromSuspendListDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveResourceFromSuspendListCompletedDelegate;
        
        public ResourceProxyServicesClient() {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceProxyServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ResourceRegistrationCompletedEventArgs> ResourceRegistrationCompleted;
        
        public event System.EventHandler<ResourceUnregistrationCompletedEventArgs> ResourceUnregistrationCompleted;
        
        public event System.EventHandler<ResourceForceLogoffCompletedEventArgs> ResourceForceLogoffCompleted;
        
        public event System.EventHandler<CancelResourceUnregisterRequestCompletedEventArgs> CancelResourceUnregisterRequestCompleted;
        
        public event System.EventHandler<SendACWFreezRequestCompletedEventArgs> SendACWFreezRequestCompleted;
        
        public event System.EventHandler<CancelModeChangeRequestCompletedEventArgs> CancelModeChangeRequestCompleted;
        
        public event System.EventHandler<CancelStatusChangeRequestCompletedEventArgs> CancelStatusChangeRequestCompleted;
        
        public event System.EventHandler<SendModeChangeRequestInboundCompletedEventArgs> SendModeChangeRequestInboundCompleted;
        
        public event System.EventHandler<SendModeChangeRequestOutboundCompletedEventArgs> SendModeChangeRequestOutboundCompleted;
        
        public event System.EventHandler<SendModeChangeRequestOfflineCompletedEventArgs> SendModeChangeRequestOfflineCompleted;
        
        public event System.EventHandler<SendStatusChangeRequestIdelCompletedEventArgs> SendStatusChangeRequestIdelCompleted;
        
        public event System.EventHandler<SendStatusChangeRequestBreakCompletedEventArgs> SendStatusChangeRequestBreakCompleted;
        
        public event System.EventHandler<ResourceModeChangeCompletedEventArgs> ResourceModeChangeCompleted;
        
        public event System.EventHandler<ResourceStatusChangeBreakCompletedEventArgs> ResourceStatusChangeBreakCompleted;
        
        public event System.EventHandler<ResourceStatusChangeACWCompletedEventArgs> ResourceStatusChangeACWCompleted;
        
        public event System.EventHandler<ResourceStatusChangeBusyCompletedEventArgs> ResourceStatusChangeBusyCompleted;
        
        public event System.EventHandler<SendStatusChangeRequestDoNotDisturbCompletedEventArgs> SendStatusChangeRequestDoNotDisturbCompleted;
        
        public event System.EventHandler<AddResourceToSuspendListCompletedEventArgs> AddResourceToSuspendListCompleted;
        
        public event System.EventHandler<RemoveResourceFromSuspendListCompletedEventArgs> RemoveResourceFromSuspendListCompleted;
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.ResourceRegistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceRegistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceRegistration(System.IAsyncResult result) {
            return base.Channel.EndResourceRegistration(result);
        }
        
        private System.IAsyncResult OnBeginResourceRegistration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginResourceRegistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceRegistration(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceRegistration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceRegistrationCompleted(object state) {
            if ((this.ResourceRegistrationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceRegistrationCompleted(this, new ResourceRegistrationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceRegistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.ResourceRegistrationAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void ResourceRegistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginResourceRegistrationDelegate == null)) {
                this.onBeginResourceRegistrationDelegate = new BeginOperationDelegate(this.OnBeginResourceRegistration);
            }
            if ((this.onEndResourceRegistrationDelegate == null)) {
                this.onEndResourceRegistrationDelegate = new EndOperationDelegate(this.OnEndResourceRegistration);
            }
            if ((this.onResourceRegistrationCompletedDelegate == null)) {
                this.onResourceRegistrationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceRegistrationCompleted);
            }
            base.InvokeAsync(this.onBeginResourceRegistrationDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndResourceRegistrationDelegate, this.onResourceRegistrationCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.ResourceUnregistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceUnregistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceUnregistration(System.IAsyncResult result) {
            return base.Channel.EndResourceUnregistration(result);
        }
        
        private System.IAsyncResult OnBeginResourceUnregistration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginResourceUnregistration(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceUnregistration(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceUnregistration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceUnregistrationCompleted(object state) {
            if ((this.ResourceUnregistrationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceUnregistrationCompleted(this, new ResourceUnregistrationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceUnregistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.ResourceUnregistrationAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void ResourceUnregistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginResourceUnregistrationDelegate == null)) {
                this.onBeginResourceUnregistrationDelegate = new BeginOperationDelegate(this.OnBeginResourceUnregistration);
            }
            if ((this.onEndResourceUnregistrationDelegate == null)) {
                this.onEndResourceUnregistrationDelegate = new EndOperationDelegate(this.OnEndResourceUnregistration);
            }
            if ((this.onResourceUnregistrationCompletedDelegate == null)) {
                this.onResourceUnregistrationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceUnregistrationCompleted);
            }
            base.InvokeAsync(this.onBeginResourceUnregistrationDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndResourceUnregistrationDelegate, this.onResourceUnregistrationCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.ResourceForceLogoff(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceForceLogoff(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceForceLogoff(System.IAsyncResult result) {
            return base.Channel.EndResourceForceLogoff(result);
        }
        
        private System.IAsyncResult OnBeginResourceForceLogoff(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginResourceForceLogoff(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceForceLogoff(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceForceLogoff(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceForceLogoffCompleted(object state) {
            if ((this.ResourceForceLogoffCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceForceLogoffCompleted(this, new ResourceForceLogoffCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceForceLogoffAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.ResourceForceLogoffAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void ResourceForceLogoffAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginResourceForceLogoffDelegate == null)) {
                this.onBeginResourceForceLogoffDelegate = new BeginOperationDelegate(this.OnBeginResourceForceLogoff);
            }
            if ((this.onEndResourceForceLogoffDelegate == null)) {
                this.onEndResourceForceLogoffDelegate = new EndOperationDelegate(this.OnEndResourceForceLogoff);
            }
            if ((this.onResourceForceLogoffCompletedDelegate == null)) {
                this.onResourceForceLogoffCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceForceLogoffCompleted);
            }
            base.InvokeAsync(this.onBeginResourceForceLogoffDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndResourceForceLogoffDelegate, this.onResourceForceLogoffCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.CancelResourceUnregisterRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelResourceUnregisterRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelResourceUnregisterRequest(System.IAsyncResult result) {
            return base.Channel.EndCancelResourceUnregisterRequest(result);
        }
        
        private System.IAsyncResult OnBeginCancelResourceUnregisterRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginCancelResourceUnregisterRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndCancelResourceUnregisterRequest(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndCancelResourceUnregisterRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelResourceUnregisterRequestCompleted(object state) {
            if ((this.CancelResourceUnregisterRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelResourceUnregisterRequestCompleted(this, new CancelResourceUnregisterRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelResourceUnregisterRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.CancelResourceUnregisterRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void CancelResourceUnregisterRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginCancelResourceUnregisterRequestDelegate == null)) {
                this.onBeginCancelResourceUnregisterRequestDelegate = new BeginOperationDelegate(this.OnBeginCancelResourceUnregisterRequest);
            }
            if ((this.onEndCancelResourceUnregisterRequestDelegate == null)) {
                this.onEndCancelResourceUnregisterRequestDelegate = new EndOperationDelegate(this.OnEndCancelResourceUnregisterRequest);
            }
            if ((this.onCancelResourceUnregisterRequestCompletedDelegate == null)) {
                this.onCancelResourceUnregisterRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelResourceUnregisterRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCancelResourceUnregisterRequestDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndCancelResourceUnregisterRequestDelegate, this.onCancelResourceUnregisterRequestCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.SendACWFreezRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendACWFreezRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendACWFreezRequest(System.IAsyncResult result) {
            return base.Channel.EndSendACWFreezRequest(result);
        }
        
        private System.IAsyncResult OnBeginSendACWFreezRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginSendACWFreezRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndSendACWFreezRequest(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendACWFreezRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendACWFreezRequestCompleted(object state) {
            if ((this.SendACWFreezRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendACWFreezRequestCompleted(this, new SendACWFreezRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendACWFreezRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.SendACWFreezRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void SendACWFreezRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginSendACWFreezRequestDelegate == null)) {
                this.onBeginSendACWFreezRequestDelegate = new BeginOperationDelegate(this.OnBeginSendACWFreezRequest);
            }
            if ((this.onEndSendACWFreezRequestDelegate == null)) {
                this.onEndSendACWFreezRequestDelegate = new EndOperationDelegate(this.OnEndSendACWFreezRequest);
            }
            if ((this.onSendACWFreezRequestCompletedDelegate == null)) {
                this.onSendACWFreezRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendACWFreezRequestCompleted);
            }
            base.InvokeAsync(this.onBeginSendACWFreezRequestDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndSendACWFreezRequestDelegate, this.onSendACWFreezRequestCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.CancelModeChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelModeChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelModeChangeRequest(System.IAsyncResult result) {
            return base.Channel.EndCancelModeChangeRequest(result);
        }
        
        private System.IAsyncResult OnBeginCancelModeChangeRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginCancelModeChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndCancelModeChangeRequest(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndCancelModeChangeRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelModeChangeRequestCompleted(object state) {
            if ((this.CancelModeChangeRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelModeChangeRequestCompleted(this, new CancelModeChangeRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelModeChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.CancelModeChangeRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void CancelModeChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginCancelModeChangeRequestDelegate == null)) {
                this.onBeginCancelModeChangeRequestDelegate = new BeginOperationDelegate(this.OnBeginCancelModeChangeRequest);
            }
            if ((this.onEndCancelModeChangeRequestDelegate == null)) {
                this.onEndCancelModeChangeRequestDelegate = new EndOperationDelegate(this.OnEndCancelModeChangeRequest);
            }
            if ((this.onCancelModeChangeRequestCompletedDelegate == null)) {
                this.onCancelModeChangeRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelModeChangeRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCancelModeChangeRequestDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndCancelModeChangeRequestDelegate, this.onCancelModeChangeRequestCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.CancelStatusChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelStatusChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndCancelStatusChangeRequest(System.IAsyncResult result) {
            return base.Channel.EndCancelStatusChangeRequest(result);
        }
        
        private System.IAsyncResult OnBeginCancelStatusChangeRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginCancelStatusChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndCancelStatusChangeRequest(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndCancelStatusChangeRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelStatusChangeRequestCompleted(object state) {
            if ((this.CancelStatusChangeRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelStatusChangeRequestCompleted(this, new CancelStatusChangeRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelStatusChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.CancelStatusChangeRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void CancelStatusChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginCancelStatusChangeRequestDelegate == null)) {
                this.onBeginCancelStatusChangeRequestDelegate = new BeginOperationDelegate(this.OnBeginCancelStatusChangeRequest);
            }
            if ((this.onEndCancelStatusChangeRequestDelegate == null)) {
                this.onEndCancelStatusChangeRequestDelegate = new EndOperationDelegate(this.OnEndCancelStatusChangeRequest);
            }
            if ((this.onCancelStatusChangeRequestCompletedDelegate == null)) {
                this.onCancelStatusChangeRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelStatusChangeRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCancelStatusChangeRequestDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndCancelStatusChangeRequestDelegate, this.onCancelStatusChangeRequestCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestInbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendModeChangeRequestInbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestInbound(System.IAsyncResult result) {
            return base.Channel.EndSendModeChangeRequestInbound(result);
        }
        
        private System.IAsyncResult OnBeginSendModeChangeRequestInbound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginSendModeChangeRequestInbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndSendModeChangeRequestInbound(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendModeChangeRequestInbound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendModeChangeRequestInboundCompleted(object state) {
            if ((this.SendModeChangeRequestInboundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendModeChangeRequestInboundCompleted(this, new SendModeChangeRequestInboundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendModeChangeRequestInboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.SendModeChangeRequestInboundAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void SendModeChangeRequestInboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginSendModeChangeRequestInboundDelegate == null)) {
                this.onBeginSendModeChangeRequestInboundDelegate = new BeginOperationDelegate(this.OnBeginSendModeChangeRequestInbound);
            }
            if ((this.onEndSendModeChangeRequestInboundDelegate == null)) {
                this.onEndSendModeChangeRequestInboundDelegate = new EndOperationDelegate(this.OnEndSendModeChangeRequestInbound);
            }
            if ((this.onSendModeChangeRequestInboundCompletedDelegate == null)) {
                this.onSendModeChangeRequestInboundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendModeChangeRequestInboundCompleted);
            }
            base.InvokeAsync(this.onBeginSendModeChangeRequestInboundDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndSendModeChangeRequestInboundDelegate, this.onSendModeChangeRequestInboundCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOutbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendModeChangeRequestOutbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestOutbound(System.IAsyncResult result) {
            return base.Channel.EndSendModeChangeRequestOutbound(result);
        }
        
        private System.IAsyncResult OnBeginSendModeChangeRequestOutbound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginSendModeChangeRequestOutbound(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndSendModeChangeRequestOutbound(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendModeChangeRequestOutbound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendModeChangeRequestOutboundCompleted(object state) {
            if ((this.SendModeChangeRequestOutboundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendModeChangeRequestOutboundCompleted(this, new SendModeChangeRequestOutboundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendModeChangeRequestOutboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.SendModeChangeRequestOutboundAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void SendModeChangeRequestOutboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginSendModeChangeRequestOutboundDelegate == null)) {
                this.onBeginSendModeChangeRequestOutboundDelegate = new BeginOperationDelegate(this.OnBeginSendModeChangeRequestOutbound);
            }
            if ((this.onEndSendModeChangeRequestOutboundDelegate == null)) {
                this.onEndSendModeChangeRequestOutboundDelegate = new EndOperationDelegate(this.OnEndSendModeChangeRequestOutbound);
            }
            if ((this.onSendModeChangeRequestOutboundCompletedDelegate == null)) {
                this.onSendModeChangeRequestOutboundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendModeChangeRequestOutboundCompleted);
            }
            base.InvokeAsync(this.onBeginSendModeChangeRequestOutboundDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndSendModeChangeRequestOutboundDelegate, this.onSendModeChangeRequestOutboundCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOffline(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendModeChangeRequestOffline(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendModeChangeRequestOffline(System.IAsyncResult result) {
            return base.Channel.EndSendModeChangeRequestOffline(result);
        }
        
        private System.IAsyncResult OnBeginSendModeChangeRequestOffline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginSendModeChangeRequestOffline(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndSendModeChangeRequestOffline(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendModeChangeRequestOffline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendModeChangeRequestOfflineCompleted(object state) {
            if ((this.SendModeChangeRequestOfflineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendModeChangeRequestOfflineCompleted(this, new SendModeChangeRequestOfflineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendModeChangeRequestOfflineAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.SendModeChangeRequestOfflineAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void SendModeChangeRequestOfflineAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginSendModeChangeRequestOfflineDelegate == null)) {
                this.onBeginSendModeChangeRequestOfflineDelegate = new BeginOperationDelegate(this.OnBeginSendModeChangeRequestOffline);
            }
            if ((this.onEndSendModeChangeRequestOfflineDelegate == null)) {
                this.onEndSendModeChangeRequestOfflineDelegate = new EndOperationDelegate(this.OnEndSendModeChangeRequestOffline);
            }
            if ((this.onSendModeChangeRequestOfflineCompletedDelegate == null)) {
                this.onSendModeChangeRequestOfflineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendModeChangeRequestOfflineCompleted);
            }
            base.InvokeAsync(this.onBeginSendModeChangeRequestOfflineDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndSendModeChangeRequestOfflineDelegate, this.onSendModeChangeRequestOfflineCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestIdel(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendStatusChangeRequestIdel(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestIdel(System.IAsyncResult result) {
            return base.Channel.EndSendStatusChangeRequestIdel(result);
        }
        
        private System.IAsyncResult OnBeginSendStatusChangeRequestIdel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string breakReason = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            string sessionId = ((string)(inValues[9]));
            return this.BeginSendStatusChangeRequestIdel(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        private object[] OnEndSendStatusChangeRequestIdel(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendStatusChangeRequestIdel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendStatusChangeRequestIdelCompleted(object state) {
            if ((this.SendStatusChangeRequestIdelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendStatusChangeRequestIdelCompleted(this, new SendStatusChangeRequestIdelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendStatusChangeRequestIdelAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            this.SendStatusChangeRequestIdelAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, null);
        }
        
        public void SendStatusChangeRequestIdelAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, object userState) {
            if ((this.onBeginSendStatusChangeRequestIdelDelegate == null)) {
                this.onBeginSendStatusChangeRequestIdelDelegate = new BeginOperationDelegate(this.OnBeginSendStatusChangeRequestIdel);
            }
            if ((this.onEndSendStatusChangeRequestIdelDelegate == null)) {
                this.onEndSendStatusChangeRequestIdelDelegate = new EndOperationDelegate(this.OnEndSendStatusChangeRequestIdel);
            }
            if ((this.onSendStatusChangeRequestIdelCompletedDelegate == null)) {
                this.onSendStatusChangeRequestIdelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendStatusChangeRequestIdelCompleted);
            }
            base.InvokeAsync(this.onBeginSendStatusChangeRequestIdelDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        breakReason,
                        extraData,
                        sessionId}, this.onEndSendStatusChangeRequestIdelDelegate, this.onSendStatusChangeRequestIdelCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendStatusChangeRequestBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestBreak(System.IAsyncResult result) {
            return base.Channel.EndSendStatusChangeRequestBreak(result);
        }
        
        private System.IAsyncResult OnBeginSendStatusChangeRequestBreak(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string breakReason = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            string sessionId = ((string)(inValues[9]));
            return this.BeginSendStatusChangeRequestBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        private object[] OnEndSendStatusChangeRequestBreak(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendStatusChangeRequestBreak(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendStatusChangeRequestBreakCompleted(object state) {
            if ((this.SendStatusChangeRequestBreakCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendStatusChangeRequestBreakCompleted(this, new SendStatusChangeRequestBreakCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendStatusChangeRequestBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            this.SendStatusChangeRequestBreakAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, null);
        }
        
        public void SendStatusChangeRequestBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, object userState) {
            if ((this.onBeginSendStatusChangeRequestBreakDelegate == null)) {
                this.onBeginSendStatusChangeRequestBreakDelegate = new BeginOperationDelegate(this.OnBeginSendStatusChangeRequestBreak);
            }
            if ((this.onEndSendStatusChangeRequestBreakDelegate == null)) {
                this.onEndSendStatusChangeRequestBreakDelegate = new EndOperationDelegate(this.OnEndSendStatusChangeRequestBreak);
            }
            if ((this.onSendStatusChangeRequestBreakCompletedDelegate == null)) {
                this.onSendStatusChangeRequestBreakCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendStatusChangeRequestBreakCompleted);
            }
            base.InvokeAsync(this.onBeginSendStatusChangeRequestBreakDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        breakReason,
                        extraData,
                        sessionId}, this.onEndSendStatusChangeRequestBreakDelegate, this.onSendStatusChangeRequestBreakCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            return base.Channel.ResourceModeChange(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceModeChange(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceModeChange(System.IAsyncResult result) {
            return base.Channel.EndResourceModeChange(result);
        }
        
        private System.IAsyncResult OnBeginResourceModeChange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string extraData = ((string)(inValues[7]));
            return this.BeginResourceModeChange(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceModeChange(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceModeChange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceModeChangeCompleted(object state) {
            if ((this.ResourceModeChangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceModeChangeCompleted(this, new ResourceModeChangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceModeChangeAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData) {
            this.ResourceModeChangeAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, extraData, null);
        }
        
        public void ResourceModeChangeAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string extraData, object userState) {
            if ((this.onBeginResourceModeChangeDelegate == null)) {
                this.onBeginResourceModeChangeDelegate = new BeginOperationDelegate(this.OnBeginResourceModeChange);
            }
            if ((this.onEndResourceModeChangeDelegate == null)) {
                this.onEndResourceModeChangeDelegate = new EndOperationDelegate(this.OnEndResourceModeChange);
            }
            if ((this.onResourceModeChangeCompletedDelegate == null)) {
                this.onResourceModeChangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceModeChangeCompleted);
            }
            base.InvokeAsync(this.onBeginResourceModeChangeDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        extraData}, this.onEndResourceModeChangeDelegate, this.onResourceModeChangeCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceStatusChangeBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeBreak(System.IAsyncResult result) {
            return base.Channel.EndResourceStatusChangeBreak(result);
        }
        
        private System.IAsyncResult OnBeginResourceStatusChangeBreak(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string sessionId = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            return this.BeginResourceStatusChangeBreak(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceStatusChangeBreak(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceStatusChangeBreak(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceStatusChangeBreakCompleted(object state) {
            if ((this.ResourceStatusChangeBreakCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceStatusChangeBreakCompleted(this, new ResourceStatusChangeBreakCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceStatusChangeBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            this.ResourceStatusChangeBreakAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, null);
        }
        
        public void ResourceStatusChangeBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, object userState) {
            if ((this.onBeginResourceStatusChangeBreakDelegate == null)) {
                this.onBeginResourceStatusChangeBreakDelegate = new BeginOperationDelegate(this.OnBeginResourceStatusChangeBreak);
            }
            if ((this.onEndResourceStatusChangeBreakDelegate == null)) {
                this.onEndResourceStatusChangeBreakDelegate = new EndOperationDelegate(this.OnEndResourceStatusChangeBreak);
            }
            if ((this.onResourceStatusChangeBreakCompletedDelegate == null)) {
                this.onResourceStatusChangeBreakCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceStatusChangeBreakCompleted);
            }
            base.InvokeAsync(this.onBeginResourceStatusChangeBreakDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        sessionId,
                        extraData}, this.onEndResourceStatusChangeBreakDelegate, this.onResourceStatusChangeBreakCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeACW(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceStatusChangeACW(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeACW(System.IAsyncResult result) {
            return base.Channel.EndResourceStatusChangeACW(result);
        }
        
        private System.IAsyncResult OnBeginResourceStatusChangeACW(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string sessionId = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            return this.BeginResourceStatusChangeACW(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceStatusChangeACW(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceStatusChangeACW(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceStatusChangeACWCompleted(object state) {
            if ((this.ResourceStatusChangeACWCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceStatusChangeACWCompleted(this, new ResourceStatusChangeACWCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceStatusChangeACWAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            this.ResourceStatusChangeACWAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, null);
        }
        
        public void ResourceStatusChangeACWAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, object userState) {
            if ((this.onBeginResourceStatusChangeACWDelegate == null)) {
                this.onBeginResourceStatusChangeACWDelegate = new BeginOperationDelegate(this.OnBeginResourceStatusChangeACW);
            }
            if ((this.onEndResourceStatusChangeACWDelegate == null)) {
                this.onEndResourceStatusChangeACWDelegate = new EndOperationDelegate(this.OnEndResourceStatusChangeACW);
            }
            if ((this.onResourceStatusChangeACWCompletedDelegate == null)) {
                this.onResourceStatusChangeACWCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceStatusChangeACWCompleted);
            }
            base.InvokeAsync(this.onBeginResourceStatusChangeACWDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        sessionId,
                        extraData}, this.onEndResourceStatusChangeACWDelegate, this.onResourceStatusChangeACWCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBusy(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResourceStatusChangeBusy(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndResourceStatusChangeBusy(System.IAsyncResult result) {
            return base.Channel.EndResourceStatusChangeBusy(result);
        }
        
        private System.IAsyncResult OnBeginResourceStatusChangeBusy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string sessionId = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            return this.BeginResourceStatusChangeBusy(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, callback, asyncState);
        }
        
        private object[] OnEndResourceStatusChangeBusy(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndResourceStatusChangeBusy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResourceStatusChangeBusyCompleted(object state) {
            if ((this.ResourceStatusChangeBusyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResourceStatusChangeBusyCompleted(this, new ResourceStatusChangeBusyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResourceStatusChangeBusyAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData) {
            this.ResourceStatusChangeBusyAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, sessionId, extraData, null);
        }
        
        public void ResourceStatusChangeBusyAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string sessionId, string extraData, object userState) {
            if ((this.onBeginResourceStatusChangeBusyDelegate == null)) {
                this.onBeginResourceStatusChangeBusyDelegate = new BeginOperationDelegate(this.OnBeginResourceStatusChangeBusy);
            }
            if ((this.onEndResourceStatusChangeBusyDelegate == null)) {
                this.onEndResourceStatusChangeBusyDelegate = new EndOperationDelegate(this.OnEndResourceStatusChangeBusy);
            }
            if ((this.onResourceStatusChangeBusyCompletedDelegate == null)) {
                this.onResourceStatusChangeBusyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResourceStatusChangeBusyCompleted);
            }
            base.InvokeAsync(this.onBeginResourceStatusChangeBusyDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        sessionId,
                        extraData}, this.onEndResourceStatusChangeBusyDelegate, this.onResourceStatusChangeBusyCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestDoNotDisturb(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendStatusChangeRequestDoNotDisturb(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply EndSendStatusChangeRequestDoNotDisturb(System.IAsyncResult result) {
            return base.Channel.EndSendStatusChangeRequestDoNotDisturb(result);
        }
        
        private System.IAsyncResult OnBeginSendStatusChangeRequestDoNotDisturb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string xmppUserName = ((string)(inValues[1]));
            string port = ((string)(inValues[2]));
            string ip = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode = ((DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes)(inValues[4]));
            int sequenceNumber = ((int)(inValues[5]));
            string resourceId = ((string)(inValues[6]));
            string breakReason = ((string)(inValues[7]));
            string extraData = ((string)(inValues[8]));
            string sessionId = ((string)(inValues[9]));
            return this.BeginSendStatusChangeRequestDoNotDisturb(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, callback, asyncState);
        }
        
        private object[] OnEndSendStatusChangeRequestDoNotDisturb(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefResourceProxy.ResourceProxyReplyDataResourceProxyReply retVal = this.EndSendStatusChangeRequestDoNotDisturb(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendStatusChangeRequestDoNotDisturbCompleted(object state) {
            if ((this.SendStatusChangeRequestDoNotDisturbCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendStatusChangeRequestDoNotDisturbCompleted(this, new SendStatusChangeRequestDoNotDisturbCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendStatusChangeRequestDoNotDisturbAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId) {
            this.SendStatusChangeRequestDoNotDisturbAsync(securityToken, xmppUserName, port, ip, communicationMode, sequenceNumber, resourceId, breakReason, extraData, sessionId, null);
        }
        
        public void SendStatusChangeRequestDoNotDisturbAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.RefResourceProxy.CommunicationModes communicationMode, int sequenceNumber, string resourceId, string breakReason, string extraData, string sessionId, object userState) {
            if ((this.onBeginSendStatusChangeRequestDoNotDisturbDelegate == null)) {
                this.onBeginSendStatusChangeRequestDoNotDisturbDelegate = new BeginOperationDelegate(this.OnBeginSendStatusChangeRequestDoNotDisturb);
            }
            if ((this.onEndSendStatusChangeRequestDoNotDisturbDelegate == null)) {
                this.onEndSendStatusChangeRequestDoNotDisturbDelegate = new EndOperationDelegate(this.OnEndSendStatusChangeRequestDoNotDisturb);
            }
            if ((this.onSendStatusChangeRequestDoNotDisturbCompletedDelegate == null)) {
                this.onSendStatusChangeRequestDoNotDisturbCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendStatusChangeRequestDoNotDisturbCompleted);
            }
            base.InvokeAsync(this.onBeginSendStatusChangeRequestDoNotDisturbDelegate, new object[] {
                        securityToken,
                        xmppUserName,
                        port,
                        ip,
                        communicationMode,
                        sequenceNumber,
                        resourceId,
                        breakReason,
                        extraData,
                        sessionId}, this.onEndSendStatusChangeRequestDoNotDisturbDelegate, this.onSendStatusChangeRequestDoNotDisturbCompletedDelegate, userState);
        }
        
        public bool AddResourceToSuspendList(string securityToken, string guUserID, int company) {
            return base.Channel.AddResourceToSuspendList(securityToken, guUserID, company);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddResourceToSuspendList(string securityToken, string guUserID, int company, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddResourceToSuspendList(securityToken, guUserID, company, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddResourceToSuspendList(System.IAsyncResult result) {
            return base.Channel.EndAddResourceToSuspendList(result);
        }
        
        private System.IAsyncResult OnBeginAddResourceToSuspendList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string guUserID = ((string)(inValues[1]));
            int company = ((int)(inValues[2]));
            return this.BeginAddResourceToSuspendList(securityToken, guUserID, company, callback, asyncState);
        }
        
        private object[] OnEndAddResourceToSuspendList(System.IAsyncResult result) {
            bool retVal = this.EndAddResourceToSuspendList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddResourceToSuspendListCompleted(object state) {
            if ((this.AddResourceToSuspendListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddResourceToSuspendListCompleted(this, new AddResourceToSuspendListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddResourceToSuspendListAsync(string securityToken, string guUserID, int company) {
            this.AddResourceToSuspendListAsync(securityToken, guUserID, company, null);
        }
        
        public void AddResourceToSuspendListAsync(string securityToken, string guUserID, int company, object userState) {
            if ((this.onBeginAddResourceToSuspendListDelegate == null)) {
                this.onBeginAddResourceToSuspendListDelegate = new BeginOperationDelegate(this.OnBeginAddResourceToSuspendList);
            }
            if ((this.onEndAddResourceToSuspendListDelegate == null)) {
                this.onEndAddResourceToSuspendListDelegate = new EndOperationDelegate(this.OnEndAddResourceToSuspendList);
            }
            if ((this.onAddResourceToSuspendListCompletedDelegate == null)) {
                this.onAddResourceToSuspendListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddResourceToSuspendListCompleted);
            }
            base.InvokeAsync(this.onBeginAddResourceToSuspendListDelegate, new object[] {
                        securityToken,
                        guUserID,
                        company}, this.onEndAddResourceToSuspendListDelegate, this.onAddResourceToSuspendListCompletedDelegate, userState);
        }
        
        public bool RemoveResourceFromSuspendList(string securityToken, string guUserID, int company) {
            return base.Channel.RemoveResourceFromSuspendList(securityToken, guUserID, company);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveResourceFromSuspendList(string securityToken, string guUserID, int company, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveResourceFromSuspendList(securityToken, guUserID, company, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRemoveResourceFromSuspendList(System.IAsyncResult result) {
            return base.Channel.EndRemoveResourceFromSuspendList(result);
        }
        
        private System.IAsyncResult OnBeginRemoveResourceFromSuspendList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string guUserID = ((string)(inValues[1]));
            int company = ((int)(inValues[2]));
            return this.BeginRemoveResourceFromSuspendList(securityToken, guUserID, company, callback, asyncState);
        }
        
        private object[] OnEndRemoveResourceFromSuspendList(System.IAsyncResult result) {
            bool retVal = this.EndRemoveResourceFromSuspendList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveResourceFromSuspendListCompleted(object state) {
            if ((this.RemoveResourceFromSuspendListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveResourceFromSuspendListCompleted(this, new RemoveResourceFromSuspendListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveResourceFromSuspendListAsync(string securityToken, string guUserID, int company) {
            this.RemoveResourceFromSuspendListAsync(securityToken, guUserID, company, null);
        }
        
        public void RemoveResourceFromSuspendListAsync(string securityToken, string guUserID, int company, object userState) {
            if ((this.onBeginRemoveResourceFromSuspendListDelegate == null)) {
                this.onBeginRemoveResourceFromSuspendListDelegate = new BeginOperationDelegate(this.OnBeginRemoveResourceFromSuspendList);
            }
            if ((this.onEndRemoveResourceFromSuspendListDelegate == null)) {
                this.onEndRemoveResourceFromSuspendListDelegate = new EndOperationDelegate(this.OnEndRemoveResourceFromSuspendList);
            }
            if ((this.onRemoveResourceFromSuspendListCompletedDelegate == null)) {
                this.onRemoveResourceFromSuspendListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveResourceFromSuspendListCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveResourceFromSuspendListDelegate, new object[] {
                        securityToken,
                        guUserID,
                        company}, this.onEndRemoveResourceFromSuspendListDelegate, this.onRemoveResourceFromSuspendListCompletedDelegate, userState);
        }
    }
}
