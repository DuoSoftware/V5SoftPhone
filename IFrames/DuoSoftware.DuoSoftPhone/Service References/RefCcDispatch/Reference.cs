//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuoSoftware.DuoSoftPhone.RefCcDispatch {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BargeMethod", Namespace="http://schemas.datacontract.org/2004/07/WCFServicesAPI")]
    public enum BargeMethod : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LISTEN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BARGE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        THREEWAY = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaydOperation", Namespace="http://schemas.datacontract.org/2004/07/WCFServicesAPI")]
    public enum PlaydOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        play = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stop = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        resume = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecordOperation", Namespace="http://schemas.datacontract.org/2004/07/WCFServicesAPI")]
    public enum RecordOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        strart = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        stop = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        resume = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelatedOption", Namespace="http://schemas.datacontract.org/2004/07/WCFServicesAPI")]
    public enum RelatedOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        nospeak = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        nohear = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        clear = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserOperation", Namespace="http://schemas.datacontract.org/2004/07/WCFServicesAPI")]
    public enum UserOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kick = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        mute = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        deaf = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unmute = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        undeaf = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceUserAction", Namespace="http://schemas.datacontract.org/2004/07/DS.DC.CCDispatchService.CCDispatchDataCon" +
        "tracts")]
    public enum ConferenceUserAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mute = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnMute = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deaf = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnDeaf = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceUserStatus", Namespace="http://schemas.datacontract.org/2004/07/DS.DC.CCDispatchService.CCDispatchDataCon" +
        "tracts")]
    public enum ConferenceUserStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Validated = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Added = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Kicked = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tried = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfUserValidationResult", Namespace="http://schemas.datacontract.org/2004/07/DS.DC.CCDispatchService.CCDispatchDataCon" +
        "tracts")]
    [System.SerializableAttribute()]
    public partial class ConfUserValidationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeafFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAnonymousUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ModeratorFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MuteFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeafFlag {
            get {
                return this.DeafFlagField;
            }
            set {
                if ((this.DeafFlagField.Equals(value) != true)) {
                    this.DeafFlagField = value;
                    this.RaisePropertyChanged("DeafFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAnonymousUser {
            get {
                return this.IsAnonymousUserField;
            }
            set {
                if ((this.IsAnonymousUserField.Equals(value) != true)) {
                    this.IsAnonymousUserField = value;
                    this.RaisePropertyChanged("IsAnonymousUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ModeratorFlag {
            get {
                return this.ModeratorFlagField;
            }
            set {
                if ((this.ModeratorFlagField.Equals(value) != true)) {
                    this.ModeratorFlagField = value;
                    this.RaisePropertyChanged("ModeratorFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MuteFlag {
            get {
                return this.MuteFlagField;
            }
            set {
                if ((this.MuteFlagField.Equals(value) != true)) {
                    this.MuteFlagField = value;
                    this.RaisePropertyChanged("MuteFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PIN {
            get {
                return this.PINField;
            }
            set {
                if ((object.ReferenceEquals(this.PINField, value) != true)) {
                    this.PINField = value;
                    this.RaisePropertyChanged("PIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefCcDispatch.IFaxSender")]
    public interface IFaxSender {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaxSender/SendFax", ReplyAction="http://tempuri.org/IFaxSender/SendFaxResponse")]
        bool SendFax(string toFaxNumber, string fromFaxNumber, string filename, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFaxSender/SendFax", ReplyAction="http://tempuri.org/IFaxSender/SendFaxResponse")]
        System.IAsyncResult BeginSendFax(string toFaxNumber, string fromFaxNumber, string filename, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSendFax(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFaxSenderChannel : DuoSoftware.DuoSoftPhone.RefCcDispatch.IFaxSender, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendFaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendFaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FaxSenderClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefCcDispatch.IFaxSender>, DuoSoftware.DuoSoftPhone.RefCcDispatch.IFaxSender {
        
        private BeginOperationDelegate onBeginSendFaxDelegate;
        
        private EndOperationDelegate onEndSendFaxDelegate;
        
        private System.Threading.SendOrPostCallback onSendFaxCompletedDelegate;
        
        public FaxSenderClient() {
        }
        
        public FaxSenderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FaxSenderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaxSenderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaxSenderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<SendFaxCompletedEventArgs> SendFaxCompleted;
        
        public bool SendFax(string toFaxNumber, string fromFaxNumber, string filename, string securityToken) {
            return base.Channel.SendFax(toFaxNumber, fromFaxNumber, filename, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendFax(string toFaxNumber, string fromFaxNumber, string filename, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendFax(toFaxNumber, fromFaxNumber, filename, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSendFax(System.IAsyncResult result) {
            return base.Channel.EndSendFax(result);
        }
        
        private System.IAsyncResult OnBeginSendFax(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string toFaxNumber = ((string)(inValues[0]));
            string fromFaxNumber = ((string)(inValues[1]));
            string filename = ((string)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginSendFax(toFaxNumber, fromFaxNumber, filename, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSendFax(System.IAsyncResult result) {
            bool retVal = this.EndSendFax(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendFaxCompleted(object state) {
            if ((this.SendFaxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendFaxCompleted(this, new SendFaxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendFaxAsync(string toFaxNumber, string fromFaxNumber, string filename, string securityToken) {
            this.SendFaxAsync(toFaxNumber, fromFaxNumber, filename, securityToken, null);
        }
        
        public void SendFaxAsync(string toFaxNumber, string fromFaxNumber, string filename, string securityToken, object userState) {
            if ((this.onBeginSendFaxDelegate == null)) {
                this.onBeginSendFaxDelegate = new BeginOperationDelegate(this.OnBeginSendFax);
            }
            if ((this.onEndSendFaxDelegate == null)) {
                this.onEndSendFaxDelegate = new EndOperationDelegate(this.OnEndSendFax);
            }
            if ((this.onSendFaxCompletedDelegate == null)) {
                this.onSendFaxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendFaxCompleted);
            }
            base.InvokeAsync(this.onBeginSendFaxDelegate, new object[] {
                        toFaxNumber,
                        fromFaxNumber,
                        filename,
                        securityToken}, this.onEndSendFaxDelegate, this.onSendFaxCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefCcDispatch.ICallMonitor")]
    public interface ICallMonitor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallMonitor/CallMonitorOpRequest", ReplyAction="http://tempuri.org/ICallMonitor/CallMonitorOpRequestResponse")]
        bool CallMonitorOpRequest(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallMonitor/CallMonitorOpRequest", ReplyAction="http://tempuri.org/ICallMonitor/CallMonitorOpRequestResponse")]
        System.IAsyncResult BeginCallMonitorOpRequest(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndCallMonitorOpRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallMonitor/DisconnectCall", ReplyAction="http://tempuri.org/ICallMonitor/DisconnectCallResponse")]
        bool DisconnectCall(string sessionId, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICallMonitor/DisconnectCall", ReplyAction="http://tempuri.org/ICallMonitor/DisconnectCallResponse")]
        System.IAsyncResult BeginDisconnectCall(string sessionId, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndDisconnectCall(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallMonitorChannel : DuoSoftware.DuoSoftPhone.RefCcDispatch.ICallMonitor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallMonitorOpRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CallMonitorOpRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisconnectCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallMonitorClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefCcDispatch.ICallMonitor>, DuoSoftware.DuoSoftPhone.RefCcDispatch.ICallMonitor {
        
        private BeginOperationDelegate onBeginCallMonitorOpRequestDelegate;
        
        private EndOperationDelegate onEndCallMonitorOpRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCallMonitorOpRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectCallDelegate;
        
        private EndOperationDelegate onEndDisconnectCallDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCallCompletedDelegate;
        
        public CallMonitorClient() {
        }
        
        public CallMonitorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CallMonitorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallMonitorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CallMonitorOpRequestCompletedEventArgs> CallMonitorOpRequestCompleted;
        
        public event System.EventHandler<DisconnectCallCompletedEventArgs> DisconnectCallCompleted;
        
        public bool CallMonitorOpRequest(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken) {
            return base.Channel.CallMonitorOpRequest(sessionId, destination, protocol, bargeMethod, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCallMonitorOpRequest(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCallMonitorOpRequest(sessionId, destination, protocol, bargeMethod, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCallMonitorOpRequest(System.IAsyncResult result) {
            return base.Channel.EndCallMonitorOpRequest(result);
        }
        
        private System.IAsyncResult OnBeginCallMonitorOpRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionId = ((string)(inValues[0]));
            string destination = ((string)(inValues[1]));
            string protocol = ((string)(inValues[2]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod)(inValues[3]));
            string securityToken = ((string)(inValues[4]));
            return this.BeginCallMonitorOpRequest(sessionId, destination, protocol, bargeMethod, securityToken, callback, asyncState);
        }
        
        private object[] OnEndCallMonitorOpRequest(System.IAsyncResult result) {
            bool retVal = this.EndCallMonitorOpRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCallMonitorOpRequestCompleted(object state) {
            if ((this.CallMonitorOpRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CallMonitorOpRequestCompleted(this, new CallMonitorOpRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CallMonitorOpRequestAsync(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken) {
            this.CallMonitorOpRequestAsync(sessionId, destination, protocol, bargeMethod, securityToken, null);
        }
        
        public void CallMonitorOpRequestAsync(string sessionId, string destination, string protocol, DuoSoftware.DuoSoftPhone.RefCcDispatch.BargeMethod bargeMethod, string securityToken, object userState) {
            if ((this.onBeginCallMonitorOpRequestDelegate == null)) {
                this.onBeginCallMonitorOpRequestDelegate = new BeginOperationDelegate(this.OnBeginCallMonitorOpRequest);
            }
            if ((this.onEndCallMonitorOpRequestDelegate == null)) {
                this.onEndCallMonitorOpRequestDelegate = new EndOperationDelegate(this.OnEndCallMonitorOpRequest);
            }
            if ((this.onCallMonitorOpRequestCompletedDelegate == null)) {
                this.onCallMonitorOpRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCallMonitorOpRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCallMonitorOpRequestDelegate, new object[] {
                        sessionId,
                        destination,
                        protocol,
                        bargeMethod,
                        securityToken}, this.onEndCallMonitorOpRequestDelegate, this.onCallMonitorOpRequestCompletedDelegate, userState);
        }
        
        public bool DisconnectCall(string sessionId, string securityToken) {
            return base.Channel.DisconnectCall(sessionId, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnectCall(string sessionId, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnectCall(sessionId, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDisconnectCall(System.IAsyncResult result) {
            return base.Channel.EndDisconnectCall(result);
        }
        
        private System.IAsyncResult OnBeginDisconnectCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionId = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginDisconnectCall(sessionId, securityToken, callback, asyncState);
        }
        
        private object[] OnEndDisconnectCall(System.IAsyncResult result) {
            bool retVal = this.EndDisconnectCall(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisconnectCallCompleted(object state) {
            if ((this.DisconnectCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCallCompleted(this, new DisconnectCallCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectCallAsync(string sessionId, string securityToken) {
            this.DisconnectCallAsync(sessionId, securityToken, null);
        }
        
        public void DisconnectCallAsync(string sessionId, string securityToken, object userState) {
            if ((this.onBeginDisconnectCallDelegate == null)) {
                this.onBeginDisconnectCallDelegate = new BeginOperationDelegate(this.OnBeginDisconnectCall);
            }
            if ((this.onEndDisconnectCallDelegate == null)) {
                this.onEndDisconnectCallDelegate = new EndOperationDelegate(this.OnEndDisconnectCall);
            }
            if ((this.onDisconnectCallCompletedDelegate == null)) {
                this.onDisconnectCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCallCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectCallDelegate, new object[] {
                        sessionId,
                        securityToken}, this.onEndDisconnectCallDelegate, this.onDisconnectCallCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefCcDispatch.IConference")]
    public interface IConference {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/ConferenceDial", ReplyAction="http://tempuri.org/IConference/ConferenceDialResponse")]
        bool ConferenceDial(string confRoomName, string dialUser, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/ConferenceDial", ReplyAction="http://tempuri.org/IConference/ConferenceDialResponse")]
        System.IAsyncResult BeginConferenceDial(string confRoomName, string dialUser, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndConferenceDial(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/LockConferenceRoom", ReplyAction="http://tempuri.org/IConference/LockConferenceRoomResponse")]
        bool LockConferenceRoom(string confRoomName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/LockConferenceRoom", ReplyAction="http://tempuri.org/IConference/LockConferenceRoomResponse")]
        System.IAsyncResult BeginLockConferenceRoom(string confRoomName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndLockConferenceRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/UnlockConferenceRoom", ReplyAction="http://tempuri.org/IConference/UnlockConferenceRoomResponse")]
        bool UnlockConferenceRoom(string confRoomName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/UnlockConferenceRoom", ReplyAction="http://tempuri.org/IConference/UnlockConferenceRoomResponse")]
        System.IAsyncResult BeginUnlockConferenceRoom(string confRoomName, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUnlockConferenceRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/PlayConference", ReplyAction="http://tempuri.org/IConference/PlayConferenceResponse")]
        bool PlayConference(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/PlayConference", ReplyAction="http://tempuri.org/IConference/PlayConferenceResponse")]
        System.IAsyncResult BeginPlayConference(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation, System.AsyncCallback callback, object asyncState);
        
        bool EndPlayConference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/RecordConference", ReplyAction="http://tempuri.org/IConference/RecordConferenceResponse")]
        bool RecordConference(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/RecordConference", ReplyAction="http://tempuri.org/IConference/RecordConferenceResponse")]
        System.IAsyncResult BeginRecordConference(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation, System.AsyncCallback callback, object asyncState);
        
        bool EndRecordConference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/RelateConference", ReplyAction="http://tempuri.org/IConference/RelateConferenceResponse")]
        bool RelateConference(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/RelateConference", ReplyAction="http://tempuri.org/IConference/RelateConferenceResponse")]
        System.IAsyncResult BeginRelateConference(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option, System.AsyncCallback callback, object asyncState);
        
        bool EndRelateConference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/SetMaxConfMember", ReplyAction="http://tempuri.org/IConference/SetMaxConfMemberResponse")]
        bool SetMaxConfMember(string securityToken, string roomName, int maxUsrs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/SetMaxConfMember", ReplyAction="http://tempuri.org/IConference/SetMaxConfMemberResponse")]
        System.IAsyncResult BeginSetMaxConfMember(string securityToken, string roomName, int maxUsrs, System.AsyncCallback callback, object asyncState);
        
        bool EndSetMaxConfMember(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConference/ConferenceUserOperation", ReplyAction="http://tempuri.org/IConference/ConferenceUserOperationResponse")]
        bool ConferenceUserOperation(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConference/ConferenceUserOperation", ReplyAction="http://tempuri.org/IConference/ConferenceUserOperationResponse")]
        System.IAsyncResult BeginConferenceUserOperation(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId, System.AsyncCallback callback, object asyncState);
        
        bool EndConferenceUserOperation(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConferenceChannel : DuoSoftware.DuoSoftPhone.RefCcDispatch.IConference, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceDialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConferenceDialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LockConferenceRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LockConferenceRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnlockConferenceRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UnlockConferenceRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayConferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayConferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordConferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordConferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RelateConferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RelateConferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetMaxConfMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetMaxConfMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceUserOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConferenceUserOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefCcDispatch.IConference>, DuoSoftware.DuoSoftPhone.RefCcDispatch.IConference {
        
        private BeginOperationDelegate onBeginConferenceDialDelegate;
        
        private EndOperationDelegate onEndConferenceDialDelegate;
        
        private System.Threading.SendOrPostCallback onConferenceDialCompletedDelegate;
        
        private BeginOperationDelegate onBeginLockConferenceRoomDelegate;
        
        private EndOperationDelegate onEndLockConferenceRoomDelegate;
        
        private System.Threading.SendOrPostCallback onLockConferenceRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlockConferenceRoomDelegate;
        
        private EndOperationDelegate onEndUnlockConferenceRoomDelegate;
        
        private System.Threading.SendOrPostCallback onUnlockConferenceRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayConferenceDelegate;
        
        private EndOperationDelegate onEndPlayConferenceDelegate;
        
        private System.Threading.SendOrPostCallback onPlayConferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordConferenceDelegate;
        
        private EndOperationDelegate onEndRecordConferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRecordConferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelateConferenceDelegate;
        
        private EndOperationDelegate onEndRelateConferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRelateConferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMaxConfMemberDelegate;
        
        private EndOperationDelegate onEndSetMaxConfMemberDelegate;
        
        private System.Threading.SendOrPostCallback onSetMaxConfMemberCompletedDelegate;
        
        private BeginOperationDelegate onBeginConferenceUserOperationDelegate;
        
        private EndOperationDelegate onEndConferenceUserOperationDelegate;
        
        private System.Threading.SendOrPostCallback onConferenceUserOperationCompletedDelegate;
        
        public ConferenceClient() {
        }
        
        public ConferenceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ConferenceDialCompletedEventArgs> ConferenceDialCompleted;
        
        public event System.EventHandler<LockConferenceRoomCompletedEventArgs> LockConferenceRoomCompleted;
        
        public event System.EventHandler<UnlockConferenceRoomCompletedEventArgs> UnlockConferenceRoomCompleted;
        
        public event System.EventHandler<PlayConferenceCompletedEventArgs> PlayConferenceCompleted;
        
        public event System.EventHandler<RecordConferenceCompletedEventArgs> RecordConferenceCompleted;
        
        public event System.EventHandler<RelateConferenceCompletedEventArgs> RelateConferenceCompleted;
        
        public event System.EventHandler<SetMaxConfMemberCompletedEventArgs> SetMaxConfMemberCompleted;
        
        public event System.EventHandler<ConferenceUserOperationCompletedEventArgs> ConferenceUserOperationCompleted;
        
        public bool ConferenceDial(string confRoomName, string dialUser, string securityToken) {
            return base.Channel.ConferenceDial(confRoomName, dialUser, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConferenceDial(string confRoomName, string dialUser, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConferenceDial(confRoomName, dialUser, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConferenceDial(System.IAsyncResult result) {
            return base.Channel.EndConferenceDial(result);
        }
        
        private System.IAsyncResult OnBeginConferenceDial(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string confRoomName = ((string)(inValues[0]));
            string dialUser = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginConferenceDial(confRoomName, dialUser, securityToken, callback, asyncState);
        }
        
        private object[] OnEndConferenceDial(System.IAsyncResult result) {
            bool retVal = this.EndConferenceDial(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConferenceDialCompleted(object state) {
            if ((this.ConferenceDialCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConferenceDialCompleted(this, new ConferenceDialCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConferenceDialAsync(string confRoomName, string dialUser, string securityToken) {
            this.ConferenceDialAsync(confRoomName, dialUser, securityToken, null);
        }
        
        public void ConferenceDialAsync(string confRoomName, string dialUser, string securityToken, object userState) {
            if ((this.onBeginConferenceDialDelegate == null)) {
                this.onBeginConferenceDialDelegate = new BeginOperationDelegate(this.OnBeginConferenceDial);
            }
            if ((this.onEndConferenceDialDelegate == null)) {
                this.onEndConferenceDialDelegate = new EndOperationDelegate(this.OnEndConferenceDial);
            }
            if ((this.onConferenceDialCompletedDelegate == null)) {
                this.onConferenceDialCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConferenceDialCompleted);
            }
            base.InvokeAsync(this.onBeginConferenceDialDelegate, new object[] {
                        confRoomName,
                        dialUser,
                        securityToken}, this.onEndConferenceDialDelegate, this.onConferenceDialCompletedDelegate, userState);
        }
        
        public bool LockConferenceRoom(string confRoomName, string securityToken) {
            return base.Channel.LockConferenceRoom(confRoomName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLockConferenceRoom(string confRoomName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLockConferenceRoom(confRoomName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLockConferenceRoom(System.IAsyncResult result) {
            return base.Channel.EndLockConferenceRoom(result);
        }
        
        private System.IAsyncResult OnBeginLockConferenceRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string confRoomName = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginLockConferenceRoom(confRoomName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndLockConferenceRoom(System.IAsyncResult result) {
            bool retVal = this.EndLockConferenceRoom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLockConferenceRoomCompleted(object state) {
            if ((this.LockConferenceRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LockConferenceRoomCompleted(this, new LockConferenceRoomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LockConferenceRoomAsync(string confRoomName, string securityToken) {
            this.LockConferenceRoomAsync(confRoomName, securityToken, null);
        }
        
        public void LockConferenceRoomAsync(string confRoomName, string securityToken, object userState) {
            if ((this.onBeginLockConferenceRoomDelegate == null)) {
                this.onBeginLockConferenceRoomDelegate = new BeginOperationDelegate(this.OnBeginLockConferenceRoom);
            }
            if ((this.onEndLockConferenceRoomDelegate == null)) {
                this.onEndLockConferenceRoomDelegate = new EndOperationDelegate(this.OnEndLockConferenceRoom);
            }
            if ((this.onLockConferenceRoomCompletedDelegate == null)) {
                this.onLockConferenceRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLockConferenceRoomCompleted);
            }
            base.InvokeAsync(this.onBeginLockConferenceRoomDelegate, new object[] {
                        confRoomName,
                        securityToken}, this.onEndLockConferenceRoomDelegate, this.onLockConferenceRoomCompletedDelegate, userState);
        }
        
        public bool UnlockConferenceRoom(string confRoomName, string securityToken) {
            return base.Channel.UnlockConferenceRoom(confRoomName, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnlockConferenceRoom(string confRoomName, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlockConferenceRoom(confRoomName, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUnlockConferenceRoom(System.IAsyncResult result) {
            return base.Channel.EndUnlockConferenceRoom(result);
        }
        
        private System.IAsyncResult OnBeginUnlockConferenceRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string confRoomName = ((string)(inValues[0]));
            string securityToken = ((string)(inValues[1]));
            return this.BeginUnlockConferenceRoom(confRoomName, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUnlockConferenceRoom(System.IAsyncResult result) {
            bool retVal = this.EndUnlockConferenceRoom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUnlockConferenceRoomCompleted(object state) {
            if ((this.UnlockConferenceRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlockConferenceRoomCompleted(this, new UnlockConferenceRoomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlockConferenceRoomAsync(string confRoomName, string securityToken) {
            this.UnlockConferenceRoomAsync(confRoomName, securityToken, null);
        }
        
        public void UnlockConferenceRoomAsync(string confRoomName, string securityToken, object userState) {
            if ((this.onBeginUnlockConferenceRoomDelegate == null)) {
                this.onBeginUnlockConferenceRoomDelegate = new BeginOperationDelegate(this.OnBeginUnlockConferenceRoom);
            }
            if ((this.onEndUnlockConferenceRoomDelegate == null)) {
                this.onEndUnlockConferenceRoomDelegate = new EndOperationDelegate(this.OnEndUnlockConferenceRoom);
            }
            if ((this.onUnlockConferenceRoomCompletedDelegate == null)) {
                this.onUnlockConferenceRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlockConferenceRoomCompleted);
            }
            base.InvokeAsync(this.onBeginUnlockConferenceRoomDelegate, new object[] {
                        confRoomName,
                        securityToken}, this.onEndUnlockConferenceRoomDelegate, this.onUnlockConferenceRoomCompletedDelegate, userState);
        }
        
        public bool PlayConference(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation) {
            return base.Channel.PlayConference(securityToken, roomName, fileName, userId, operation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPlayConference(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayConference(securityToken, roomName, fileName, userId, operation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPlayConference(System.IAsyncResult result) {
            return base.Channel.EndPlayConference(result);
        }
        
        private System.IAsyncResult OnBeginPlayConference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string roomName = ((string)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation)(inValues[4]));
            return this.BeginPlayConference(securityToken, roomName, fileName, userId, operation, callback, asyncState);
        }
        
        private object[] OnEndPlayConference(System.IAsyncResult result) {
            bool retVal = this.EndPlayConference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayConferenceCompleted(object state) {
            if ((this.PlayConferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayConferenceCompleted(this, new PlayConferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayConferenceAsync(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation) {
            this.PlayConferenceAsync(securityToken, roomName, fileName, userId, operation, null);
        }
        
        public void PlayConferenceAsync(string securityToken, string roomName, string fileName, string userId, DuoSoftware.DuoSoftPhone.RefCcDispatch.PlaydOperation operation, object userState) {
            if ((this.onBeginPlayConferenceDelegate == null)) {
                this.onBeginPlayConferenceDelegate = new BeginOperationDelegate(this.OnBeginPlayConference);
            }
            if ((this.onEndPlayConferenceDelegate == null)) {
                this.onEndPlayConferenceDelegate = new EndOperationDelegate(this.OnEndPlayConference);
            }
            if ((this.onPlayConferenceCompletedDelegate == null)) {
                this.onPlayConferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayConferenceCompleted);
            }
            base.InvokeAsync(this.onBeginPlayConferenceDelegate, new object[] {
                        securityToken,
                        roomName,
                        fileName,
                        userId,
                        operation}, this.onEndPlayConferenceDelegate, this.onPlayConferenceCompletedDelegate, userState);
        }
        
        public bool RecordConference(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation) {
            return base.Channel.RecordConference(securityToken, roomName, fileName, operation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordConference(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordConference(securityToken, roomName, fileName, operation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRecordConference(System.IAsyncResult result) {
            return base.Channel.EndRecordConference(result);
        }
        
        private System.IAsyncResult OnBeginRecordConference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string roomName = ((string)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation)(inValues[3]));
            return this.BeginRecordConference(securityToken, roomName, fileName, operation, callback, asyncState);
        }
        
        private object[] OnEndRecordConference(System.IAsyncResult result) {
            bool retVal = this.EndRecordConference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecordConferenceCompleted(object state) {
            if ((this.RecordConferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordConferenceCompleted(this, new RecordConferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordConferenceAsync(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation) {
            this.RecordConferenceAsync(securityToken, roomName, fileName, operation, null);
        }
        
        public void RecordConferenceAsync(string securityToken, string roomName, string fileName, DuoSoftware.DuoSoftPhone.RefCcDispatch.RecordOperation operation, object userState) {
            if ((this.onBeginRecordConferenceDelegate == null)) {
                this.onBeginRecordConferenceDelegate = new BeginOperationDelegate(this.OnBeginRecordConference);
            }
            if ((this.onEndRecordConferenceDelegate == null)) {
                this.onEndRecordConferenceDelegate = new EndOperationDelegate(this.OnEndRecordConference);
            }
            if ((this.onRecordConferenceCompletedDelegate == null)) {
                this.onRecordConferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordConferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRecordConferenceDelegate, new object[] {
                        securityToken,
                        roomName,
                        fileName,
                        operation}, this.onEndRecordConferenceDelegate, this.onRecordConferenceCompletedDelegate, userState);
        }
        
        public bool RelateConference(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option) {
            return base.Channel.RelateConference(securityToken, roomName, usrId1, usrId2, option);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelateConference(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelateConference(securityToken, roomName, usrId1, usrId2, option, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRelateConference(System.IAsyncResult result) {
            return base.Channel.EndRelateConference(result);
        }
        
        private System.IAsyncResult OnBeginRelateConference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string roomName = ((string)(inValues[1]));
            string usrId1 = ((string)(inValues[2]));
            string usrId2 = ((string)(inValues[3]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption)(inValues[4]));
            return this.BeginRelateConference(securityToken, roomName, usrId1, usrId2, option, callback, asyncState);
        }
        
        private object[] OnEndRelateConference(System.IAsyncResult result) {
            bool retVal = this.EndRelateConference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelateConferenceCompleted(object state) {
            if ((this.RelateConferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RelateConferenceCompleted(this, new RelateConferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RelateConferenceAsync(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option) {
            this.RelateConferenceAsync(securityToken, roomName, usrId1, usrId2, option, null);
        }
        
        public void RelateConferenceAsync(string securityToken, string roomName, string usrId1, string usrId2, DuoSoftware.DuoSoftPhone.RefCcDispatch.RelatedOption option, object userState) {
            if ((this.onBeginRelateConferenceDelegate == null)) {
                this.onBeginRelateConferenceDelegate = new BeginOperationDelegate(this.OnBeginRelateConference);
            }
            if ((this.onEndRelateConferenceDelegate == null)) {
                this.onEndRelateConferenceDelegate = new EndOperationDelegate(this.OnEndRelateConference);
            }
            if ((this.onRelateConferenceCompletedDelegate == null)) {
                this.onRelateConferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelateConferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRelateConferenceDelegate, new object[] {
                        securityToken,
                        roomName,
                        usrId1,
                        usrId2,
                        option}, this.onEndRelateConferenceDelegate, this.onRelateConferenceCompletedDelegate, userState);
        }
        
        public bool SetMaxConfMember(string securityToken, string roomName, int maxUsrs) {
            return base.Channel.SetMaxConfMember(securityToken, roomName, maxUsrs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMaxConfMember(string securityToken, string roomName, int maxUsrs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMaxConfMember(securityToken, roomName, maxUsrs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetMaxConfMember(System.IAsyncResult result) {
            return base.Channel.EndSetMaxConfMember(result);
        }
        
        private System.IAsyncResult OnBeginSetMaxConfMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string roomName = ((string)(inValues[1]));
            int maxUsrs = ((int)(inValues[2]));
            return this.BeginSetMaxConfMember(securityToken, roomName, maxUsrs, callback, asyncState);
        }
        
        private object[] OnEndSetMaxConfMember(System.IAsyncResult result) {
            bool retVal = this.EndSetMaxConfMember(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetMaxConfMemberCompleted(object state) {
            if ((this.SetMaxConfMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMaxConfMemberCompleted(this, new SetMaxConfMemberCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMaxConfMemberAsync(string securityToken, string roomName, int maxUsrs) {
            this.SetMaxConfMemberAsync(securityToken, roomName, maxUsrs, null);
        }
        
        public void SetMaxConfMemberAsync(string securityToken, string roomName, int maxUsrs, object userState) {
            if ((this.onBeginSetMaxConfMemberDelegate == null)) {
                this.onBeginSetMaxConfMemberDelegate = new BeginOperationDelegate(this.OnBeginSetMaxConfMember);
            }
            if ((this.onEndSetMaxConfMemberDelegate == null)) {
                this.onEndSetMaxConfMemberDelegate = new EndOperationDelegate(this.OnEndSetMaxConfMember);
            }
            if ((this.onSetMaxConfMemberCompletedDelegate == null)) {
                this.onSetMaxConfMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMaxConfMemberCompleted);
            }
            base.InvokeAsync(this.onBeginSetMaxConfMemberDelegate, new object[] {
                        securityToken,
                        roomName,
                        maxUsrs}, this.onEndSetMaxConfMemberDelegate, this.onSetMaxConfMemberCompletedDelegate, userState);
        }
        
        public bool ConferenceUserOperation(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId) {
            return base.Channel.ConferenceUserOperation(securityToken, sessionId, usrOp, roomName, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConferenceUserOperation(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConferenceUserOperation(securityToken, sessionId, usrOp, roomName, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConferenceUserOperation(System.IAsyncResult result) {
            return base.Channel.EndConferenceUserOperation(result);
        }
        
        private System.IAsyncResult OnBeginConferenceUserOperation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string securityToken = ((string)(inValues[0]));
            string sessionId = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation)(inValues[2]));
            string roomName = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            return this.BeginConferenceUserOperation(securityToken, sessionId, usrOp, roomName, userId, callback, asyncState);
        }
        
        private object[] OnEndConferenceUserOperation(System.IAsyncResult result) {
            bool retVal = this.EndConferenceUserOperation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConferenceUserOperationCompleted(object state) {
            if ((this.ConferenceUserOperationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConferenceUserOperationCompleted(this, new ConferenceUserOperationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConferenceUserOperationAsync(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId) {
            this.ConferenceUserOperationAsync(securityToken, sessionId, usrOp, roomName, userId, null);
        }
        
        public void ConferenceUserOperationAsync(string securityToken, string sessionId, DuoSoftware.DuoSoftPhone.RefCcDispatch.UserOperation usrOp, string roomName, string userId, object userState) {
            if ((this.onBeginConferenceUserOperationDelegate == null)) {
                this.onBeginConferenceUserOperationDelegate = new BeginOperationDelegate(this.OnBeginConferenceUserOperation);
            }
            if ((this.onEndConferenceUserOperationDelegate == null)) {
                this.onEndConferenceUserOperationDelegate = new EndOperationDelegate(this.OnEndConferenceUserOperation);
            }
            if ((this.onConferenceUserOperationCompletedDelegate == null)) {
                this.onConferenceUserOperationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConferenceUserOperationCompleted);
            }
            base.InvokeAsync(this.onBeginConferenceUserOperationDelegate, new object[] {
                        securityToken,
                        sessionId,
                        usrOp,
                        roomName,
                        userId}, this.onEndConferenceUserOperationDelegate, this.onConferenceUserOperationCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefCcDispatch.IConferenceServerHelper")]
    public interface IConferenceServerHelper {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConferenceServerHelper/MemberAdded", ReplyAction="http://tempuri.org/IConferenceServerHelper/MemberAddedResponse")]
        bool MemberAdded(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConferenceServerHelper/MemberAdded", ReplyAction="http://tempuri.org/IConferenceServerHelper/MemberAddedResponse")]
        System.IAsyncResult BeginMemberAdded(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndMemberAdded(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConferenceServerHelper/UpdateMemberOperation", ReplyAction="http://tempuri.org/IConferenceServerHelper/UpdateMemberOperationResponse")]
        bool UpdateMemberOperation(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConferenceServerHelper/UpdateMemberOperation", ReplyAction="http://tempuri.org/IConferenceServerHelper/UpdateMemberOperationResponse")]
        System.IAsyncResult BeginUpdateMemberOperation(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMemberOperation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConferenceServerHelper/UpdateMemberStatus", ReplyAction="http://tempuri.org/IConferenceServerHelper/UpdateMemberStatusResponse")]
        bool UpdateMemberStatus(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConferenceServerHelper/UpdateMemberStatus", ReplyAction="http://tempuri.org/IConferenceServerHelper/UpdateMemberStatusResponse")]
        System.IAsyncResult BeginUpdateMemberStatus(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMemberStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConferenceServerHelper/ValidateConferenceUser", ReplyAction="http://tempuri.org/IConferenceServerHelper/ValidateConferenceUserResponse")]
        DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult ValidateConferenceUser(string roomName, string usrPinId, string crn, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConferenceServerHelper/ValidateConferenceUser", ReplyAction="http://tempuri.org/IConferenceServerHelper/ValidateConferenceUserResponse")]
        System.IAsyncResult BeginValidateConferenceUser(string roomName, string usrPinId, string crn, string securityToken, System.AsyncCallback callback, object asyncState);
        
        DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult EndValidateConferenceUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConferenceServerHelper/SetActiveTalker", ReplyAction="http://tempuri.org/IConferenceServerHelper/SetActiveTalkerResponse")]
        bool SetActiveTalker(string roomName, string crn, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConferenceServerHelper/SetActiveTalker", ReplyAction="http://tempuri.org/IConferenceServerHelper/SetActiveTalkerResponse")]
        System.IAsyncResult BeginSetActiveTalker(string roomName, string crn, string securityToken, System.AsyncCallback callback, object asyncState);
        
        bool EndSetActiveTalker(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConferenceServerHelperChannel : DuoSoftware.DuoSoftPhone.RefCcDispatch.IConferenceServerHelper, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MemberAddedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MemberAddedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMemberOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMemberOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMemberStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMemberStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateConferenceUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateConferenceUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetActiveTalkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetActiveTalkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceServerHelperClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.RefCcDispatch.IConferenceServerHelper>, DuoSoftware.DuoSoftPhone.RefCcDispatch.IConferenceServerHelper {
        
        private BeginOperationDelegate onBeginMemberAddedDelegate;
        
        private EndOperationDelegate onEndMemberAddedDelegate;
        
        private System.Threading.SendOrPostCallback onMemberAddedCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMemberOperationDelegate;
        
        private EndOperationDelegate onEndUpdateMemberOperationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMemberOperationCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMemberStatusDelegate;
        
        private EndOperationDelegate onEndUpdateMemberStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMemberStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateConferenceUserDelegate;
        
        private EndOperationDelegate onEndValidateConferenceUserDelegate;
        
        private System.Threading.SendOrPostCallback onValidateConferenceUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetActiveTalkerDelegate;
        
        private EndOperationDelegate onEndSetActiveTalkerDelegate;
        
        private System.Threading.SendOrPostCallback onSetActiveTalkerCompletedDelegate;
        
        public ConferenceServerHelperClient() {
        }
        
        public ConferenceServerHelperClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceServerHelperClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceServerHelperClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceServerHelperClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<MemberAddedCompletedEventArgs> MemberAddedCompleted;
        
        public event System.EventHandler<UpdateMemberOperationCompletedEventArgs> UpdateMemberOperationCompleted;
        
        public event System.EventHandler<UpdateMemberStatusCompletedEventArgs> UpdateMemberStatusCompleted;
        
        public event System.EventHandler<ValidateConferenceUserCompletedEventArgs> ValidateConferenceUserCompleted;
        
        public event System.EventHandler<SetActiveTalkerCompletedEventArgs> SetActiveTalkerCompleted;
        
        public bool MemberAdded(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken) {
            return base.Channel.MemberAdded(roomName, roomUuid, userUuid, sessionId, crn, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMemberAdded(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMemberAdded(roomName, roomUuid, userUuid, sessionId, crn, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMemberAdded(System.IAsyncResult result) {
            return base.Channel.EndMemberAdded(result);
        }
        
        private System.IAsyncResult OnBeginMemberAdded(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string roomUuid = ((string)(inValues[1]));
            string userUuid = ((string)(inValues[2]));
            string sessionId = ((string)(inValues[3]));
            string crn = ((string)(inValues[4]));
            string securityToken = ((string)(inValues[5]));
            return this.BeginMemberAdded(roomName, roomUuid, userUuid, sessionId, crn, securityToken, callback, asyncState);
        }
        
        private object[] OnEndMemberAdded(System.IAsyncResult result) {
            bool retVal = this.EndMemberAdded(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMemberAddedCompleted(object state) {
            if ((this.MemberAddedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MemberAddedCompleted(this, new MemberAddedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MemberAddedAsync(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken) {
            this.MemberAddedAsync(roomName, roomUuid, userUuid, sessionId, crn, securityToken, null);
        }
        
        public void MemberAddedAsync(string roomName, string roomUuid, string userUuid, string sessionId, string crn, string securityToken, object userState) {
            if ((this.onBeginMemberAddedDelegate == null)) {
                this.onBeginMemberAddedDelegate = new BeginOperationDelegate(this.OnBeginMemberAdded);
            }
            if ((this.onEndMemberAddedDelegate == null)) {
                this.onEndMemberAddedDelegate = new EndOperationDelegate(this.OnEndMemberAdded);
            }
            if ((this.onMemberAddedCompletedDelegate == null)) {
                this.onMemberAddedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMemberAddedCompleted);
            }
            base.InvokeAsync(this.onBeginMemberAddedDelegate, new object[] {
                        roomName,
                        roomUuid,
                        userUuid,
                        sessionId,
                        crn,
                        securityToken}, this.onEndMemberAddedDelegate, this.onMemberAddedCompletedDelegate, userState);
        }
        
        public bool UpdateMemberOperation(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken) {
            return base.Channel.UpdateMemberOperation(roomName, crn, action, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMemberOperation(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMemberOperation(roomName, crn, action, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateMemberOperation(System.IAsyncResult result) {
            return base.Channel.EndUpdateMemberOperation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMemberOperation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string crn = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginUpdateMemberOperation(roomName, crn, action, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateMemberOperation(System.IAsyncResult result) {
            bool retVal = this.EndUpdateMemberOperation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMemberOperationCompleted(object state) {
            if ((this.UpdateMemberOperationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMemberOperationCompleted(this, new UpdateMemberOperationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMemberOperationAsync(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken) {
            this.UpdateMemberOperationAsync(roomName, crn, action, securityToken, null);
        }
        
        public void UpdateMemberOperationAsync(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserAction action, string securityToken, object userState) {
            if ((this.onBeginUpdateMemberOperationDelegate == null)) {
                this.onBeginUpdateMemberOperationDelegate = new BeginOperationDelegate(this.OnBeginUpdateMemberOperation);
            }
            if ((this.onEndUpdateMemberOperationDelegate == null)) {
                this.onEndUpdateMemberOperationDelegate = new EndOperationDelegate(this.OnEndUpdateMemberOperation);
            }
            if ((this.onUpdateMemberOperationCompletedDelegate == null)) {
                this.onUpdateMemberOperationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMemberOperationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMemberOperationDelegate, new object[] {
                        roomName,
                        crn,
                        action,
                        securityToken}, this.onEndUpdateMemberOperationDelegate, this.onUpdateMemberOperationCompletedDelegate, userState);
        }
        
        public bool UpdateMemberStatus(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken) {
            return base.Channel.UpdateMemberStatus(roomName, crn, status, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMemberStatus(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMemberStatus(roomName, crn, status, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateMemberStatus(System.IAsyncResult result) {
            return base.Channel.EndUpdateMemberStatus(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMemberStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string crn = ((string)(inValues[1]));
            DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status = ((DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginUpdateMemberStatus(roomName, crn, status, securityToken, callback, asyncState);
        }
        
        private object[] OnEndUpdateMemberStatus(System.IAsyncResult result) {
            bool retVal = this.EndUpdateMemberStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMemberStatusCompleted(object state) {
            if ((this.UpdateMemberStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMemberStatusCompleted(this, new UpdateMemberStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMemberStatusAsync(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken) {
            this.UpdateMemberStatusAsync(roomName, crn, status, securityToken, null);
        }
        
        public void UpdateMemberStatusAsync(string roomName, string crn, DuoSoftware.DuoSoftPhone.RefCcDispatch.ConferenceUserStatus status, string securityToken, object userState) {
            if ((this.onBeginUpdateMemberStatusDelegate == null)) {
                this.onBeginUpdateMemberStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateMemberStatus);
            }
            if ((this.onEndUpdateMemberStatusDelegate == null)) {
                this.onEndUpdateMemberStatusDelegate = new EndOperationDelegate(this.OnEndUpdateMemberStatus);
            }
            if ((this.onUpdateMemberStatusCompletedDelegate == null)) {
                this.onUpdateMemberStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMemberStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMemberStatusDelegate, new object[] {
                        roomName,
                        crn,
                        status,
                        securityToken}, this.onEndUpdateMemberStatusDelegate, this.onUpdateMemberStatusCompletedDelegate, userState);
        }
        
        public DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult ValidateConferenceUser(string roomName, string usrPinId, string crn, string securityToken) {
            return base.Channel.ValidateConferenceUser(roomName, usrPinId, crn, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateConferenceUser(string roomName, string usrPinId, string crn, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateConferenceUser(roomName, usrPinId, crn, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult EndValidateConferenceUser(System.IAsyncResult result) {
            return base.Channel.EndValidateConferenceUser(result);
        }
        
        private System.IAsyncResult OnBeginValidateConferenceUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string usrPinId = ((string)(inValues[1]));
            string crn = ((string)(inValues[2]));
            string securityToken = ((string)(inValues[3]));
            return this.BeginValidateConferenceUser(roomName, usrPinId, crn, securityToken, callback, asyncState);
        }
        
        private object[] OnEndValidateConferenceUser(System.IAsyncResult result) {
            DuoSoftware.DuoSoftPhone.RefCcDispatch.ConfUserValidationResult retVal = this.EndValidateConferenceUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateConferenceUserCompleted(object state) {
            if ((this.ValidateConferenceUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateConferenceUserCompleted(this, new ValidateConferenceUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateConferenceUserAsync(string roomName, string usrPinId, string crn, string securityToken) {
            this.ValidateConferenceUserAsync(roomName, usrPinId, crn, securityToken, null);
        }
        
        public void ValidateConferenceUserAsync(string roomName, string usrPinId, string crn, string securityToken, object userState) {
            if ((this.onBeginValidateConferenceUserDelegate == null)) {
                this.onBeginValidateConferenceUserDelegate = new BeginOperationDelegate(this.OnBeginValidateConferenceUser);
            }
            if ((this.onEndValidateConferenceUserDelegate == null)) {
                this.onEndValidateConferenceUserDelegate = new EndOperationDelegate(this.OnEndValidateConferenceUser);
            }
            if ((this.onValidateConferenceUserCompletedDelegate == null)) {
                this.onValidateConferenceUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateConferenceUserCompleted);
            }
            base.InvokeAsync(this.onBeginValidateConferenceUserDelegate, new object[] {
                        roomName,
                        usrPinId,
                        crn,
                        securityToken}, this.onEndValidateConferenceUserDelegate, this.onValidateConferenceUserCompletedDelegate, userState);
        }
        
        public bool SetActiveTalker(string roomName, string crn, string securityToken) {
            return base.Channel.SetActiveTalker(roomName, crn, securityToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetActiveTalker(string roomName, string crn, string securityToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetActiveTalker(roomName, crn, securityToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetActiveTalker(System.IAsyncResult result) {
            return base.Channel.EndSetActiveTalker(result);
        }
        
        private System.IAsyncResult OnBeginSetActiveTalker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string roomName = ((string)(inValues[0]));
            string crn = ((string)(inValues[1]));
            string securityToken = ((string)(inValues[2]));
            return this.BeginSetActiveTalker(roomName, crn, securityToken, callback, asyncState);
        }
        
        private object[] OnEndSetActiveTalker(System.IAsyncResult result) {
            bool retVal = this.EndSetActiveTalker(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetActiveTalkerCompleted(object state) {
            if ((this.SetActiveTalkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetActiveTalkerCompleted(this, new SetActiveTalkerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetActiveTalkerAsync(string roomName, string crn, string securityToken) {
            this.SetActiveTalkerAsync(roomName, crn, securityToken, null);
        }
        
        public void SetActiveTalkerAsync(string roomName, string crn, string securityToken, object userState) {
            if ((this.onBeginSetActiveTalkerDelegate == null)) {
                this.onBeginSetActiveTalkerDelegate = new BeginOperationDelegate(this.OnBeginSetActiveTalker);
            }
            if ((this.onEndSetActiveTalkerDelegate == null)) {
                this.onEndSetActiveTalkerDelegate = new EndOperationDelegate(this.OnEndSetActiveTalker);
            }
            if ((this.onSetActiveTalkerCompletedDelegate == null)) {
                this.onSetActiveTalkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetActiveTalkerCompleted);
            }
            base.InvokeAsync(this.onBeginSetActiveTalkerDelegate, new object[] {
                        roomName,
                        crn,
                        securityToken}, this.onEndSetActiveTalkerDelegate, this.onSetActiveTalkerCompletedDelegate, userState);
        }
    }
}
