//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuoSoftware.DuoSoftPhone.refEngagement {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuoEngagements", Namespace="http://schemas.datacontract.org/2004/07/DuoSoftware.IDuoEngagementService")]
    [System.SerializableAttribute()]
    public partial class DuoEngagements : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommunicationChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyIDField;
        
        private System.DateTime CreatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationInMsecField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngageeAccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngagementCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngagementChannelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngagementClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EngagementHistoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EngagementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngagementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngagementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal GUEngIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal GUVersionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifyDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastModifyUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecordStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RefGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SLATimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScheduleDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequencesNumberField;
        
        private string SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenantIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViewObjectIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Case {
            get {
                return this.CaseField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseField, value) != true)) {
                    this.CaseField = value;
                    this.RaisePropertyChanged("Case");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Commit {
            get {
                return this.CommitField;
            }
            set {
                if ((object.ReferenceEquals(this.CommitField, value) != true)) {
                    this.CommitField = value;
                    this.RaisePropertyChanged("Commit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommunicationChannel {
            get {
                return this.CommunicationChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.CommunicationChannelField, value) != true)) {
                    this.CommunicationChannelField = value;
                    this.RaisePropertyChanged("CommunicationChannel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyIDField, value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreatedDateTime {
            get {
                return this.CreatedDateTimeField;
            }
            set {
                if ((this.CreatedDateTimeField.Equals(value) != true)) {
                    this.CreatedDateTimeField = value;
                    this.RaisePropertyChanged("CreatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedUser {
            get {
                return this.CreatedUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedUserField, value) != true)) {
                    this.CreatedUserField = value;
                    this.RaisePropertyChanged("CreatedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DurationInMsec {
            get {
                return this.DurationInMsecField;
            }
            set {
                if ((this.DurationInMsecField.Equals(value) != true)) {
                    this.DurationInMsecField = value;
                    this.RaisePropertyChanged("DurationInMsec");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngageeAccount {
            get {
                return this.EngageeAccountField;
            }
            set {
                if ((object.ReferenceEquals(this.EngageeAccountField, value) != true)) {
                    this.EngageeAccountField = value;
                    this.RaisePropertyChanged("EngageeAccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngagementCategory {
            get {
                return this.EngagementCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.EngagementCategoryField, value) != true)) {
                    this.EngagementCategoryField = value;
                    this.RaisePropertyChanged("EngagementCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngagementChannelID {
            get {
                return this.EngagementChannelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EngagementChannelIDField, value) != true)) {
                    this.EngagementChannelIDField = value;
                    this.RaisePropertyChanged("EngagementChannelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngagementClass {
            get {
                return this.EngagementClassField;
            }
            set {
                if ((object.ReferenceEquals(this.EngagementClassField, value) != true)) {
                    this.EngagementClassField = value;
                    this.RaisePropertyChanged("EngagementClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EngagementHistoryId {
            get {
                return this.EngagementHistoryIdField;
            }
            set {
                if ((this.EngagementHistoryIdField.Equals(value) != true)) {
                    this.EngagementHistoryIdField = value;
                    this.RaisePropertyChanged("EngagementHistoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EngagementId {
            get {
                return this.EngagementIdField;
            }
            set {
                if ((this.EngagementIdField.Equals(value) != true)) {
                    this.EngagementIdField = value;
                    this.RaisePropertyChanged("EngagementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngagementName {
            get {
                return this.EngagementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EngagementNameField, value) != true)) {
                    this.EngagementNameField = value;
                    this.RaisePropertyChanged("EngagementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EngagementType {
            get {
                return this.EngagementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EngagementTypeField, value) != true)) {
                    this.EngagementTypeField = value;
                    this.RaisePropertyChanged("EngagementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GUEngID {
            get {
                return this.GUEngIDField;
            }
            set {
                if ((this.GUEngIDField.Equals(value) != true)) {
                    this.GUEngIDField = value;
                    this.RaisePropertyChanged("GUEngID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GUVersionID {
            get {
                return this.GUVersionIDField;
            }
            set {
                if ((this.GUVersionIDField.Equals(value) != true)) {
                    this.GUVersionIDField = value;
                    this.RaisePropertyChanged("GUVersionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModifyDateTime {
            get {
                return this.LastModifyDateTimeField;
            }
            set {
                if ((this.LastModifyDateTimeField.Equals(value) != true)) {
                    this.LastModifyDateTimeField = value;
                    this.RaisePropertyChanged("LastModifyDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastModifyUser {
            get {
                return this.LastModifyUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LastModifyUserField, value) != true)) {
                    this.LastModifyUserField = value;
                    this.RaisePropertyChanged("LastModifyUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalStatus {
            get {
                return this.OperationalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalStatusField, value) != true)) {
                    this.OperationalStatusField = value;
                    this.RaisePropertyChanged("OperationalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriKey {
            get {
                return this.OriKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.OriKeyField, value) != true)) {
                    this.OriKeyField = value;
                    this.RaisePropertyChanged("OriKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherData {
            get {
                return this.OtherDataField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherDataField, value) != true)) {
                    this.OtherDataField = value;
                    this.RaisePropertyChanged("OtherData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecordStatus {
            get {
                return this.RecordStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordStatusField, value) != true)) {
                    this.RecordStatusField = value;
                    this.RaisePropertyChanged("RecordStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RefGuid {
            get {
                return this.RefGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.RefGuidField, value) != true)) {
                    this.RefGuidField = value;
                    this.RaisePropertyChanged("RefGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestType {
            get {
                return this.RequestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTypeField, value) != true)) {
                    this.RequestTypeField = value;
                    this.RaisePropertyChanged("RequestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SLATime {
            get {
                return this.SLATimeField;
            }
            set {
                if ((object.ReferenceEquals(this.SLATimeField, value) != true)) {
                    this.SLATimeField = value;
                    this.RaisePropertyChanged("SLATime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScheduleDateTime {
            get {
                return this.ScheduleDateTimeField;
            }
            set {
                if ((this.ScheduleDateTimeField.Equals(value) != true)) {
                    this.ScheduleDateTimeField = value;
                    this.RaisePropertyChanged("ScheduleDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchKey {
            get {
                return this.SearchKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchKeyField, value) != true)) {
                    this.SearchKeyField = value;
                    this.RaisePropertyChanged("SearchKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SequencesNumber {
            get {
                return this.SequencesNumberField;
            }
            set {
                if ((this.SequencesNumberField.Equals(value) != true)) {
                    this.SequencesNumberField = value;
                    this.RaisePropertyChanged("SequencesNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempID {
            get {
                return this.TempIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TempIDField, value) != true)) {
                    this.TempIDField = value;
                    this.RaisePropertyChanged("TempID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TenantID {
            get {
                return this.TenantIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TenantIDField, value) != true)) {
                    this.TenantIDField = value;
                    this.RaisePropertyChanged("TenantID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionID {
            get {
                return this.TransactionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIDField, value) != true)) {
                    this.TransactionIDField = value;
                    this.RaisePropertyChanged("TransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViewObjectID {
            get {
                return this.ViewObjectIDField;
            }
            set {
                if ((this.ViewObjectIDField.Equals(value) != true)) {
                    this.ViewObjectIDField = value;
                    this.RaisePropertyChanged("ViewObjectID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/DuoSoftware.IDuoEngagementService")]
    [System.SerializableAttribute()]
    public partial struct PermissionInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EngagementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TenantIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViewObjectIDField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EngagementId {
            get {
                return this.EngagementIdField;
            }
            set {
                if ((this.EngagementIdField.Equals(value) != true)) {
                    this.EngagementIdField = value;
                    this.RaisePropertyChanged("EngagementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TenantID {
            get {
                return this.TenantIDField;
            }
            set {
                if ((this.TenantIDField.Equals(value) != true)) {
                    this.TenantIDField = value;
                    this.RaisePropertyChanged("TenantID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViewObjectID {
            get {
                return this.ViewObjectIDField;
            }
            set {
                if ((this.ViewObjectIDField.Equals(value) != true)) {
                    this.ViewObjectIDField = value;
                    this.RaisePropertyChanged("ViewObjectID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="refEngagement.IDuoEngagementService")]
    public interface IDuoEngagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/Test", ReplyAction="http://tempuri.org/IDuoEngagementService/TestResponse")]
        string[] Test(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/Test", ReplyAction="http://tempuri.org/IDuoEngagementService/TestResponse")]
        System.Threading.Tasks.Task<string[]> TestAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/TestEngagementResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements TestEngagement(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/TestEngagementResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> TestEngagementAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestEngagements", ReplyAction="http://tempuri.org/IDuoEngagementService/TestEngagementsResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] TestEngagements(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestEngagements", ReplyAction="http://tempuri.org/IDuoEngagementService/TestEngagementsResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> TestEngagementsAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestWithSecuritytoken", ReplyAction="http://tempuri.org/IDuoEngagementService/TestWithSecuritytokenResponse")]
        string TestWithSecuritytoken(string securitytoken, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/TestWithSecuritytoken", ReplyAction="http://tempuri.org/IDuoEngagementService/TestWithSecuritytokenResponse")]
        System.Threading.Tasks.Task<string> TestWithSecuritytokenAsync(string securitytoken, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ConvertEngagementListToXElement", ReplyAction="http://tempuri.org/IDuoEngagementService/ConvertEngagementListToXElementResponse")]
        System.Xml.Linq.XElement ConvertEngagementListToXElement(DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] engagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ConvertEngagementListToXElement", ReplyAction="http://tempuri.org/IDuoEngagementService/ConvertEngagementListToXElementResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertEngagementListToXElementAsync(DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] engagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/FromXElementToEngagementList", ReplyAction="http://tempuri.org/IDuoEngagementService/FromXElementToEngagementListResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] FromXElementToEngagementList(System.Xml.Linq.XElement xElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/FromXElementToEngagementList", ReplyAction="http://tempuri.org/IDuoEngagementService/FromXElementToEngagementListResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> FromXElementToEngagementListAsync(System.Xml.Linq.XElement xElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SetParentID", ReplyAction="http://tempuri.org/IDuoEngagementService/SetParentIDResponse")]
        System.Xml.Linq.XElement SetParentID(System.Xml.Linq.XElement xElement, string parentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SetParentID", ReplyAction="http://tempuri.org/IDuoEngagementService/SetParentIDResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetParentIDAsync(System.Xml.Linq.XElement xElement, string parentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ChangeElementValue", ReplyAction="http://tempuri.org/IDuoEngagementService/ChangeElementValueResponse")]
        System.Xml.Linq.XElement ChangeElementValue(System.Xml.Linq.XElement xElement, string elementName, string elementValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ChangeElementValue", ReplyAction="http://tempuri.org/IDuoEngagementService/ChangeElementValueResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeElementValueAsync(System.Xml.Linq.XElement xElement, string elementName, string elementValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/LoadEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/LoadEngagementResponse")]
        void LoadEngagement(string securitytoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/LoadEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/LoadEngagementResponse")]
        System.Threading.Tasks.Task LoadEngagementAsync(string securitytoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/CrateEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/CrateEngagementResponse")]
        bool CrateEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/CrateEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/CrateEngagementResponse")]
        System.Threading.Tasks.Task<bool> CrateEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SavePartially", ReplyAction="http://tempuri.org/IDuoEngagementService/SavePartiallyResponse")]
        bool SavePartially(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SavePartially", ReplyAction="http://tempuri.org/IDuoEngagementService/SavePartiallyResponse")]
        System.Threading.Tasks.Task<bool> SavePartiallyAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementResponse")]
        bool RemoveEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementResponse")]
        System.Threading.Tasks.Task<bool> RemoveEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagementBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementBySessionIDResponse")]
        bool RemoveEngagementBySessionID(string securitytoken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagementBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementBySessionIDResponse")]
        System.Threading.Tasks.Task<bool> RemoveEngagementBySessionIDAsync(string securitytoken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemovePartiallySavedEngagementBySessionI" +
            "D", ReplyAction="http://tempuri.org/IDuoEngagementService/RemovePartiallySavedEngagementBySessionI" +
            "DResponse")]
        bool RemovePartiallySavedEngagementBySessionID(string securitytoken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemovePartiallySavedEngagementBySessionI" +
            "D", ReplyAction="http://tempuri.org/IDuoEngagementService/RemovePartiallySavedEngagementBySessionI" +
            "DResponse")]
        System.Threading.Tasks.Task<bool> RemovePartiallySavedEngagementBySessionIDAsync(string securitytoken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ClearRegions", ReplyAction="http://tempuri.org/IDuoEngagementService/ClearRegionsResponse")]
        bool ClearRegions(string securitytoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ClearRegions", ReplyAction="http://tempuri.org/IDuoEngagementService/ClearRegionsResponse")]
        System.Threading.Tasks.Task<bool> ClearRegionsAsync(string securitytoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/UpdateEngagementWithDB", ReplyAction="http://tempuri.org/IDuoEngagementService/UpdateEngagementWithDBResponse")]
        void UpdateEngagementWithDB(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/UpdateEngagementWithDB", ReplyAction="http://tempuri.org/IDuoEngagementService/UpdateEngagementWithDBResponse")]
        System.Threading.Tasks.Task UpdateEngagementWithDBAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/UpdateEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/UpdateEngagementResponse")]
        void UpdateEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagementss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/UpdateEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/UpdateEngagementResponse")]
        System.Threading.Tasks.Task UpdateEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagementss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementPage", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementPageResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementPage(string securitytoken, int pageNo, int pageSize, string engagementClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementPage", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementPageResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementPageAsync(string securitytoken, int pageNo, int pageSize, string engagementClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewCurrentEngagement(string securitytoken, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewCurrentEngagementAsync(string securitytoken, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementByClassTypeCatogary" +
            "", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementByClassTypeCatogary" +
            "Response")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewCurrentEngagementByClassTypeCatogary(string securitytoken, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementByClassTypeCatogary" +
            "", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewCurrentEngagementByClassTypeCatogary" +
            "Response")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewCurrentEngagementByClassTypeCatogaryAsync(string securitytoken, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewSpecificEngagementByClassTypeCatogar" +
            "y", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewSpecificEngagementByClassTypeCatogar" +
            "yResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewSpecificEngagementByClassTypeCatogary(string securitytoken, string sessionID, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewSpecificEngagementByClassTypeCatogar" +
            "y", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewSpecificEngagementByClassTypeCatogar" +
            "yResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewSpecificEngagementByClassTypeCatogaryAsync(string securitytoken, string sessionID, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementBySessionID(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementBySessionIDAsync(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDs", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDsResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementBySessionIDs(string securitytoken, string[] sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDs", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDsResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementBySessionIDsAsync(string securitytoken, string[] sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDWithHistory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDWithHistoryResp" +
            "onse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementBySessionIDWithHistory(string securitytoken, string sessionID, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDWithHistory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementBySessionIDWithHistoryResp" +
            "onse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementBySessionIDWithHistoryAsync(string securitytoken, string sessionID, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDRespon" +
            "se")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementOriginateBySessionID(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDRespon" +
            "se")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementOriginateBySessionIDAsync(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDs", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDsRespo" +
            "nse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementOriginateBySessionIDs(string securitytoken, string[] sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDs", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDsRespo" +
            "nse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementOriginateBySessionIDsAsync(string securitytoken, string[] sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDinDB", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDinDBRe" +
            "sponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementOriginateBySessionIDinDB(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDinDB", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementOriginateBySessionIDinDBRe" +
            "sponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementOriginateBySessionIDinDBAsync(string securitytoken, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassName", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassNameResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassName(string securitytoken, string[] className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassName", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassNameResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassNameAsync(string securitytoken, string[] className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClass", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClass(string securitytoken, string sessionId, string className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClass", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassAsync(string securitytoken, string sessionId, string className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassType", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassType(string securitytoken, string sessionId, string className, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassType", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassTypeAsync(string securitytoken, string sessionId, string className, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeCategory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeCategoryRespons" +
            "e")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassTypeCategory(string securitytoken, string sessionId, string className, string type, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeCategory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByClassTypeCategoryRespons" +
            "e")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassTypeCategoryAsync(string securitytoken, string sessionId, string className, string type, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngID(string securitytoken, decimal[] guEngId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngID", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDAsync(string securitytoken, decimal[] guEngId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryRespon" +
            "se")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistory(string securitytoken, decimal[] guEngId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistory", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryRespon" +
            "se")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryAsync(string securitytoken, decimal[] guEngId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPage", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageRe" +
            "sponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistoryPage(string securitytoken, decimal[] guEngId, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPage", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageRe" +
            "sponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryPageAsync(string securitytoken, decimal[] guEngId, int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageDa" +
            "teRange", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageDa" +
            "teRangeResponse")]
        DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistoryPageDateRange(string securitytoken, decimal[] guEngId, int pageNo, int pageSize, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageDa" +
            "teRange", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementByGUEngIDWithHistoryPageDa" +
            "teRangeResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryPageDateRangeAsync(string securitytoken, decimal[] guEngId, int pageNo, int pageSize, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/AddSpecificUsersOrGroupsToEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/AddSpecificUsersOrGroupsToEngagementResp" +
            "onse")]
        bool AddSpecificUsersOrGroupsToEngagement(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/AddSpecificUsersOrGroupsToEngagement", ReplyAction="http://tempuri.org/IDuoEngagementService/AddSpecificUsersOrGroupsToEngagementResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> AddSpecificUsersOrGroupsToEngagementAsync(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveSpecificUsersOrGroupsFromEngagemen" +
            "t", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveSpecificUsersOrGroupsFromEngagemen" +
            "tResponse")]
        bool RemoveSpecificUsersOrGroupsFromEngagement(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveSpecificUsersOrGroupsFromEngagemen" +
            "t", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveSpecificUsersOrGroupsFromEngagemen" +
            "tResponse")]
        System.Threading.Tasks.Task<bool> RemoveSpecificUsersOrGroupsFromEngagementAsync(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementSupervisorList", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementSupervisorListResponse")]
        System.Xml.Linq.XElement ViewEngagementSupervisorList(string securityToken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/ViewEngagementSupervisorList", ReplyAction="http://tempuri.org/IDuoEngagementService/ViewEngagementSupervisorListResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ViewEngagementSupervisorListAsync(string securityToken, string[] sessionIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SetEngagementSupervisor", ReplyAction="http://tempuri.org/IDuoEngagementService/SetEngagementSupervisorResponse")]
        bool SetEngagementSupervisor(string securityToken, string[] sessionIDs, long supervisorID, int[] viewObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SetEngagementSupervisor", ReplyAction="http://tempuri.org/IDuoEngagementService/SetEngagementSupervisorResponse")]
        System.Threading.Tasks.Task<bool> SetEngagementSupervisorAsync(string securityToken, string[] sessionIDs, long supervisorID, int[] viewObjectIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagementSupervisor", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementSupervisorResponse")]
        bool RemoveEngagementSupervisor(string securityToken, string[] sessionIDs, long supervisorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/RemoveEngagementSupervisor", ReplyAction="http://tempuri.org/IDuoEngagementService/RemoveEngagementSupervisorResponse")]
        System.Threading.Tasks.Task<bool> RemoveEngagementSupervisorAsync(string securityToken, string[] sessionIDs, long supervisorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SavePendingChange", ReplyAction="http://tempuri.org/IDuoEngagementService/SavePendingChangeResponse")]
        string SavePendingChange(string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuoEngagementService/SavePendingChange", ReplyAction="http://tempuri.org/IDuoEngagementService/SavePendingChangeResponse")]
        System.Threading.Tasks.Task<string> SavePendingChangeAsync(string securityToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuoEngagementServiceChannel : DuoSoftware.DuoSoftPhone.refEngagement.IDuoEngagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuoEngagementServiceClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.refEngagement.IDuoEngagementService>, DuoSoftware.DuoSoftPhone.refEngagement.IDuoEngagementService {
        
        public DuoEngagementServiceClient() {
        }
        
        public DuoEngagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DuoEngagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DuoEngagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DuoEngagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] Test(string value) {
            return base.Channel.Test(value);
        }
        
        public System.Threading.Tasks.Task<string[]> TestAsync(string value) {
            return base.Channel.TestAsync(value);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements TestEngagement(string value) {
            return base.Channel.TestEngagement(value);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> TestEngagementAsync(string value) {
            return base.Channel.TestEngagementAsync(value);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] TestEngagements(string value) {
            return base.Channel.TestEngagements(value);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> TestEngagementsAsync(string value) {
            return base.Channel.TestEngagementsAsync(value);
        }
        
        public string TestWithSecuritytoken(string securitytoken, string value) {
            return base.Channel.TestWithSecuritytoken(securitytoken, value);
        }
        
        public System.Threading.Tasks.Task<string> TestWithSecuritytokenAsync(string securitytoken, string value) {
            return base.Channel.TestWithSecuritytokenAsync(securitytoken, value);
        }
        
        public System.Xml.Linq.XElement ConvertEngagementListToXElement(DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] engagements) {
            return base.Channel.ConvertEngagementListToXElement(engagements);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertEngagementListToXElementAsync(DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] engagements) {
            return base.Channel.ConvertEngagementListToXElementAsync(engagements);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] FromXElementToEngagementList(System.Xml.Linq.XElement xElement) {
            return base.Channel.FromXElementToEngagementList(xElement);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> FromXElementToEngagementListAsync(System.Xml.Linq.XElement xElement) {
            return base.Channel.FromXElementToEngagementListAsync(xElement);
        }
        
        public System.Xml.Linq.XElement SetParentID(System.Xml.Linq.XElement xElement, string parentID) {
            return base.Channel.SetParentID(xElement, parentID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetParentIDAsync(System.Xml.Linq.XElement xElement, string parentID) {
            return base.Channel.SetParentIDAsync(xElement, parentID);
        }
        
        public System.Xml.Linq.XElement ChangeElementValue(System.Xml.Linq.XElement xElement, string elementName, string elementValue) {
            return base.Channel.ChangeElementValue(xElement, elementName, elementValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeElementValueAsync(System.Xml.Linq.XElement xElement, string elementName, string elementValue) {
            return base.Channel.ChangeElementValueAsync(xElement, elementName, elementValue);
        }
        
        public void LoadEngagement(string securitytoken) {
            base.Channel.LoadEngagement(securitytoken);
        }
        
        public System.Threading.Tasks.Task LoadEngagementAsync(string securitytoken) {
            return base.Channel.LoadEngagementAsync(securitytoken);
        }
        
        public bool CrateEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.CrateEngagement(securitytoken, duoEngagements);
        }
        
        public System.Threading.Tasks.Task<bool> CrateEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.CrateEngagementAsync(securitytoken, duoEngagements);
        }
        
        public bool SavePartially(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.SavePartially(securitytoken, duoEngagements);
        }
        
        public System.Threading.Tasks.Task<bool> SavePartiallyAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.SavePartiallyAsync(securitytoken, duoEngagements);
        }
        
        public bool RemoveEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.RemoveEngagement(securitytoken, duoEngagements);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.RemoveEngagementAsync(securitytoken, duoEngagements);
        }
        
        public bool RemoveEngagementBySessionID(string securitytoken, string[] sessionIDs) {
            return base.Channel.RemoveEngagementBySessionID(securitytoken, sessionIDs);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEngagementBySessionIDAsync(string securitytoken, string[] sessionIDs) {
            return base.Channel.RemoveEngagementBySessionIDAsync(securitytoken, sessionIDs);
        }
        
        public bool RemovePartiallySavedEngagementBySessionID(string securitytoken, string[] sessionIDs) {
            return base.Channel.RemovePartiallySavedEngagementBySessionID(securitytoken, sessionIDs);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePartiallySavedEngagementBySessionIDAsync(string securitytoken, string[] sessionIDs) {
            return base.Channel.RemovePartiallySavedEngagementBySessionIDAsync(securitytoken, sessionIDs);
        }
        
        public bool ClearRegions(string securitytoken) {
            return base.Channel.ClearRegions(securitytoken);
        }
        
        public System.Threading.Tasks.Task<bool> ClearRegionsAsync(string securitytoken) {
            return base.Channel.ClearRegionsAsync(securitytoken);
        }
        
        public void UpdateEngagementWithDB(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            base.Channel.UpdateEngagementWithDB(securitytoken, duoEngagements);
        }
        
        public System.Threading.Tasks.Task UpdateEngagementWithDBAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagements) {
            return base.Channel.UpdateEngagementWithDBAsync(securitytoken, duoEngagements);
        }
        
        public void UpdateEngagement(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagementss) {
            base.Channel.UpdateEngagement(securitytoken, duoEngagementss);
        }
        
        public System.Threading.Tasks.Task UpdateEngagementAsync(string securitytoken, DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] duoEngagementss) {
            return base.Channel.UpdateEngagementAsync(securitytoken, duoEngagementss);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementPage(string securitytoken, int pageNo, int pageSize, string engagementClass) {
            return base.Channel.ViewEngagementPage(securitytoken, pageNo, pageSize, engagementClass);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementPageAsync(string securitytoken, int pageNo, int pageSize, string engagementClass) {
            return base.Channel.ViewEngagementPageAsync(securitytoken, pageNo, pageSize, engagementClass);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewCurrentEngagement(string securitytoken, int pageNo, int pageSize) {
            return base.Channel.ViewCurrentEngagement(securitytoken, pageNo, pageSize);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewCurrentEngagementAsync(string securitytoken, int pageNo, int pageSize) {
            return base.Channel.ViewCurrentEngagementAsync(securitytoken, pageNo, pageSize);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewCurrentEngagementByClassTypeCatogary(string securitytoken, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory) {
            return base.Channel.ViewCurrentEngagementByClassTypeCatogary(securitytoken, pageNo, pageSize, engagementClass, engagementType, engagementCategory);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewCurrentEngagementByClassTypeCatogaryAsync(string securitytoken, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory) {
            return base.Channel.ViewCurrentEngagementByClassTypeCatogaryAsync(securitytoken, pageNo, pageSize, engagementClass, engagementType, engagementCategory);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewSpecificEngagementByClassTypeCatogary(string securitytoken, string sessionID, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory) {
            return base.Channel.ViewSpecificEngagementByClassTypeCatogary(securitytoken, sessionID, pageNo, pageSize, engagementClass, engagementType, engagementCategory);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewSpecificEngagementByClassTypeCatogaryAsync(string securitytoken, string sessionID, int pageNo, int pageSize, string engagementClass, string engagementType, string engagementCategory) {
            return base.Channel.ViewSpecificEngagementByClassTypeCatogaryAsync(securitytoken, sessionID, pageNo, pageSize, engagementClass, engagementType, engagementCategory);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementBySessionID(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementBySessionID(securitytoken, sessionID);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementBySessionIDAsync(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementBySessionIDAsync(securitytoken, sessionID);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementBySessionIDs(string securitytoken, string[] sessionID) {
            return base.Channel.ViewEngagementBySessionIDs(securitytoken, sessionID);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementBySessionIDsAsync(string securitytoken, string[] sessionID) {
            return base.Channel.ViewEngagementBySessionIDsAsync(securitytoken, sessionID);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementBySessionIDWithHistory(string securitytoken, string sessionID, int pageNo, int pageSize) {
            return base.Channel.ViewEngagementBySessionIDWithHistory(securitytoken, sessionID, pageNo, pageSize);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementBySessionIDWithHistoryAsync(string securitytoken, string sessionID, int pageNo, int pageSize) {
            return base.Channel.ViewEngagementBySessionIDWithHistoryAsync(securitytoken, sessionID, pageNo, pageSize);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementOriginateBySessionID(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionID(securitytoken, sessionID);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementOriginateBySessionIDAsync(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionIDAsync(securitytoken, sessionID);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementOriginateBySessionIDs(string securitytoken, string[] sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionIDs(securitytoken, sessionID);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementOriginateBySessionIDsAsync(string securitytoken, string[] sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionIDsAsync(securitytoken, sessionID);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements ViewEngagementOriginateBySessionIDinDB(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionIDinDB(securitytoken, sessionID);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements> ViewEngagementOriginateBySessionIDinDBAsync(string securitytoken, string sessionID) {
            return base.Channel.ViewEngagementOriginateBySessionIDinDBAsync(securitytoken, sessionID);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassName(string securitytoken, string[] className) {
            return base.Channel.ViewEngagementByClassName(securitytoken, className);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassNameAsync(string securitytoken, string[] className) {
            return base.Channel.ViewEngagementByClassNameAsync(securitytoken, className);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClass(string securitytoken, string sessionId, string className) {
            return base.Channel.ViewEngagementByClass(securitytoken, sessionId, className);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassAsync(string securitytoken, string sessionId, string className) {
            return base.Channel.ViewEngagementByClassAsync(securitytoken, sessionId, className);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassType(string securitytoken, string sessionId, string className, string type) {
            return base.Channel.ViewEngagementByClassType(securitytoken, sessionId, className, type);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassTypeAsync(string securitytoken, string sessionId, string className, string type) {
            return base.Channel.ViewEngagementByClassTypeAsync(securitytoken, sessionId, className, type);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByClassTypeCategory(string securitytoken, string sessionId, string className, string type, string category) {
            return base.Channel.ViewEngagementByClassTypeCategory(securitytoken, sessionId, className, type, category);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByClassTypeCategoryAsync(string securitytoken, string sessionId, string className, string type, string category) {
            return base.Channel.ViewEngagementByClassTypeCategoryAsync(securitytoken, sessionId, className, type, category);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngID(string securitytoken, decimal[] guEngId) {
            return base.Channel.ViewEngagementByGUEngID(securitytoken, guEngId);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDAsync(string securitytoken, decimal[] guEngId) {
            return base.Channel.ViewEngagementByGUEngIDAsync(securitytoken, guEngId);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistory(string securitytoken, decimal[] guEngId) {
            return base.Channel.ViewEngagementByGUEngIDWithHistory(securitytoken, guEngId);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryAsync(string securitytoken, decimal[] guEngId) {
            return base.Channel.ViewEngagementByGUEngIDWithHistoryAsync(securitytoken, guEngId);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistoryPage(string securitytoken, decimal[] guEngId, int pageNo, int pageSize) {
            return base.Channel.ViewEngagementByGUEngIDWithHistoryPage(securitytoken, guEngId, pageNo, pageSize);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryPageAsync(string securitytoken, decimal[] guEngId, int pageNo, int pageSize) {
            return base.Channel.ViewEngagementByGUEngIDWithHistoryPageAsync(securitytoken, guEngId, pageNo, pageSize);
        }
        
        public DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[] ViewEngagementByGUEngIDWithHistoryPageDateRange(string securitytoken, decimal[] guEngId, int pageNo, int pageSize, System.DateTime from, System.DateTime to) {
            return base.Channel.ViewEngagementByGUEngIDWithHistoryPageDateRange(securitytoken, guEngId, pageNo, pageSize, from, to);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refEngagement.DuoEngagements[]> ViewEngagementByGUEngIDWithHistoryPageDateRangeAsync(string securitytoken, decimal[] guEngId, int pageNo, int pageSize, System.DateTime from, System.DateTime to) {
            return base.Channel.ViewEngagementByGUEngIDWithHistoryPageDateRangeAsync(securitytoken, guEngId, pageNo, pageSize, from, to);
        }
        
        public bool AddSpecificUsersOrGroupsToEngagement(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups) {
            return base.Channel.AddSpecificUsersOrGroupsToEngagement(securityToken, specificUsersGroups);
        }
        
        public System.Threading.Tasks.Task<bool> AddSpecificUsersOrGroupsToEngagementAsync(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups) {
            return base.Channel.AddSpecificUsersOrGroupsToEngagementAsync(securityToken, specificUsersGroups);
        }
        
        public bool RemoveSpecificUsersOrGroupsFromEngagement(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups) {
            return base.Channel.RemoveSpecificUsersOrGroupsFromEngagement(securityToken, specificUsersGroups);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSpecificUsersOrGroupsFromEngagementAsync(string securityToken, DuoSoftware.DuoSoftPhone.refEngagement.PermissionInfo[] specificUsersGroups) {
            return base.Channel.RemoveSpecificUsersOrGroupsFromEngagementAsync(securityToken, specificUsersGroups);
        }
        
        public System.Xml.Linq.XElement ViewEngagementSupervisorList(string securityToken, string[] sessionIDs) {
            return base.Channel.ViewEngagementSupervisorList(securityToken, sessionIDs);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ViewEngagementSupervisorListAsync(string securityToken, string[] sessionIDs) {
            return base.Channel.ViewEngagementSupervisorListAsync(securityToken, sessionIDs);
        }
        
        public bool SetEngagementSupervisor(string securityToken, string[] sessionIDs, long supervisorID, int[] viewObjectIDs) {
            return base.Channel.SetEngagementSupervisor(securityToken, sessionIDs, supervisorID, viewObjectIDs);
        }
        
        public System.Threading.Tasks.Task<bool> SetEngagementSupervisorAsync(string securityToken, string[] sessionIDs, long supervisorID, int[] viewObjectIDs) {
            return base.Channel.SetEngagementSupervisorAsync(securityToken, sessionIDs, supervisorID, viewObjectIDs);
        }
        
        public bool RemoveEngagementSupervisor(string securityToken, string[] sessionIDs, long supervisorID) {
            return base.Channel.RemoveEngagementSupervisor(securityToken, sessionIDs, supervisorID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEngagementSupervisorAsync(string securityToken, string[] sessionIDs, long supervisorID) {
            return base.Channel.RemoveEngagementSupervisorAsync(securityToken, sessionIDs, supervisorID);
        }
        
        public string SavePendingChange(string securityToken) {
            return base.Channel.SavePendingChange(securityToken);
        }
        
        public System.Threading.Tasks.Task<string> SavePendingChangeAsync(string securityToken) {
            return base.Channel.SavePendingChangeAsync(securityToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="refEngagement.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IO.Stream GetSilverlightPolicy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetSilverlightPolicyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IO.Stream GetFlashPolicy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFlashPolicyAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : DuoSoftware.DuoSoftPhone.refEngagement.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.refEngagement.IPolicyRetriever>, DuoSoftware.DuoSoftPhone.refEngagement.IPolicyRetriever {
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream GetSilverlightPolicy() {
            return base.Channel.GetSilverlightPolicy();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetSilverlightPolicyAsync() {
            return base.Channel.GetSilverlightPolicyAsync();
        }
        
        public System.IO.Stream GetFlashPolicy() {
            return base.Channel.GetFlashPolicy();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFlashPolicyAsync() {
            return base.Channel.GetFlashPolicyAsync();
        }
    }
}
