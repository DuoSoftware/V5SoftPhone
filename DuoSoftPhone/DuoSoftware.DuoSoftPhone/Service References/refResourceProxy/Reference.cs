//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuoSoftware.DuoSoftPhone.refResourceProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommunicationModes", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew.Enums")]
    public enum CommunicationModes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XMPP = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Socket = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebService = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HttpPooling = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceProxyReplyData.ResourceProxyReply", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew")]
    [System.SerializableAttribute()]
    public partial struct ResourceProxyReplyDataResourceProxyReply : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {

        public override string ToString()
        {
            return
                string.Format(
                    "Resource Proxy Reply [ XMPPUser: {0}, SessionID: {1}, ResultString:{2},Result:{3},IP:{4},ExtraData:{5},CommunicationMode:{6},Command:{7},Port{8}]",
                    XMPPUser, SessionID, ResultString, Result, IP, ExtraData, CommunicationMode, Command, Port);
        }

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.refResourceProxy.WorkflowResultCode CommandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes CommunicationModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMPPUserField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.refResourceProxy.WorkflowResultCode Command {
            get {
                return this.CommandField;
            }
            set {
                if ((this.CommandField.Equals(value) != true)) {
                    this.CommandField = value;
                    this.RaisePropertyChanged("Command");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes CommunicationMode {
            get {
                return this.CommunicationModeField;
            }
            set {
                if ((this.CommunicationModeField.Equals(value) != true)) {
                    this.CommunicationModeField = value;
                    this.RaisePropertyChanged("CommunicationMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraData {
            get {
                return this.ExtraDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraDataField, value) != true)) {
                    this.ExtraDataField = value;
                    this.RaisePropertyChanged("ExtraData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Port {
            get {
                return this.PortField;
            }
            set {
                if ((object.ReferenceEquals(this.PortField, value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultString {
            get {
                return this.ResultStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultStringField, value) != true)) {
                    this.ResultStringField = value;
                    this.RaisePropertyChanged("ResultString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMPPUser {
            get {
                return this.XMPPUserField;
            }
            set {
                if ((object.ReferenceEquals(this.XMPPUserField, value) != true)) {
                    this.XMPPUserField = value;
                    this.RaisePropertyChanged("XMPPUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowResultCode", Namespace="http://schemas.datacontract.org/2004/07/ResourceProxyConsoleAppNew.Enums")]
    public enum WorkflowResultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS101 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE101 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE102 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS201 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS202 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE201 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS301 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS302 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE301 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE302 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE303 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS401 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS402 = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS403 = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4031 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4032 = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS4033 = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS404 = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE401 = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE402 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE403 = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE404 = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS405 = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS501 = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS502 = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE501 = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE502 = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS601 = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE601 = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE603 = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS701 = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE701 = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE702 = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS801 = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE801 = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE802 = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS901 = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE901 = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE902 = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDS1001 = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE1001 = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDE1002 = 42,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="refResourceProxy.IResourceProxyServices")]
    public interface IResourceProxyServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceRegistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceRegistrationResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceRegistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceRegistrationResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceRegistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceUnregistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceUnregistrationResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceUnregistration", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceUnregistrationResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceUnregistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceForceLogoff", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceForceLogoffResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceForceLogoff", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceForceLogoffResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceForceLogoffAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequestResponse" +
            "")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelResourceUnregisterRequestResponse" +
            "")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelResourceUnregisterRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendACWFreezRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/SendACWFreezRequestResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendACWFreezRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/SendACWFreezRequestResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendACWFreezRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequestResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelModeChangeRequestResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelModeChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequestResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequest", ReplyAction="http://tempuri.org/IResourceProxyServices/CancelStatusChangeRequestResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelStatusChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInboundResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestInboundResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestInboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutboundResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutbound", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOutboundResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestOutboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOffline", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOfflineResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOffline", ReplyAction="http://tempuri.org/IResourceProxyServices/SendModeChangeRequestOfflineResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestOfflineAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdel", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdelResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdel", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestIdelResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestIdelAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreakResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestBreakResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceModeChange", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceModeChangeResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceModeChange", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceModeChangeResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceModeChangeAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreakResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreak", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBreakResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACW", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACWResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACW", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeACWResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeACWAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusy", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusyResponse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusy", ReplyAction="http://tempuri.org/IResourceProxyServices/ResourceStatusChangeBusyResponse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeBusyAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturb", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturbResp" +
            "onse")]
        DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturb", ReplyAction="http://tempuri.org/IResourceProxyServices/SendStatusChangeRequestDoNotDisturbResp" +
            "onse")]
        System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestDoNotDisturbAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceProxyServicesChannel : DuoSoftware.DuoSoftPhone.refResourceProxy.IResourceProxyServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceProxyServicesClient : System.ServiceModel.ClientBase<DuoSoftware.DuoSoftPhone.refResourceProxy.IResourceProxyServices>, DuoSoftware.DuoSoftPhone.refResourceProxy.IResourceProxyServices {
        
        public ResourceProxyServicesClient() {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceProxyServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceProxyServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceRegistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceRegistration(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceRegistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceRegistrationAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceUnregistration(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceUnregistration(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceUnregistrationAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceUnregistrationAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceForceLogoff(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceForceLogoff(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceForceLogoffAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceForceLogoffAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelResourceUnregisterRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelResourceUnregisterRequest(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelResourceUnregisterRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelResourceUnregisterRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendACWFreezRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendACWFreezRequest(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendACWFreezRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendACWFreezRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelModeChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelModeChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelModeChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelModeChangeRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply CancelStatusChangeRequest(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelStatusChangeRequest(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> CancelStatusChangeRequestAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.CancelStatusChangeRequestAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestInbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestInbound(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestInboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestInboundAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOutbound(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOutbound(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestOutboundAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOutboundAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendModeChangeRequestOffline(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOffline(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendModeChangeRequestOfflineAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.SendModeChangeRequestOfflineAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestIdel(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestIdel(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestIdelAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestIdelAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestBreak(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestBreakAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceModeChange(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceModeChange(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceModeChangeAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string extraData) {
            return base.Channel.ResourceModeChangeAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBreak(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBreak(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeBreakAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBreakAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeACW(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeACW(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeACWAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeACWAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply ResourceStatusChangeBusy(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBusy(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> ResourceStatusChangeBusyAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string sessionId, string extraData) {
            return base.Channel.ResourceStatusChangeBusyAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, sessionId, extraData);
        }
        
        public DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply SendStatusChangeRequestDoNotDisturb(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestDoNotDisturb(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
        
        public System.Threading.Tasks.Task<DuoSoftware.DuoSoftPhone.refResourceProxy.ResourceProxyReplyDataResourceProxyReply> SendStatusChangeRequestDoNotDisturbAsync(string securityToken, string xmppUserName, string port, string ip, DuoSoftware.DuoSoftPhone.refResourceProxy.CommunicationModes communicationMode, string resourceId, string breakReason, string extraData, string sessionId) {
            return base.Channel.SendStatusChangeRequestDoNotDisturbAsync(securityToken, xmppUserName, port, ip, communicationMode, resourceId, breakReason, extraData, sessionId);
        }
    }
}
